{
	"appsUsed":[
		
	],
	"createdTime":1761912522949,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_IyOaB",
			"priority":0,
			"skip":false,
			"toNodeId":"n_zj1J9",
			"type":"next"
		},
		{
			"fromNodeId":"n_zj1J9",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_L7WXf",
			"type":"if"
		},
		{
			"fromNodeId":"n_L7WXf",
			"priority":0,
			"skip":false,
			"toNodeId":"n_WrrB3",
			"type":"next"
		},
		{
			"fromNodeId":"n_WrrB3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_xnr0g",
			"type":"next"
		},
		{
			"fromNodeId":"n_zj1J9",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"n_xnr0g",
			"type":"next"
		},
		{
			"fromNodeId":"n_xnr0g",
			"priority":0,
			"skip":false,
			"toNodeId":"n_6PhrQ",
			"type":"next"
		},
		{
			"fromNodeId":"n_6PhrQ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_h7Yud",
			"type":"next"
		},
		{
			"fromNodeId":"n_h7Yud",
			"name":"1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_h7Yud@1",
			"type":"branch"
		},
		{
			"fromNodeId":"n_h7Yud@1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Haqom",
			"type":"next"
		},
		{
			"fromNodeId":"n_h7Yud",
			"name":"2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_h7Yud@2",
			"type":"branch"
		},
		{
			"fromNodeId":"n_h7Yud@2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YGFhv",
			"type":"next"
		},
		{
			"fromNodeId":"n_Haqom",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rujD8",
			"type":"next"
		},
		{
			"fromNodeId":"n_YGFhv",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rujD8",
			"type":"next"
		},
		{
			"fromNodeId":"n_h7Yud",
			"name":"default",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rujD8",
			"type":"branch"
		}
	],
	"id":"6904a6caf80f564e784ba0d2",
	"lastModifiedBy":44105,
	"lcName":"[repsschedular] syncemployeeactivitieshttptrigger",
	"modifiedTime":1761919237369,
	"name":"[RepsSchedular] SyncEmployeeActivitiesHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1161,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VHgde-1",
			"id":"n_IyOaB",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"authorization":{
								"type":"string",
								"title":"authorization"
							}
						}
					},
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":400,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object"
						},
						"namespaces":[]
					},
					{
						"status":500,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object"
						},
						"namespaces":[]
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":791,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VHgde-1",
			"id":"n_zj1J9",
			"index":2,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_IyOaB.outputs.body }}",
						"filter":{
							"operator":"MISSING"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":1092,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_zj1J9@_VHgde-1@y",
			"id":"n_L7WXf",
			"index":3,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"response":{
							"type":"object",
							"properties":{
								"statusCode":{
									"type":"integer",
									"title":"Status Code"
								},
								"message":{
									"type":"string",
									"title":"Message"
								}
							},
							"additionalProperties":false,
							"title":"Response",
							"required":[]
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"response":{
					"statusCode":400,
					"message":"Invalid input values"
				}
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"response":{
							"type":"object",
							"properties":{
								"statusCode":{
									"type":"integer",
									"title":"Status Code"
								},
								"message":{
									"type":"string",
									"title":"Message"
								}
							},
							"additionalProperties":false,
							"title":"Response",
							"required":[]
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"create 400 response",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1132,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_zj1J9@_VHgde-1@y",
			"id":"n_WrrB3",
			"index":4,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"400_undefined",
				"body":"{{ n_L7WXf.outputs.response }}",
				"status":400
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":230,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_VHgde-1",
			"id":"n_xnr0g",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"message":{
							"type":"string",
							"title":"Message"
						},
						"statusCode":{
							"type":"string",
							"title":"Status Code"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"requestBody":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Request Body"
						},
						"authorizationHeader":{
							"type":"string",
							"title":"Authorization Header"
						}
					}
				},
				"code":"#r \"nuget: System.IdentityModel.Tokens.Jwt\"\n#r \"nuget: Microsoft.IdentityModel.Tokens\"\n\nusing System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Net.Http;\nusing System.Text;\nusing System.Runtime.Serialization;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Linq;\n\npublic abstract class BaseEntity<T>\n{\n    public T Id { get; set; }\n}\n\npublic class BusinessUnit : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeBusinessUnit> EmployeeBusinessUnits { get; set; }\n}\n\n[Flags]\npublic enum ComparisonGroups : short\n{\n    None = 0,\n    Tier = 1 << 0,\n    Designation = 1 << 1,\n    Location = 1 << 2,\n    BusinessUnit = 1 << 3\n}\n\npublic enum CappingStrategy : short\n{\n    None = 0,\n    ActivityCountBased = 1,\n    AverageBased = 2,\n    RevisedScoreBased = 3,\n    ScoreBased = 4\n}\n\npublic class EmployeeRepsActivity : BaseEntity<long>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public int RepsActivityId { get; set; }\n    public int Points { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public string ReferenceNumber { get; set; } // need to revisit\n    public RepsActivity RepsActivity { get; set; }\n    public Employee Employee { get; set; }\n    public bool IsAggregated { get; set; }\n}\n\npublic class EvaluationCategory : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public int Weightage { get; set; }\n    public string ImageName { get; set; }\n    public short DefaultRating { get; set; }\n    public ComparisonGroups ComparisonGroups { get; set; }\n    public IReadOnlyCollection<RepsActivity> RepsActivities { get; set; }\n}\n\npublic enum CalculationStrategy\n{\n    None = 0,\n    IndividualMetric = 1,\n    DeliveryProjectMetric = 2\n}\n\npublic class CapLimit : BaseEntity<int>\n{\n    public int RepsActivityId { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public short Limit { get; set; }\n    public short Frequency { get; set; }\n    public CappingStrategy CappingStrategy { get; set; }\n}\n\npublic class RepsActivity : BaseEntity<int>\n{\n    public string ActivityName { get; set; }\n    public string Description { get; set; }\n    public int Points { get; set; }\n    public bool IsActive { get; set; }\n    public string FocusArea { get; set; }\n    public string RepsSize { get; set; }\n    public int? CapLimitId { get; set; }\n    public CapLimit CapLimit { get; set; }\n    public CalculationStrategy CalculationStrategy { get; set; }\n    public EvaluationCategory EvaluationCategory { get; set; }\n    public int EvaluationCategoryId { get; set; }\n    public bool ShouldAggregate { get; set; }\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities { get; set; }\n}\n\npublic class Tier : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeTier> EmployeeTiers { get; set; }\n}\n\npublic class Location : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeLocation> EmployeeLocations { get; set; }\n}\n\npublic class Account : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeAccount> EmployeeAccounts { get; set; }\n}\n\n\npublic class EmployeeTier : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int TierId { get; set; }\n    public Tier Tier { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class EmployeeLocation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int LocationId { get; set; }\n    public Location Location { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class EmployeeBusinessUnit : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int BusinessUnitId { get; set; }\n    public BusinessUnit BusinessUnit { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class EmployeeAccount : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int AccountId { get; set; }\n    public Account Account { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Employee : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public string FullName { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string Email { get; set; }\n    public bool IsActive { get; set; }\n    public string Status { get; set; }\n    public Employee Manager { get; set; }\n    public string ManagerEmployeeNumber { get; set; }\n    public long? ManagerId { get; set; }\n    public EmployeeDesignation EmployeeDesignation { get; set; }\n    public EmployeeAccount EmployeeAccount { get; set; }\n    public EmployeeBusinessUnit EmployeeBusinessUnit { get; set; }\n    public EmployeeLocation EmployeeLocation { get; set; }\n    public EmployeeTier EmployeeTier { get; set; }\n    private readonly List<EmployeeRepsActivity> _employeeRepsActivities = new List<EmployeeRepsActivity>();\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities => _employeeRepsActivities.AsReadOnly();\n\n    public void AddRepsActivity(EmployeeRepsActivity employeeRepsActivity)\n    {\n        _employeeRepsActivities.Add(employeeRepsActivity);\n    }\n}\n\npublic class Designation : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeDesignation> EmployeeDesignations { get; set; }\n}\n\npublic class EmployeeDesignation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int DesignationId { get; set; }\n    public Designation Designation { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\n[Serializable]\n    public class EmployeeNotFoundException : Exception\n    {\n        public EmployeeNotFoundException() { }\n        public EmployeeNotFoundException(string message) : base(message) { }\n        public EmployeeNotFoundException(string message, Exception inner) : base(message, inner) { }\n        protected EmployeeNotFoundException(\n          SerializationInfo info,\n          StreamingContext context) : base(info, context) { }\n    }\n\n\n[Serializable]\n    public class RepsActivityNotFoundException : Exception\n    {\n        public RepsActivityNotFoundException() { }\n        public RepsActivityNotFoundException(int activityId) : base($\"No valid activity found for activity id: {activityId}\") { }\n        public RepsActivityNotFoundException(string message) : base(message) { }\n        public RepsActivityNotFoundException(string message, Exception inner) : base(message, inner) { }\n        protected RepsActivityNotFoundException(\n          SerializationInfo info,\n          StreamingContext context) : base(info, context) { }\n\n\n    }\n\n\npublic class AuthService {\n    public string GetAppidFromToken(string authorizationHeader)\n    {   \n        if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith(\"Bearer \"))\n        return null;\n\n        string token = authorizationHeader.Substring(\"Bearer \".Length);\n\n        try\n        {\n            var parts = token.Split('.');\n            if (parts.Length < 2)\n                return null;\n\n            // Decode JWT payload (second part)\n            string payload = parts[1];\n            payload = payload.Replace('-', '+').Replace('_', '/');\n            switch (payload.Length % 4)\n            {\n                case 2: payload += \"==\"; break;\n                case 3: payload += \"=\"; break;\n            }\n\n            var jsonBytes = Convert.FromBase64String(payload);\n            var json = Encoding.UTF8.GetString(jsonBytes);\n\n            using (var doc = JsonDocument.Parse(json))\n            {\n                if (doc.RootElement.TryGetProperty(\"appid\", out var appidProp))\n                {\n                    return appidProp.GetString();\n                }\n            }\n\n            return null;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n}\n\n\npublic class EmployeeActivitiesProcessor\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/EmployeeRepoUrl\";\n    private const string DomainName = \"virtusa.com\";\n\n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n        // Consider adding other options like handling null values if needed\n        // DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull\n    };\n\n    // --- DB Interaction Method ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\"; // Default to empty object\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n             Console.WriteLine($\"JSON Serialization Error (Request - {operationName}): {e.Message} | Payload: {payload}\");\n             throw; // Re-throw serialization errors immediately\n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            // Console.WriteLine($\"DEBUG: Sending {operationName} with payload: {jsonRequestBody}\"); // Optional debug log\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n            // Console.WriteLine($\"DEBUG: Received status {response.StatusCode}, content: {responseContent}\"); // Optional debug log\n\n            // Check for non-success status codes specifically\n            if (!response.IsSuccessStatusCode)\n            {\n                 Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n                 // Consider how to handle specific non-success codes (e.g., 404 Not Found might return default)\n                 // For now, throw an exception for any non-success to indicate failure clearly.\n                 response.EnsureSuccessStatusCode(); // This will throw HttpRequestException\n            }\n\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") // Treat empty JSON object as null/default\n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement) || root.TryGetProperty(\"response\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         // Check if the target type is primitive (like int, bool, long) and the JSON element reflects that\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             // Attempt direct deserialization for primitives/string from the element\n                             try {\n                                return resultElement.Deserialize<TResponse>(jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                                return default;\n                             }\n                         }\n                         else // Assume complex object\n                         {\n                            return resultElement.Deserialize<TResponse>(jsonOptions);\n                         }\n                     }\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                        // Check for primitives at the root as well\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             try {\n                                return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                                return default;\n                             }\n                         }\n                         else\n                         {\n                            return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                         }\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n                return default; // Return default on deserialization failure\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n            // Depending on the operation, maybe return default or false instead of throwing\n            // For now, re-throwing signals a clear failure.\n            throw;\n        }\n        // Removed redundant JsonException catch here, handled in request serialization try-catch\n        catch (Exception e) // Catch unexpected errors\n        {\n             Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n             throw;\n        }\n    }\n\n    private async Task ProcessDesignationAsync(Designation designation)\n    {\n        // var specification = new DesignationByReferenceNumberSpecification(designation.ReferenceNumber);\n        var payloadMap = new Dictionary<string, object>\n        {\n            { \"ReferenceNumber\", designation.ReferenceNumber }\n        };\n        var designationCountObj = await CallDb<Dictionary<string, int>>(\"CountAsync\", payloadMap);\n        int designationCount = designationCountObj != null && designationCountObj.TryGetValue(\"count\", out int count) ? count: 0;\n        if (designationCount == 0)\n        {\n            await CallDb<Designation>(\"AddAsync\", designation);\n        }\n        else\n        {   \n            var existingDesignationResult = await CallDb<Dictionary<string, Designation>>(\"FirstOrDefaultAsync\", payloadMap);\n            var existingDesignation = existingDesignationResult?[\"designation\"];\n            existingDesignation.Name = designation.Name;\n            await CallDb<Designation>(\"UpdateAsync\", existingDesignation);\n        }\n    }\n\n    private void ValidateDesignation(Designation designation)\n    {\n        if (string.IsNullOrEmpty(designation.Name))\n        {\n            throw new ArgumentException(\"The value cannot be null\", nameof(designation.Name));\n        }\n\n        if (string.IsNullOrEmpty(designation.ReferenceNumber))\n        {\n            throw new ArgumentException(\"The value cannot be null\", nameof(designation.ReferenceNumber));\n        }\n    }\n\n    public async Task AddOrUpdateAsync(Designation designation)\n    {\n        // Should not process for invalid inputs\n        ValidateDesignation(designation);\n\n        await ProcessDesignationAsync(designation).ConfigureAwait(false);\n    }\n    \n    // -- repo function --\n    public async Task<long?> GetEmployeeIdByUsername(string UserName)\n    {\n        if (UserName == null)\n        {\n            return null;\n        }\n\n        var payloadMap = new Dictionary<string, object>\n        {\n            { \"UserName\", UserName }\n        };\n        \n        var employee = await CallDb<Employee>(\"FirstOrDefaultAsync\", payloadMap);\n        return employee?.EmployeeId;\n    }\n    \n    // ---- Main function -----\n    public async Task<IDictionary<string, object>> mainFunction(String requestBody, string authorizationHeader)\n    {   \n\n        try {\n            \n            var metric = JsonSerializer.Deserialize<Dictionary<string, object>>(requestBody);\n            int ActivityId = metric.ContainsKey(\"ActivityId\") ? ((JsonElement)metric[\"ActivityId\"]).GetInt32() : -1;\n            if (ActivityId <= 0)\n            {\n                return new Dictionary<string, object>\n                        { { \"statusCode\", 400 }, { \"message\", \"Invalid activity\" } };\n            }\n            \n            Dictionary<string, object> Data = null;\n            if (metric.ContainsKey(\"Data\") && metric[\"Data\"] != null)\n            {\n                Data = JsonSerializer.Deserialize<Dictionary<string, object>>(metric[\"Data\"].ToString());\n            }\n             \n            string UserName = (Data!=null && Data.ContainsKey(\"UserName\")) ? Data[\"UserName\"]?.ToString(): null;\n            if (string.IsNullOrEmpty(UserName))\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 400 },\n                    { \"message\", \"Invalid inputs\" }\n                };\n            }\n            \n            var authService = new AuthService();\n            string authorizationHeade = \"Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcHBpZCI6ImFiYzEyMzQiLCJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.imob9sUa8Gz4-qZrGE4IpBF4-7SeNNgergoNET_zcEw\";\n            var applicationId = authService.GetAppidFromToken(authorizationHeade);\n            // var applicationId = principal.Claims.FirstOrDefault(e => e.Type == \"appid\")?.Value;\n            // var isAuthorize = await _clientService.IsAuthorize(applicationId, metric.ActivityId);\n\n            // if (!isAuthorize)\n            // {\n            //     new Dictionary<string, object>\n            //     { { \"statusCode\", 403 }, { \"message\", $\"You are not authorized to send activities to activity id: {req.ActivityId}\" } };\n            // }\n\n            // metric.Data.RepsActivityId = activityId;\n            // var employeeId = await GetEmployeeIdByUsername(UserName);\n\n            // if (employeeId == null)\n            // {\n            //     throw new EmployeeNotFoundException(UserName);\n            // }\n\n            // metric.Data.EmployeeId = (long)employeeId;\n            // await _employeeActivityService.CalculateRepsAsync(activityId, metric.Data).ConfigureAwait(false);\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 200 },\n                { \"message\", applicationId}\n            };\n\n        }\n        catch (JsonException ex)\n        {\n            // log.LogError(ex, $\"Error: {ex.Message}\");\n            return new Dictionary<string, object>\n            { { \"statusCode\", 400 }, { \"message\", \"Invalid inputs\" } };\n        }\n        catch (RepsActivityNotFoundException e)\n        {\n            // log.LogError(e, $\"Error: {e.Message}\");\n            return new Dictionary<string, object>\n            { { \"statusCode\", 400 }, { \"message\", $\"Invalid activity. {e.Message}\" } };\n        }\n        catch (ArgumentNullException e)\n        {\n            // log.LogError(e, $\"Error: {e.Message}\");\n            return new Dictionary<string, object>\n            { { \"statusCode\", 400 }, { \"message\", $\"Invalid user detail - {e.ParamName}\" }};\n        }\n        catch (EmployeeNotFoundException e)\n        {\n            // log.LogError(e, $\"Error: {e.Message}\");\n            return new Dictionary<string, object>\n            { { \"statusCode\", 400 }, { \"message\", e.Message }};\n        }\n        catch (InvalidOperationException ex)\n        {\n            // log.LogError(ex, $\"Error: {ex.Message}\");\n            return new Dictionary<string, object>\n            { { \"statusCode\", 400 }, { \"message\", \"Invalid operation\" } };\n        }\n        catch (IOException ex)\n        {\n            // log.LogError(ex, $\"Error: {ex.Message}\");\n            return new Dictionary<string, object>\n            { { \"statusCode\", 500 }, { \"message\", \"Internal Server Error\" } };\n        }\n        \n    }\n}\n\nstring requestBodyString = JsonSerializer.Serialize(requestBody);\nvar processor = new EmployeeActivitiesProcessor();\nvar resultObject = await processor.mainFunction(requestBodyString, authorizationHeader);\nresultObject",
				"isAsync":false,
				"parameters":{
					"requestBody":"{{ n_IyOaB.outputs.body }}",
					"authorizationHeader":"{{ n_IyOaB.outputs.headers.authorization }}"
				}
			},
			"skip":false,
			"subTitle":"Execute script",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":1042,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VHgde-1",
			"id":"n_6PhrQ",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"statusCode":{
							"type":"integer",
							"title":"Status Code"
						},
						"message":{
							"type":"string",
							"title":"Message"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"result":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Result"
						}
					}
				},
				"code":"return result",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"result":"{{ n_xnr0g.outputs.result }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"branch",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VHgde-1",
			"id":"n_h7Yud",
			"index":7,
			"inputs":{
				"branches":[
					{
						"id":"1",
						"inputs":{
							"name":"Branch 1",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_6PhrQ.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"200"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"2",
						"inputs":{
							"name":"Branch 2",
							"conditions":{
								"filters":[
									{
										"property":"{{ n_6PhrQ.outputs.result.statusCode }}",
										"filter":{
											"operator":"EQUAL",
											"value":"400"
										}
									}
								],
								"operator":"AND"
							}
						}
					},
					{
						"id":"default"
					}
				]
			},
			"skip":false,
			"subTitle":"Branch",
			"title":"",
			"type":"BRANCH"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_h7Yud@_VHgde-1@1",
			"id":"n_h7Yud@1",
			"index":8,
			"inputs":{
				"name":"Branch 1",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_6PhrQ.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"200"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1132,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_h7Yud@_VHgde-1@1",
			"id":"n_Haqom",
			"index":9,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"body":"{{ n_6PhrQ.outputs.result }}",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"branch_condition",
				"resourceVersion":0,
				"resourceName":"branch_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_h7Yud@_VHgde-1@2",
			"id":"n_h7Yud@2",
			"index":10,
			"inputs":{
				"name":"Branch 2",
				"conditions":{
					"filters":[
						{
							"property":"{{ n_6PhrQ.outputs.result.statusCode }}",
							"filter":{
								"operator":"EQUAL",
								"value":"400"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"title":"",
			"type":"BRANCH_CONDITION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1132,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_h7Yud@_VHgde-1@2",
			"id":"n_YGFhv",
			"index":11,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"400_undefined",
				"body":"{{ n_6PhrQ.outputs.result }}",
				"status":400
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1130,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_VHgde-1",
			"id":"n_rujD8",
			"index":12,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"500_undefined",
				"body":"{{ n_6PhrQ.outputs.result }}",
				"status":500
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":44105,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":39
}