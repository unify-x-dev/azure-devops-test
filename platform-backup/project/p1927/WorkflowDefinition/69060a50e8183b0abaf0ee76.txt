{
	"appsUsed":[
		
	],
	"createdTime":1762003536127,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1762007513746,
		"deployedBy":45518,
		"deployedDefinitionId":"690619d9e9c33e6d5c144c9d",
		"status":"DEPLOYED",
		"version":4,
		"workflowVersion":7
	},
	"edges":[
		{
			"fromNodeId":"n_ySIoa",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Nc4se",
			"type":"next"
		},
		{
			"fromNodeId":"n_Nc4se",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8ulwF",
			"type":"next"
		},
		{
			"fromNodeId":"n_8ulwF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_EZMwD",
			"type":"next"
		},
		{
			"fromNodeId":"n_EZMwD",
			"priority":0,
			"skip":false,
			"toNodeId":"n_2G9Iq",
			"type":"next"
		},
		{
			"fromNodeId":"n_2G9Iq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_GVBx1",
			"type":"next"
		}
	],
	"id":"69060a50e8183b0abaf0ee76",
	"lastModifiedBy":45518,
	"lcName":"[virtu-emrepsschedulerfn] syncemployeeactivitiesbulkhttptrigger",
	"modifiedTime":1762009068690,
	"name":"[virtu-emRepsSchedulerFN] SyncEmployeeActivitiesBulkHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1163,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_ySIoa",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"string",
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"ok",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"object",
									"properties":{},
									"additionalProperties":false,
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[
								"result"
							]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_Nc4se",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"result":{
							"type":"string",
							"title":"result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"authorization"
					],
					"properties":{
						"authorization":{
							"type":"string",
							"title":"Authorization"
						}
					}
				},
				"code":"authorization.replaceFirst('^Bearer\\\\s+', '');",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"authorization":"{{ n_ySIoa.outputs.headers.authorization }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":528,
				"resourceName":"utility_by_unifyapps_decode_jwt_token",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_8ulwF",
			"index":3,
			"inputs":{
				"token":"{{ n_Nc4se.outputs.result }}"
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Decode JWT Token",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_EZMwD",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"result":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"result"
								}
							},
							"title":"result",
							"additionalProperties":false
						}
					}
				},
				"code":"def appId = null\nif (payload instanceof Map) {\n    appId = payload.appid ?: payload.aud ?: null\n} else if (payload instanceof String) {\n    def appidMatch = payload =~ /\"appid\"\\s*:\\s*\"([^\"]+)\"/\n    if (appidMatch) {\n        appId = appidMatch[0][1]\n    } else {\n        def audMatch = payload =~ /\"aud\"\\s*:\\s*\"([^\"]+)\"/\n        appId = audMatch ? audMatch[0][1] : null\n    }\n}\nreturn [\"result\": appId]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"payload":"{{ n_8ulwF.outputs.payload }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":219,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_2G9Iq",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"result":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"requestBody",
						"appid"
					],
					"properties":{
						"requestBody":{
							"type":"string",
							"title":"Request Body"
						},
						"appid":{
							"type":"string",
							"title":"Appid"
						}
					}
				},
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\n// ENTITIES\npublic class BaseEntity<T>\n{\n    public T Id { get; set; }\n}\npublic class IndividualMetric : BaseEntity<long>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public int RepsActivityId { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public decimal Score { get; set; }\n    public string ReferenceNumber { get; set; }\n}\npublic class RepsActivity : BaseEntity<int>\n{\n    public string Name { get; set; }\n}\npublic class Employee : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n}\n// MODELS\npublic class MetricRequest<T>\n{\n    public int ActivityId { get; set; }\n    public T Data { get; set; }\n}\npublic class OkObjectBulkResult\n{\n    public int code { get; set; }\n    public string message { get; set; }\n    public List<IndividualMetric> failed { get; set; }\n    public OkObjectBulkResult(string message, int code, List<IndividualMetric> failed)\n    {\n        this.message = message;\n        this.code = code;\n        this.failed = failed;\n    }\n}\n// EXCEPTIONS\npublic class RepsActivityNotFoundException : Exception\n{\n    public RepsActivityNotFoundException(string message) : base(message) { }\n    public RepsActivityNotFoundException(int activityId) : base($\"No valid activity found for activity id: {activityId}\") { }\n}\npublic class EmployeeNotFoundException : Exception\n{\n    public EmployeeNotFoundException(string message) : base(message) { }\n}\n// HTTP CALLS - REAL API CALLS TO YOUR UNIFYAPPS ENDPOINT\npublic static class ApiHelper\n{\n    // REAL API CALLS - Uses System.Net.Http.HttpClient for actual HTTP requests\n    public static async Task<string> CallApiEndpointAsync(string endpointUrl, string authorization, object payload)\n    {\n        try\n        {\n            string jsonPayload = JsonSerializer.Serialize(payload);\n            using (var client = new System.Net.Http.HttpClient())\n            {\n                var httpContent = new System.Net.Http.StringContent(jsonPayload, Encoding.UTF8, \"application/json\");\n                var request = new System.Net.Http.HttpRequestMessage(System.Net.Http.HttpMethod.Post, endpointUrl)\n                {\n                    Content = httpContent\n                };\n                if (!string.IsNullOrEmpty(authorization))\n                {\n                    request.Headers.Add(\"Authorization\", authorization);\n                }\n                System.Net.Http.HttpResponseMessage response = await client.SendAsync(request);\n                string responseContent = await response.Content.ReadAsStringAsync();\n                if (!response.IsSuccessStatusCode)\n                {\n                    throw new Exception($\"HTTP {(int)response.StatusCode} {response.StatusCode}: {responseContent}\");\n                }\n                return responseContent;\n            }\n        }\n        catch (Exception ex)\n        {\n            throw new Exception($\"API call failed to {endpointUrl}: {ex.GetType().Name} - {ex.Message}\", ex);\n        }\n    }\n}\n// SERVICES - UNIFYAPPS STATIC IMPLEMENTATIONS\npublic static class GenerationStrategyContext\n{\n    // YOUR UNIFYAPPS ENDPOINT - CONFIGURE THIS URL TO MATCH YOUR WORKFLOW\n    private const string BadgeSchedulerApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/SyncEmployeeActivitiesBulkHttpTrigger\";\n    public static async Task GenerateAsync(int activityId, IndividualMetric metric)\n    {\n        // 1. VALIDATE ACTIVITY EXISTS - CALL YOUR API\n        var activityPayload = new { operationName = \"ValidateActivityAsync\", payload = new { ActivityId = activityId } };\n        string activityResponse = await ApiHelper.CallApiEndpointAsync(BadgeSchedulerApiUrl, null, activityPayload);\n        var activityData = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(activityResponse);\n        if (!activityData.ContainsKey(\"response\") || activityData[\"response\"].ValueKind == JsonValueKind.Null)\n        {\n            throw new RepsActivityNotFoundException(activityId);\n        }\n        // 2. VALIDATE EMPLOYEE EXISTS - CALL YOUR API\n        var employeePayload = new { operationName = \"ValidateEmployeeAsync\", payload = new { UserName = metric.UserName } };\n        string employeeResponse = await ApiHelper.CallApiEndpointAsync(BadgeSchedulerApiUrl, null, employeePayload);\n        var employeeData = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(employeeResponse);\n        if (!employeeData.ContainsKey(\"response\") || employeeData[\"response\"].ValueKind == JsonValueKind.Null)\n        {\n            throw new EmployeeNotFoundException($\"Employee not found: {metric.UserName}\");\n        }\n        // 3. STORE RAW METRIC DATA - CALL YOUR API\n        // Note: Workflow expects ActivityId (not RepsActivityId) and no EmployeeId field\n        var metricPayload = new { \n            operationName = \"AddIndividualMetricAsync\", \n            payload = new {\n                UserName = metric.UserName,\n                ActivityId = activityId,\n                Score = metric.Score,\n                EffectiveDate = metric.EffectiveDate.ToString(\"yyyy-MM-ddTHH:mm:ss.fff\"),\n                ReferenceNumber = metric.ReferenceNumber ?? metric.Id.ToString()\n            }\n        };\n        await ApiHelper.CallApiEndpointAsync(BadgeSchedulerApiUrl, null, metricPayload);\n        // 4. GET BADGE ACTIVITIES FOR THIS ACTIVITY - CALL YOUR API\n        var badgeActivitiesPayload = new { operationName = \"GetBadgeActivitiesAsync\", payload = new { ActivityId = activityId } };\n        string badgeActivitiesResponse = await ApiHelper.CallApiEndpointAsync(BadgeSchedulerApiUrl, null, badgeActivitiesPayload);\n        var badgeActivitiesData = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(badgeActivitiesResponse);\n        // Workflow returns objects array in response field\n        List<Dictionary<string, JsonElement>> badgeActivities = new List<Dictionary<string, JsonElement>>();\n        if (badgeActivitiesData.ContainsKey(\"response\") && badgeActivitiesData[\"response\"].ValueKind == JsonValueKind.Array)\n        {\n            badgeActivities = badgeActivitiesData[\"response\"].Deserialize<List<Dictionary<string, JsonElement>>>();\n        }\n        // 5. PROCESS EACH BADGE ACTIVITY - CALL YOUR API FOR EACH\n        foreach (var badgeActivity in badgeActivities)\n        {\n            int badgeId = 0;\n            // Extract BadgeId from response - workflow may return it as properties_BadgeId or in properties object\n            if (badgeActivity.ContainsKey(\"properties_BadgeId\") && badgeActivity[\"properties_BadgeId\"].ValueKind == JsonValueKind.Number)\n            {\n                badgeId = badgeActivity[\"properties_BadgeId\"].GetInt32();\n            }\n            else if (badgeActivity.ContainsKey(\"BadgeId\") && badgeActivity[\"BadgeId\"].ValueKind == JsonValueKind.Number)\n            {\n                badgeId = badgeActivity[\"BadgeId\"].GetInt32();\n            }\n            else if (badgeActivity.ContainsKey(\"properties\") && badgeActivity[\"properties\"].ValueKind == JsonValueKind.Object)\n            {\n                var properties = badgeActivity[\"properties\"];\n                if (properties.TryGetProperty(\"BadgeId\", out var badgeIdElement) && badgeIdElement.ValueKind == JsonValueKind.Number)\n                {\n                    badgeId = badgeIdElement.GetInt32();\n                }\n            }\n            if (badgeId > 0)\n            {\n                var badgePayload = new { \n                    operationName = \"GenerateBadgeAsync\",\n                    payload = new {\n                        UserName = metric.UserName,\n                        BadgeId = badgeId,\n                        Date = DateTime.UtcNow.ToString(\"yyyy-MM-ddTHH:mm:ss.fff\"),\n                        ExpireDate = DateTime.UtcNow.AddDays(365).ToString(\"yyyy-MM-ddTHH:mm:ss.fff\")\n                    }\n                };\n                await ApiHelper.CallApiEndpointAsync(BadgeSchedulerApiUrl, null, badgePayload);\n            }\n        }\n    }\n}\npublic static class ActivityService\n{\n    public static async Task GenerateAsync(int activityId, IndividualMetric metric)\n    {\n        await GenerationStrategyContext.GenerateAsync(activityId, metric);\n    }\n    public static async Task GenerateBulkAsync(int activityId, IEnumerable<IndividualMetric> metrics)\n    {\n        foreach (IndividualMetric metric in metrics)\n        {\n            await GenerationStrategyContext.GenerateAsync(activityId, metric);\n        }\n    }\n}\npublic static class EmployeeService\n{\n    // Employee validation is now handled by ValidateEmployeeAsync in the workflow\n    // This method is kept for backwards compatibility but will be handled by the workflow\n    public static async Task<long?> GetEmployeeIdByUsername(string userName)\n    {\n        // This is now handled by ValidateEmployeeAsync in GenerationStrategyContext\n        // Return a dummy value or null - the workflow will validate the employee\n        await Task.CompletedTask;\n        return null;\n    }\n}\npublic static class ClientService\n{\n    private static Dictionary<string, List<int>> authorizedApps = new Dictionary<string, List<int>>\n    {\n        { \"dec4789f-9b46-42b8-9c6d-9cda0b0a4a7e\", new List<int> { 1, 2, 3, 4, 5 } }\n    };\n    public static async Task<bool> IsAuthorize(string appid, int activityId)\n    {\n        await Task.CompletedTask;\n        if (string.IsNullOrEmpty(appid))\n        {\n            return false;\n        }\n        if (authorizedApps.ContainsKey(appid))\n        {\n            return authorizedApps[appid].Contains(activityId) || authorizedApps[appid].Contains(0);\n        }\n        return false;\n    }\n}\n// MAIN FUNCTION - YOUR EXISTING CODE\npublic static async Task<Dictionary<string, object>> SyncEmployeeActivitiesBulkHttpTrigger_Run(\n    string requestBody,\n    string appid)\n{\n    try\n    {\n        if (string.IsNullOrEmpty(appid))\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 401 },\n                { \"body\", \"Invalid or missing authorization token\" }\n            };\n        }\n        MetricRequest<IEnumerable<IndividualMetric>> metrics = JsonSerializer.Deserialize<MetricRequest<IEnumerable<IndividualMetric>>>(requestBody);\n        if (metrics == null)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid request body format\" }\n            };\n        }\n        var activityId = metrics.ActivityId;\n        if (metrics.ActivityId <= 0)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid activity\" }\n            };\n        }\n        if (metrics.Data == null || !metrics.Data.Any())\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid inputs - Data array is empty or null\" }\n            };\n        }\n        var isAuthorize = await ClientService.IsAuthorize(appid, metrics.ActivityId);\n        if (!isAuthorize)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 403 },\n                { \"body\", $\"You are not authorized to send activities to activity id: {metrics.ActivityId}\" }\n            };\n        }\n        var failedRecords = new List<IndividualMetric>();\n        foreach (var metric in metrics.Data)\n        {\n            try\n            {\n                if (metric == null)\n                {\n                    failedRecords.Add(new IndividualMetric { UserName = \"NULL_METRIC\" });\n                    continue;\n                }\n                if (string.IsNullOrEmpty(metric.UserName))\n                {\n                    failedRecords.Add(metric);\n                    continue;\n                }\n                metric.RepsActivityId = activityId;\n                // Employee validation and badge generation will be handled by GenerationStrategyContext\n                // No need to call EmployeeService separately as ValidateEmployeeAsync handles it\n                await ActivityService.GenerateAsync(activityId, metric);\n            }\n            catch (RepsActivityNotFoundException ex)\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 400 },\n                    { \"body\", $\"Invalid activity. {ex.Message}\" }\n                };\n            }\n            catch (EmployeeNotFoundException)\n            {\n                metric.RepsActivity = null;\n                failedRecords.Add(metric);\n            }\n            catch (ArgumentException)\n            {\n                metric.RepsActivity = null;\n                failedRecords.Add(metric);\n            }\n            catch (InvalidOperationException)\n            {\n                metric.RepsActivity = null;\n                failedRecords.Add(metric);\n            }\n            catch (IOException)\n            {\n                metric.RepsActivity = null;\n                failedRecords.Add(metric);\n            }\n            catch (Exception ex)\n            {\n                metric.RepsActivity = null;\n                failedRecords.Add(metric);\n                if (ex is OutOfMemoryException)\n                {\n                    throw;\n                }\n                // Log the error for debugging (in production, use proper logging)\n                // The error details will be lost but the record will be marked as failed\n            }\n        }\n        if (metrics.Data.Count() == failedRecords.Count)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 500 },\n                { \"body\", $\"Internal Server Error - All {failedRecords.Count} records failed to process\" }\n            };\n        }\n        string responseMessage = $\"Successfully completed\";\n        int statusCode = 0;\n        if (failedRecords.Any())\n        {\n            statusCode = -1;\n        }\n        var resultObject = new OkObjectBulkResult(responseMessage, statusCode, failedRecords);\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 200 },\n            { \"body\", resultObject }\n        };\n    }\n    catch (JsonException ex)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"Invalid JSON format: {ex.Message}\" }\n        };\n    }\n    catch (ArgumentNullException ex)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"Missing input - {ex.ParamName}\" }\n        };\n    }\n    catch (InvalidOperationException)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Invalid operation\" }\n        };\n    }\n    catch (IOException ex)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", $\"IO Error: {ex.Message}\" }\n        };\n    }\n    catch (Exception ex)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", $\"Internal Server Error: {ex.GetType().Name} - {ex.Message}\" }\n        };\n    }\n}\nvar result = await SyncEmployeeActivitiesBulkHttpTrigger_Run(requestBody, appid);\nresult\n",
				"isAsync":false,
				"parameters":{
					"requestBody":"{{ n_ySIoa.outputs.body.requestBody }}",
					"appid":"{{ n_EZMwD.outputs.result.result }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1120,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_GVBx1",
			"index":6,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_ok",
				"set_cookies":[],
				"body":{
					"result":"{{ n_2G9Iq.outputs.result }}"
				},
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45518,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":8
}