{
	"appsUsed":[
		
	],
	"createdTime":1761643871643,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_sDmWM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_gTJHF",
			"type":"next"
		},
		{
			"fromNodeId":"n_gTJHF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_eXAV3",
			"type":"next"
		}
	],
	"id":"69008d5f151fb15bb249ca45",
	"lastModifiedBy":45010,
	"lcName":"synclocationhttptrigger",
	"modifiedTime":1761644211363,
	"name":"SyncLocationHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_H88yu-1",
			"id":"n_sDmWM",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[
							"requestBody"
						]
					}
				},
				"endpointType":"REST",
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_H88yu-1",
			"id":"n_gTJHF",
			"index":2,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"requestBody"
					],
					"properties":{
						"requestBody":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Request Body"
						}
					}
				},
				"code":"using System;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class Location\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic async Task<Dictionary<string, object>> AddOrUpdateAsync(Location location)\n{\n    ValidateLocation(location);\n\n    // var locationSpecification = new LocationByReferenceNumberSpecification(location.ReferenceNumber);\n    // int locationCount = await _locationRepository.CountAsync(locationSpecification).ConfigureAwait(false);        \n\n    // if (locationCount == 0)\n    // {\n    //     await _locationRepository.AddAsync(location);\n    // }\n    // else\n    // {\n    //     var existingLocation = await _locationRepository.FirstOrDefaultAsync(locationSpecification).ConfigureAwait(false);\n    //     existingLocation.Name = location.Name;\n    //     await _locationRepository.UpdateAsync(existingLocation).ConfigureAwait(false);\n    // }\n\n    int locationCount = await _locationRepository.CountAsync(locationSpecification).ConfigureAwait(false);  // pass location.ReferenceNumber\n    \n    if (locationCount == 0)\n    {\n        await _locationRepository.AddAsync(location); // \"api-call-to-add, pass location\"\n    }\n    else\n    {\n        Location existingLocation = null; // \"api-call-to-find\" - pass location.ReferenceNumber\n        \n        if (existingLocation != null)\n        {\n            existingLocation.Name = location.Name;\n            await _locationRepository.UpdateAsync(existingLocation).ConfigureAwait(false); // api-call-to-update, pass existingLocation\n        }\n    }\n    \n    return new Dictionary<string, object>\n    {\n        { \"statusCode\", 200 },\n        { \"body\", $\"Successfully processed for {location.Name}\" }\n    };\n}\n\npublic void ValidateLocation(Location location)\n{\n    if (string.IsNullOrEmpty(location.ReferenceNumber))\n    {\n        throw new ArgumentException(\"The value cannot be null\", nameof(location.ReferenceNumber));\n    }\n\n    if (string.IsNullOrEmpty(location.Name))\n    {\n        throw new ArgumentException(\"The value cannot be null\", nameof(location.Name));\n    }\n}\n\nasync Task<IDictionary<string, object>> mainFunction(string requestBody) {\n    try\n    {\n        var location = JsonSerializer.Deserialize<Location>(requestBody);\n\n        if (location == null)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Please pass valid location to sync\" }\n            };\n        }\n        if (string.IsNullOrEmpty(location.ReferenceNumber))\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid reference number\" }\n            };\n        }\n        \n        return await AddOrUpdateAsync(location);\n    }\n    catch (ArgumentException e)\n    {\n        Console.WriteLine($\"Error: {e.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"Invalid location detail - {e.ParamName}\" }\n        };\n    }\n    catch (JsonException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Please enter valid details\" }\n        };\n    }\n    catch (InvalidOperationException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Invalid operation during request processing\" }\n        };\n    }\n    catch (IOException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", \"Internal server error\" }\n        };\n    }\n}\n\nvar resultObject = await mainFunction(requestBody);\n\nresultObject",
				"isAsync":false,
				"parameters":{
					"requestBody":"{{ n_sDmWM.outputs.body.requestBody }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_H88yu-1",
			"id":"n_eXAV3",
			"index":3,
			"inputs":{
				"streamingCompleted":true
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45010,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":2
}