{
	"appsUsed":[
		
	],
	"createdTime":1761643871643,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761892894150,
		"deployedBy":45010,
		"deployedDefinitionId":"69045a1ea40ee515d1d5f26e",
		"status":"DEPLOYED",
		"version":15,
		"workflowVersion":34
	},
	"edges":[
		{
			"fromNodeId":"n_sDmWM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_gTJHF",
			"type":"next"
		},
		{
			"fromNodeId":"n_gTJHF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_eXAV3",
			"type":"next"
		}
	],
	"id":"69008d5f151fb15bb249ca45",
	"lastModifiedBy":45010,
	"lcName":"synclocationhttptrigger",
	"modifiedTime":1761893500670,
	"name":"SyncLocationHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_H88yu-1",
			"id":"n_sDmWM",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[
							"requestBody"
						]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_H88yu-1",
			"id":"n_gTJHF",
			"index":2,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"requestBody"
					],
					"properties":{
						"requestBody":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Request Body"
						}
					}
				},
				"code":"using System;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text;\nusing System.IO;\n\npublic class Location\n{\n    public int Id { get; set; }\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class LocationService\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/LocationRepoUrl\";\n\n    public static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    };\n\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            // Console.WriteLine($\"DEBUG: Sending {operationName} with payload: {jsonRequestBody}\"); // Optional debug log\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n            // Console.WriteLine($\"DEBUG: Received status {response.StatusCode}, content: {responseContent}\"); // Optional debug log\n\n            // Check for non-success status codes specifically\n            if (!response.IsSuccessStatusCode)\n            {\n                 Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n                 // Consider how to handle specific non-success codes (e.g., 404 Not Found might return default)\n                 // For now, throw an exception for any non-success to indicate failure clearly.\n                 response.EnsureSuccessStatusCode(); // This will throw HttpRequestException\n            }\n\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") // Treat empty JSON object as null/default\n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement) || root.TryGetProperty(\"response\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         // Check if the target type is primitive (like int, bool, long) and the JSON element reflects that\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             // Attempt direct deserialization for primitives/string from the element\n                             try {\n                                return resultElement.Deserialize<TResponse>(jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                                return default;\n                             }\n                         }\n                         else // Assume complex object\n                         {\n                            return resultElement.Deserialize<TResponse>(jsonOptions);\n                         }\n                     }\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                        // Check for primitives at the root as well\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             try {\n                                return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                                return default;\n                             }\n                         }\n                         else\n                         {\n                            return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                         }\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n                return default; // Return default on deserialization failure\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n            throw;\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n            throw;\n        }\n    }\n\n    // private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload, string apiUrl)\n    // {\n    //     var requestBody = new { payload, operationName };\n    //     string jsonRequestBody = \"{}\";\n    //     try\n    //     {\n    //         jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n    //     }\n    //     catch (JsonException e)\n    //     {\n    //          _log?.LogError(e, \"JSON Serialization Error (Request - {OperationName})\", operationName);\n    //          throw; \n    //     }\n\n    //     var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n    //     try\n    //     {\n    //         HttpResponseMessage response = await httpClient.PostAsync(apiUrl, httpContent);\n    //         string responseContent = await response.Content.ReadAsStringAsync();\n\n    //         if (!response.IsSuccessStatusCode)\n    //         {\n    //              _log?.LogWarning(\"HTTP Request Error ({OperationName}) to {ApiUrl}: {StatusCode} | Response: {ResponseContent}\", operationName, apiUrl, response.StatusCode, responseContent);\n    //              response.EnsureSuccessStatusCode(); // Will throw HttpRequestException\n    //         }\n\n    //         if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\")\n    //         {\n    //             return default;\n    //         }\n\n    //         try\n    //         {\n    //              using (JsonDocument document = JsonDocument.Parse(responseContent))\n    //              {\n    //                 JsonElement root = document.RootElement;\n    //                  // Check for a nested result, common in API responses\n    //                  if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement) || root.TryGetProperty(\"response\", out resultElement)))\n    //                  {\n    //                      if (resultElement.ValueKind == JsonValueKind.Null) return default;\n    //                      return resultElement.Deserialize<TResponse>(jsonOptions);\n    //                  }\n    //                  // Otherwise, try to deserialize the entire response\n    //                  else if (root.ValueKind != JsonValueKind.Null)\n    //                  {\n    //                     return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n    //                  }\n    //                  else\n    //                  {\n    //                     return default;\n    //                  }\n    //              }\n    //         }\n    //         catch (JsonException jsonEx)\n    //         {\n    //             _log?.LogError(jsonEx, \"JSON Deserialization Error ({OperationName}) | Response: {ResponseContent}\", operationName, responseContent);\n    //             return default;\n    //         }\n    //     }\n    //     catch (HttpRequestException e)\n    //     {\n    //         _log?.LogError(e, \"HTTP Request Error ({OperationName}) to {ApiUrl}\", operationName, apiUrl);\n    //         throw;\n    //     }\n    //     catch (Exception e)\n    //     {\n    //          _log?.LogError(e, \"An unexpected error occurred in CallDb ({OperationName}) to {ApiUrl}\", operationName, apiUrl);\n    //          throw;\n    //     }\n    // }\n\n    public async Task AddOrUpdateAsync(Location location)\n    {\n        ValidateLocation(location);\n        await ProcessLocationAsync(location);\n    }\n\n    private void ValidateLocation(Location location)\n    {\n        if (string.IsNullOrEmpty(location.ReferenceNumber))\n        {\n            throw new ArgumentException(\"The value cannot be null\", nameof(location.ReferenceNumber));\n        }\n\n        if (string.IsNullOrEmpty(location.Name))\n        {\n            throw new ArgumentException(\"The value cannot be null\", nameof(location.Name));\n        }\n    }\n\n    private async Task ProcessLocationAsync(Location location)\n    {\n        var payload = new Dictionary<string, object> { { \"ReferenceNumber\", location.ReferenceNumber } };\n        var locationCount = await CallDb<Dictionary<string, int>>(\"CountAsync\", payload);\n        int finalCount = locationCount != null && locationCount.TryGetValue(\"count\", out int count) ? count: 0;\n\n        if (finalCount == 0)\n        {\n            await CallDb<Location>(\"AddAsync\", locationCount);\n        }\n        else\n        {\n            var existingLocationResult = await CallDb<Dictionary<string, Location>>(\"FirstOrDefaultAsync\", payload);\n            var existingLocation = existingLocationResult?[\"location\"];\n            existingLocation.Name = existingLocation.Name;\n            existingLocation.ReferenceNumber = existingLocation.ReferenceNumber;\n            await CallDb<Location>(\"UpdateAsync\", existingLocation);\n        }\n    }\n}\n\nasync Task<IDictionary<string, object>> mainFunction(string requestBody)\n{\n    var service = new LocationService();\n\n    Location? location = null;\n    try {\n        location = JsonSerializer.Deserialize<Location>(requestBody, LocationService.jsonOptions);\n    } catch (JsonException ex) {\n        Console.WriteLine($\"Error deserializing request body: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Please enter valid details\" }\n        };\n    }\n\n    if (location == null)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Please pass valid location to sync\" }\n        };\n    }\n\n    if (string.IsNullOrEmpty(location.ReferenceNumber))\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Invalid reference number\" }\n        };\n    }\n\n    try\n    {\n        await service.AddOrUpdateAsync(location);\n\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 200 },\n            { \"body\", $\"Successfully processed for {location.Name}\" }\n        };\n    }\n    catch (ArgumentException e)\n    {\n        Console.WriteLine($\"Error: {e.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"Invalid location detail - {e.ParamName}\" }\n        };\n    }\n    catch (InvalidOperationException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Invalid operation during request processing\" }\n        };\n    }\n    catch (IOException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", \"Internal server error\" }\n        };\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", $\"Internal server error: {ex.Message}\" }\n        };\n    }\n}\n\nvar requestBody = @\"{\n  \"\"Name\"\": \"\"Chaitanya\"\",\n  \"\"ReferenceNumber\"\": \"\"KM\"\"\n}\";\n\nvar result = await mainFunction(requestBody);\nresult",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_H88yu-1",
			"id":"n_eXAV3",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45010,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":35
}