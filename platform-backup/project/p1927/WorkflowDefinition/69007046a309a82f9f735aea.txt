{
	"appsUsed":[
		
	],
	"createdTime":1761636422378,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_FSpW2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_0hlXF",
			"type":"next"
		},
		{
			"fromNodeId":"n_0hlXF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_XfJ5C",
			"type":"next"
		}
	],
	"id":"69007046a309a82f9f735aea",
	"lastModifiedBy":45010,
	"lcName":"syncemployeetierhttptrigger",
	"modifiedTime":1761639446019,
	"name":"SyncEmployeeTierHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_FSpW2",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[
							"requestBody"
						]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_0hlXF",
			"index":2,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"requestBody"
					],
					"properties":{
						"requestBody":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Request Body"
						}
					}
				},
				"code":"using System;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Data.SqlClient;\n\n// Entity Classes\npublic class EmployeeTier\n{\n    public int EmployeeTierId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string ReferenceNumber { get; set; }\n    public int EmployeeId { get; set; }\n    public int TierId { get; set; }\n}\n\npublic class Employee\n{\n    public int EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string UserName { get; set; }\n    public string Email { get; set; }\n    public string FullName { get; set; }\n    public bool IsActive { get; set; }\n}\n\npublic class Tier\n{\n    public int Id { get; set; }\n    public string ReferenceNumber { get; set; }\n    public string TierName { get; set; }\n    public int Weightage { get; set; }\n}\n\n// Custom Exceptions\npublic class EmployeeNotFoundException : Exception\n{\n    public EmployeeNotFoundException(string message) : base(message) { }\n}\n\npublic class TierNotFoundException : Exception\n{\n    public TierNotFoundException(string message) : base(message) { }\n}\n\n// Service Implementation\npublic class EmployeeTierService\n{\n    private readonly string _connectionString;\n    \n    public EmployeeTierService(string connectionString)\n    {\n        _connectionString = connectionString;\n    }\n    \n    public async Task AddOrUpdateAsync(EmployeeTier employeeTier)\n    {\n        ValidateParameters(employeeTier);\n        \n        using (var connection = new SqlConnection(_connectionString))\n        {\n            await connection.OpenAsync();\n            \n            // Check if employee exists\n            var employee = await GetEmployeeByNumberAsync(connection, employeeTier.EmployeeNumber);\n            if (employee == null)\n            {\n                throw new EmployeeNotFoundException($\"No employee found with EmployeeNumber= {employeeTier.EmployeeNumber}\");\n            }\n            \n            // Check if tier exists\n            var tier = await GetTierByReferenceNumberAsync(connection, employeeTier.ReferenceNumber);\n            if (tier == null)\n            {\n                throw new TierNotFoundException($\"No tier found with referencenumber= {employeeTier.ReferenceNumber}\");\n            }\n            \n            // Check if employee tier already exists\n            var currentEmployeeTier = await GetEmployeeTierByEmployeeIdAsync(connection, employee.EmployeeId);\n            \n            if (currentEmployeeTier == null)\n            {\n                // Insert new record\n                await InsertEmployeeTierAsync(connection, employee.EmployeeId, tier.Id);\n            }\n            else\n            {\n                // Update existing record\n                await UpdateEmployeeTierAsync(connection, currentEmployeeTier.EmployeeTierId, employee.EmployeeId, tier.Id);\n            }\n        }\n    }\n    \n    private void ValidateParameters(EmployeeTier employeeTier)\n    {\n        if (string.IsNullOrEmpty(employeeTier.EmployeeNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeTier.EmployeeNumber));\n        }\n        if (string.IsNullOrEmpty(employeeTier.ReferenceNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeTier.ReferenceNumber));\n        }\n    }\n    \n    private async Task<Employee> GetEmployeeByNumberAsync(SqlConnection connection, string employeeNumber)\n    {\n        var query = \"SELECT EmployeeId, EmployeeNumber, UserName, Email, FullName, IsActive FROM Employees WHERE EmployeeNumber = @EmployeeNumber\";\n        using (var command = new SqlCommand(query, connection))\n        {\n            command.Parameters.AddWithValue(\"@EmployeeNumber\", employeeNumber);\n            using (var reader = await command.ExecuteReaderAsync())\n            {\n                if (await reader.ReadAsync())\n                {\n                    return new Employee\n                    {\n                        EmployeeId = reader.GetInt32(0),\n                        EmployeeNumber = reader.GetString(1),\n                        UserName = reader.IsDBNull(2) ? null : reader.GetString(2),\n                        Email = reader.IsDBNull(3) ? null : reader.GetString(3),\n                        FullName = reader.IsDBNull(4) ? null : reader.GetString(4),\n                        IsActive = reader.GetBoolean(5)\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    \n    private async Task<Tier> GetTierByReferenceNumberAsync(SqlConnection connection, string referenceNumber)\n    {\n        var query = \"SELECT Id, ReferenceNumber, TierName, Weightage FROM Tiers WHERE ReferenceNumber = @ReferenceNumber\";\n        using (var command = new SqlCommand(query, connection))\n        {\n            command.Parameters.AddWithValue(\"@ReferenceNumber\", referenceNumber);\n            using (var reader = await command.ExecuteReaderAsync())\n            {\n                if (await reader.ReadAsync())\n                {\n                    return new Tier\n                    {\n                        Id = reader.GetInt32(0),\n                        ReferenceNumber = reader.GetString(1),\n                        TierName = reader.IsDBNull(2) ? null : reader.GetString(2),\n                        Weightage = reader.GetInt32(3)\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    \n    private async Task<EmployeeTier> GetEmployeeTierByEmployeeIdAsync(SqlConnection connection, int employeeId)\n    {\n        var query = \"SELECT EmployeeTierId, EmployeeId, TierId FROM EmployeeTiers WHERE EmployeeId = @EmployeeId\";\n        using (var command = new SqlCommand(query, connection))\n        {\n            command.Parameters.AddWithValue(\"@EmployeeId\", employeeId);\n            using (var reader = await command.ExecuteReaderAsync())\n            {\n                if (await reader.ReadAsync())\n                {\n                    return new EmployeeTier\n                    {\n                        EmployeeTierId = reader.GetInt32(0),\n                        EmployeeId = reader.GetInt32(1),\n                        TierId = reader.GetInt32(2)\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    \n    private async Task InsertEmployeeTierAsync(SqlConnection connection, int employeeId, int tierId)\n    {\n        var query = \"INSERT INTO EmployeeTiers (EmployeeId, TierId) VALUES (@EmployeeId, @TierId)\";\n        using (var command = new SqlCommand(query, connection))\n        {\n            command.Parameters.AddWithValue(\"@EmployeeId\", employeeId);\n            command.Parameters.AddWithValue(\"@TierId\", tierId);\n            await command.ExecuteNonQueryAsync();\n        }\n    }\n    \n    private async Task UpdateEmployeeTierAsync(SqlConnection connection, int employeeTierId, int employeeId, int tierId)\n    {\n        var query = \"UPDATE EmployeeTiers SET EmployeeId = @EmployeeId, TierId = @TierId WHERE EmployeeTierId = @EmployeeTierId\";\n        using (var command = new SqlCommand(query, connection))\n        {\n            command.Parameters.AddWithValue(\"@EmployeeTierId\", employeeTierId);\n            command.Parameters.AddWithValue(\"@EmployeeId\", employeeId);\n            command.Parameters.AddWithValue(\"@TierId\", tierId);\n            await command.ExecuteNonQueryAsync();\n        }\n    }\n}\n\n// Main Processor\npublic class SyncEmployeeTierProcessor\n{\n    private readonly EmployeeTierService _employeeTierService;\n    \n    public SyncEmployeeTierProcessor(string connectionString)\n    {\n        _employeeTierService = new EmployeeTierService(connectionString);\n    }\n    \n    public async Task<Dictionary<string, object>> ProcessAsync(string requestBody)\n    {\n        try\n        {\n            Console.WriteLine(\"SyncEmployeeTier function processed a request.\");\n            \n            var employeeTier = JsonConvert.DeserializeObject<EmployeeTier>(requestBody);\n            \n            if (employeeTier == null)\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 400 },\n                    { \"body\", \"Invalid input values\" }\n                };\n            }\n            \n            await _employeeTierService.AddOrUpdateAsync(employeeTier);\n            \n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 200 },\n                { \"body\", \"Successfully processed\" }\n            };\n        }\n        catch (EmployeeNotFoundException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", ex.Message }\n            };\n        }\n        catch (TierNotFoundException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", ex.Message }\n            };\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", ex.Message }\n            };\n        }\n        catch (JsonException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Please enter valid details\" }\n            };\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 500 },\n                { \"body\", \"Internal server error\" }\n            };\n        }\n    }\n}\n\n// Entry point for UnifyApps\npublic class Script\n{\n    public async Task<Dictionary<string, object>> ExecuteAsync(IDictionary<string, object> inputs)\n    {\n        var requestBody = inputs.ContainsKey(\"requestBody\") ? inputs[\"requestBody\"].ToString() : string.Empty;\n        var connectionString = inputs.ContainsKey(\"connectionString\") ? inputs[\"connectionString\"].ToString() : string.Empty;\n        \n        var processor = new SyncEmployeeTierProcessor(connectionString);\n        return await processor.ProcessAsync(re",
				"isAsync":false,
				"parameters":{
					"requestBody":"{{ n_FSpW2.outputs.body.requestBody }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_XfJ5C",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45010,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":6
}