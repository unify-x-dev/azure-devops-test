{
	"appsUsed":[
		
	],
	"createdTime":1761636422378,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_FSpW2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_0hlXF",
			"type":"next"
		},
		{
			"fromNodeId":"n_0hlXF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_XfJ5C",
			"type":"next"
		}
	],
	"id":"69007046a309a82f9f735aea",
	"lastModifiedBy":45010,
	"lcName":"syncemployeetierhttptrigger",
	"modifiedTime":1761637436661,
	"name":"SyncEmployeeTierHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_FSpW2",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_0hlXF",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.Linq;\n\n// Entity Classes\npublic class EmployeeTier\n{\n    public string EmployeeNumber { get; set; }\n    public string TierCode { get; set; }\n    public DateTime? EffectiveDate { get; set; }\n    public DateTime? ExpiryDate { get; set; }\n    public bool IsActive { get; set; }\n}\n\npublic class Employee\n{\n    public string UserName { get; set; }\n    public string Email { get; set; }\n    public string FullName { get; set; }\n    public string ManagerEmployeeNumber { get; set; }\n    public string EmployeeNumber { get; set; }\n    public bool IsActive { get; set; }\n    public string Status { get; set; }\n}\n\npublic class Tier\n{\n    public string TierCode { get; set; }\n    public string TierName { get; set; }\n    public int Weightage { get; set; }\n}\n\n// Custom Exceptions\npublic class EmployeeNotFoundException : Exception\n{\n    public EmployeeNotFoundException(string message) : base(message) { }\n}\n\npublic class TierNotFoundException : Exception\n{\n    public TierNotFoundException(string message) : base(message) { }\n}\n\n// Service Interface and Implementation\npublic interface IEmployeeTierService\n{\n    Task AddOrUpdateAsync(EmployeeTier employeeTier);\n}\n\npublic class EmployeeTierService : IEmployeeTierService\n{\n    // You'll need to inject your actual data access logic here\n    // This is a placeholder implementation\n    \n    public async Task AddOrUpdateAsync(EmployeeTier employeeTier)\n    {\n        // Validate employee exists\n        if (string.IsNullOrEmpty(employeeTier.EmployeeNumber))\n        {\n            throw new ArgumentException(\"Employee number is required\");\n        }\n        \n        // Validate tier exists\n        if (string.IsNullOrEmpty(employeeTier.TierCode))\n        {\n            throw new ArgumentException(\"Tier code is required\");\n        }\n        \n        // TODO: Add your actual database/API logic here\n        // Example validations:\n        // - Check if employee exists (throw EmployeeNotFoundException if not)\n        // - Check if tier exists (throw TierNotFoundException if not)\n        // - Insert or update the employee tier record\n        \n        await Task.CompletedTask; // Placeholder for async operation\n    }\n}\n\n// Main Execution Class\npublic class SyncEmployeeTierProcessor\n{\n    private readonly IEmployeeTierService _employeeTierService;\n    \n    public SyncEmployeeTierProcessor()\n    {\n        _employeeTierService = new EmployeeTierService();\n    }\n    \n    public async Task<object> ProcessAsync(string requestBody)\n    {\n        try\n        {\n            Console.WriteLine(\"SyncEmployeeTier function processed a request.\");\n            \n            var employeeTier = JsonConvert.DeserializeObject<EmployeeTier>(requestBody);\n            \n            if (employeeTier == null)\n            {\n                return new\n                {\n                    statusCode = 400,\n                    message = \"Invalid input values\"\n                };\n            }\n            \n            await _employeeTierService.AddOrUpdateAsync(employeeTier);\n            \n            return new\n            {\n                statusCode = 200,\n                message = \"Successfully processed\"\n            };\n        }\n        catch (EmployeeNotFoundException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new\n            {\n                statusCode = 400,\n                message = ex.Message\n            };\n        }\n        catch (TierNotFoundException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new\n            {\n                statusCode = 400,\n                message = ex.Message\n            };\n        }\n        catch (ArgumentException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new\n            {\n                statusCode = 400,\n                message = ex.Message\n            };\n        }\n        catch (JsonException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new\n            {\n                statusCode = 400,\n                message = \"Please enter valid details\"\n            };\n        }\n        catch (InvalidOperationException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new\n            {\n                statusCode = 400,\n                message = \"Invalid operation\"\n            };\n        }\n        catch (IOException ex)\n        {\n            Console.WriteLine($\"Error: {ex.Message}\");\n            return new\n            {\n                statusCode = 500,\n                message = \"Internal server error\"\n            };\n        }\n    }\n}\n\n// Entry point for UnifyApps\npublic class Script\n{\n    public async Task<object> ExecuteAsync(IDictionary<string, object> inputs)\n    {\n        var requestBody = inputs.ContainsKey(\"requestBody\") \n            ? inputs[\"requestBody\"].ToString() \n            : string.Empty;\n        \n        var processor = new SyncEmployeeTierProcessor();\n        return await processor.ProcessAsync(requestBody);\n    }\n}",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_XfJ5C",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45010,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":2
}