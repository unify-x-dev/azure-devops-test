{
	"appsUsed":[
		
	],
	"createdTime":1761636422378,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761816986005,
		"deployedBy":45010,
		"deployedDefinitionId":"6903319913085040561b28a0",
		"status":"DEPLOYED",
		"version":2,
		"workflowVersion":25
	},
	"edges":[
		{
			"fromNodeId":"n_FSpW2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_0hlXF",
			"type":"next"
		},
		{
			"fromNodeId":"n_0hlXF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_XfJ5C",
			"type":"next"
		}
	],
	"id":"69007046a309a82f9f735aea",
	"lastModifiedBy":45010,
	"lcName":"syncemployeetierhttptrigger",
	"modifiedTime":1761817136153,
	"name":"SyncEmployeeTierHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_FSpW2",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[
							"requestBody"
						]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_0hlXF",
			"index":2,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"requestBody"
					],
					"properties":{
						"requestBody":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Request Body"
						}
					}
				},
				"code":"using System;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text;\n\npublic class BaseEntity\n{\n    public long Id { get; set; }\n}\n\npublic class Employee : BaseEntity\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n}\n\npublic class Tier : BaseEntity\n{\n    public string ReferenceNumber { get; set; }\n}\n\npublic class EmployeeTier : BaseEntity\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public int TierId { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class EmployeeTierService\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string EmployeeApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/EmployeeRepoUrl\";\n    private const string TierApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/TierEndpoint\";\n    private const string EmployeeTierApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeTierEndpoint\";\n\n    public static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    };\n\n    private async Task<TResponse?> CallDb<TResponse>(string apiUrl, string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            HttpResponseMessage response = await httpClient.PostAsync(apiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n                response.EnsureSuccessStatusCode();\n            }\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") \n            {\n                return default;\n            }\n\n            using (JsonDocument document = JsonDocument.Parse(responseContent))\n            {\n                JsonElement root = document.RootElement;\n                if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement)))\n                {\n                    if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                    return resultElement.Deserialize<TResponse>(jsonOptions);\n                }\n                else if (root.ValueKind != JsonValueKind.Null)\n                {\n                    return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                }\n                return default;\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n            throw;\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n            throw;\n        }\n    }\n\n    public async Task AddOrUpdateAsync(EmployeeTier employeeTier)\n    {\n        ValidateParameters(employeeTier);\n\n        var employee = await GetEmployeeAsync(employeeTier.EmployeeNumber);\n        if (employee == null)\n        {\n            throw new Exception($\"No employee found with EmployeeNumber={employeeTier.EmployeeNumber}\");\n        }\n\n        var tier = await GetTierAsync(employeeTier.ReferenceNumber);\n        if (tier == null)\n        {\n            throw new Exception($\"No tier found with ReferenceNumber={employeeTier.ReferenceNumber}\");\n        }\n\n        var currentEmployeeTier = await GetEmployeeTierByEmployeeIdAsync(employee.EmployeeId);\n        \n        if (currentEmployeeTier == null)\n        {\n            employeeTier.TierId = (int)tier.Id;\n            employeeTier.EmployeeId = employee.EmployeeId;\n            await CallDb<EmployeeTier>(EmployeeTierApiUrl, \"AddAsync\", employeeTier);\n        }\n        else\n        {\n            currentEmployeeTier.TierId = (int)tier.Id;\n            currentEmployeeTier.EmployeeId = employee.EmployeeId;\n            await CallDb<object>(EmployeeTierApiUrl, \"UpdateAsync\", currentEmployeeTier);\n        }\n    }\n\n    private void ValidateParameters(EmployeeTier employeeTier)\n    {\n        if (string.IsNullOrEmpty(employeeTier.EmployeeNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeTier.EmployeeNumber));\n        }\n        if (string.IsNullOrEmpty(employeeTier.ReferenceNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeTier.ReferenceNumber));\n        }\n    }\n\n    private async Task<Employee?> GetEmployeeAsync(string employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber)) return null;\n        var payload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n        return await CallDb<Employee>(EmployeeApiUrl, \"FirstOrDefaultAsync\", payload);\n    }\n\n    private async Task<Tier?> GetTierAsync(string referenceNumber)\n    {\n        if (string.IsNullOrEmpty(referenceNumber)) return null;\n        var payload = new Dictionary<string, object> { { \"ReferenceNumber\", referenceNumber } };\n        return await CallDb<Tier>(TierApiUrl, \"FirstOrDefaultAsync\", payload);\n    }\n\n    private async Task<EmployeeTier?> GetEmployeeTierByEmployeeIdAsync(long employeeId)\n    {\n        var payload = new Dictionary<string, object> { { \"EmployeeId\", employeeId } };\n        return await CallDb<EmployeeTier>(EmployeeTierApiUrl, \"FirstOrDefaultAsync\", payload);\n    }\n}\n\npublic async Task<IDictionary<string, object>> mainFunction(string requestBody)\n{\n    var service = new EmployeeTierService();\n\n    EmployeeTier? employeeTier = null;\n    try {\n        employeeTier = JsonSerializer.Deserialize<EmployeeTier>(requestBody, EmployeeTierService.jsonOptions);\n    } catch (JsonException ex) {\n        Console.WriteLine($\"Error deserializing request body: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"Invalid JSON input: {ex.Message}\" }\n        };\n    }\n\n    if (employeeTier == null)\n    {\n        return new Dictionary<string, object>\n        { { \"statusCode\", 400 }, { \"body\", \"Invalid input values\" } };\n    }\n\n    try\n    {\n        await service.AddOrUpdateAsync(employeeTier);\n\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 200 },\n            { \"body\", \"Successfully processed\" }\n        };\n    }\n    catch (ArgumentException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", ex.Message }\n        };\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", $\"Internal server error: {ex.Message}\" }\n        };\n    }\n}\n\nstring requestBody = @\"{\n    \"\"EmployeeNumber\"\": \"\"8026400\"\",\n    \"\"ReferenceNumber\"\": \"\"Tier 1\"\"\n}\";\n\nvar result = await mainFunction(requestBody);\nresult",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_XfJ5C",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45010,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":26
}