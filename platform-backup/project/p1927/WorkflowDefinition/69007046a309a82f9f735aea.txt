{
	"appsUsed":[
		
	],
	"createdTime":1761636422378,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_FSpW2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_0hlXF",
			"type":"next"
		},
		{
			"fromNodeId":"n_0hlXF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_XfJ5C",
			"type":"next"
		}
	],
	"id":"69007046a309a82f9f735aea",
	"lastModifiedBy":45010,
	"lcName":"syncemployeetierhttptrigger",
	"modifiedTime":1761643197109,
	"name":"SyncEmployeeTierHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_FSpW2",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[
							"requestBody"
						]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_0hlXF",
			"index":2,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"requestBody"
					],
					"properties":{
						"requestBody":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Request Body"
						}
					}
				},
				"code":"using System;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing System.Data.SqlClient;\nusing System.IO;\n\npublic class EmployeeTier\n{\n    public int EmployeeTierId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string ReferenceNumber { get; set; }\n    public int EmployeeId { get; set; }\n    public int TierId { get; set; }\n}\n\npublic class Employee\n{\n    public int EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string UserName { get; set; }\n    public string Email { get; set; }\n    public string FullName { get; set; }\n    public bool IsActive { get; set; }\n}\n\npublic class Tier\n{\n    public int Id { get; set; }\n    public string ReferenceNumber { get; set; }\n    public string TierName { get; set; }\n    public int Weightage { get; set; }\n}\n\npublic async Task AddOrUpdateAsync(EmployeeTier employeeTier)\n{\n    ValidateParameters(employeeTier);\n\n    // var employeeSpecification = new EmployeeByEmployeeNumberSpecification(employeeTier.EmployeeNumber);\n    var employee = \"api-call-to-find\" // pass employee number\n    if (employee == null)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"No employee found with EmployeeNumber={employeeTier.EmployeeNumber}\" }\n        };\n    }\n    var specification = new TierByReferenceNumberSpecification(employeeTier.ReferenceNumber);\n    var tier = \"api-call-to-find\" // pass reference number\n    if (tier == null)\n    {\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"No tier found with ReferenceNumber={employeeTier.ReferenceNumber}\" }\n        };\n    }\n\n    var employeeTierByUserNameSpecification = new EmployeeTierByEmployeeIdSpecification(employee.EmployeeId);\n    var currentEmployeeTier = \"api-call-to-find\" // pass employee id\n    if (currentEmployeeTier == null)\n    {\n        employeeTier.TierId = tier.Id;\n        employeeTier.EmployeeId = employee.EmployeeId;\n        await \"api-call-to-add\"\n    }\n    else\n    {\n        currentEmployeeTier.TierId = tier.Id;\n        currentEmployeeTier.EmployeeId = employee.EmployeeId;\n        await \"api-call-to-update\"\n    }\n}\n\npublic void ValidateParameters(EmployeeTier employeeTier)\n{\n    if (string.IsNullOrEmpty(employeeTier.EmployeeNumber))\n    {\n        throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeTier.EmployeeNumber));\n    }\n    if (string.IsNullOrEmpty(employeeTier.ReferenceNumber))\n    {\n        throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeTier.ReferenceNumber));\n    }\n}\n\nasync Task<IDictionary<string, object>> mainFunction(string requestBody) {\n    try\n    {   \n        var employeeTier = JsonConvert.DeserializeObject<EmployeeTier>(requestBody);\n        if (employeeTier == null)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid input values\" }\n            };\n        }\n        \n        // var employeeTierService = new EmployeeTierService(connectionString);\n        await AddOrUpdateAsync(employeeTier);\n        \n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 200 },\n            { \"body\", \"Successfully processed\" }\n        };\n    }\n    catch (EmployeeNotFoundException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", ex.Message }\n        };\n    }\n    catch (TierNotFoundException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", ex.Message }\n        };\n    }\n    catch (ArgumentException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", ex.Message }\n        };\n    }\n    catch (JsonException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Please enter valid details\" }\n        };\n    }\n    catch (InvalidOperationException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Invalid operation\" }\n        };\n    }\n    catch (IOException ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", \"Internal server error\" }\n        };\n    }\n}\n\nvar resultObject = await callMainFunction(requestBody);\n\nresultObject",
				"isAsync":false,
				"parameters":{
					"requestBody":"{{ n_FSpW2.outputs.body.requestBody }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_uACUs-1",
			"id":"n_XfJ5C",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45010,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":12
}