{
	"appsUsed":[
		
	],
	"createdTime":1761637555150,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761992941809,
		"deployedBy":46217,
		"deployedDefinitionId":"6905e0eb7ff9833294abedce",
		"status":"DEPLOYED",
		"version":3,
		"workflowVersion":15
	},
	"edges":[
		{
			"fromNodeId":"n_WmBtH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Sqk3w",
			"type":"next"
		},
		{
			"fromNodeId":"n_Sqk3w",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nXgwV",
			"type":"next"
		}
	],
	"id":"690074b3a309a82f9f736ef2",
	"lastModifiedBy":46217,
	"lcName":"[virtu-empowerattendancefn]getreporteeshttptrigger",
	"modifiedTime":1761992952622,
	"name":"[virtu-emPowerAttendanceFN]GetReporteesHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":965,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_WmBtH",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"Authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"queryParams":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"employeeNumber":{
								"type":"string",
								"title":"Employee Number"
							},
							"startDate":{
								"type":"string",
								"title":"Start Date"
							},
							"endDate":{
								"type":"string",
								"title":"End Date"
							}
						}
					},
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":39,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_Sqk3w",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Text.Json;              \n\n// ----- Local Models -----\n\npublic class AppConfig\n{\n    // Attendance API\n    public string AttendanceSummaryOcpKey { get; set; }\n    public string AttendanceSummaryApiBaseUrl { get; set; }\n\n    // Worker API\n    public string WorkerOcpKey { get; set; }\n\n    // Token API\n    public string TokenOcp { get; set; }\n    public string TokenApi { get; set; }\n    public string TokenClientId { get; set; }\n    public string TokenClientSecret { get; set; }\n    public string TokenScope { get; set; }\n\n    public AppConfig(\n        string attendanceOcpKey,\n        string attendanceApiBaseUrl,\n        string workerOcpKey,\n        string tokenOcp,\n        string tokenApi,\n        string tokenClientId,\n        string tokenClientSecret,\n        string tokenScope)\n    {\n        AttendanceSummaryOcpKey = attendanceOcpKey;\n        AttendanceSummaryApiBaseUrl = attendanceApiBaseUrl;\n        WorkerOcpKey = workerOcpKey;\n        TokenOcp = tokenOcp;\n        TokenApi = tokenApi;\n        TokenClientId = tokenClientId;\n        TokenClientSecret = tokenClientSecret;\n        TokenScope = tokenScope;\n    }\n}\n\npublic class LocalHttpRequest\n{\n    public Dictionary<string, string> Headers { get; set; } = new();\n    public Dictionary<string, string> Query { get; set; } = new();\n\n    public LocalHttpRequest(Dictionary<string, string> headers, Dictionary<string, string> query)\n    {\n        Headers = headers;\n        Query = query;\n    }\n}\n\n\n// ----- Models -----\n\npublic class Reportee\n{\n    public long personID { get; set; }\n    public long personNumber { get; set; }\n    public string firstName { get; set; }\n    public string lastName { get; set; }\n    public string middleNames { get; set; }\n    public string displayName { get; set; }\n    public string fullName { get; set; }\n    public string title { get; set; }\n    public EmailAddress[] emailAddresses { get; set; }\n    public string managerType { get; set; }\n    public DateTime effectiveStartDate { get; set; }\n    public DateTime effectiveEndDate { get; set; }\n\n    public string userName\n    {\n        get\n        {\n            var email = this?.emailAddresses?.Where(x => x.emailType == \"W1\").FirstOrDefault()?.emailAddress;\n            if (email != null)\n            {\n                return email.Split('@')[0];\n            }\n            return string.Empty;\n        }\n    }\n\n    public string employeeNumber => this.personNumber.ToString();\n}\n\npublic class EmailAddress\n{\n    public long emailAddressID { get; set; }\n    public long personID { get; set; }\n    public string emailAddress { get; set; }\n    public DateTime dateFrom { get; set; }\n    public DateTime? dateTo { get; set; } // Make dateTo nullable\n    public string emailType { get; set; }\n}\n\n\n// ----- Service Methods -----\n\npublic class ReporteesService \n{\n    private readonly AuthService _authService;\n\n    public ReporteesService(AuthService authService)\n    {\n        _authService = authService;\n    }\n\n    public async Task<Dictionary<string, object>> GetReportees(LocalHttpRequest req, AppConfig config)\n    {\n        var responseDict = new Dictionary<string, object>();\n\n        try\n        {\n            HttpClient httpClient = new HttpClient();\n\n            var empNumber = await _authService.GetEmployeeNumber(req, config);\n\n            string workerOcpKey = config.WorkerOcpKey;\n            string apiBaseUrl = config.AttendanceSummaryApiBaseUrl;\n\n            string apiUrl = $\"{apiBaseUrl}/employees-api/v1/employees/{empNumber}/reportees\";\n\n            string apiToken = req.Headers.ContainsKey(\"Authorization\") ? req.Headers[\"Authorization\"] : \"\";\n\n            httpClient.DefaultRequestHeaders.Remove(\"Authorization\");\n            httpClient.DefaultRequestHeaders.Add(\"Authorization\", apiToken);\n            httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", workerOcpKey);\n\n            HttpResponseMessage response = await httpClient.GetAsync(apiUrl);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseContent = await response.Content.ReadAsStringAsync();\n                List<Reportee> reportees = JsonSerializer.Deserialize<List<Reportee>>(responseContent);\n\n                var mappedData = reportees?\n                    .Where(obj => obj.managerType == \"LINE_MANAGER\" && obj.emailAddresses?.Any(itm => itm.emailType == \"W1\") == true)\n                    .ToArray();\n\n                responseDict[\"statusCode\"] = 200;\n                responseDict[\"body\"] = mappedData;\n            }\n            else\n            {\n                responseDict[\"statusCode\"] = (int)response.StatusCode;\n                responseDict[\"body\"] = $\"API call failed with status code: {response.StatusCode}\";\n            }\n        }\n        catch (Exception ex)\n        {\n            responseDict[\"statusCode\"] = 500;\n            responseDict[\"body\"] = $\"Internal Server Error: {ex.Message}\";\n        }\n\n        return responseDict;\n    }\n}\n\npublic class AuthService\n{\n    public bool IsUserEqualsToTokenUser( string userName, LocalHttpRequest req)\n    {\n        // HttpClient httpClient = new HttpClient();\n\n        var empUserName = GetUserFromToken(req);\n\n        if (empUserName.Split('@')[0].ToLower() == userName.ToLower())\n        {\n            return true;\n        }\n        else\n        {\n            return false;\n        }\n    }\n\n    public async Task<bool> IsUserReportsToTokenUser( string UserName, string PersonNumber, AppConfig config, LocalHttpRequest req)\n    {\n        HttpClient httpClient = new HttpClient();\n\n        // var config = new ConfigurationBuilder()\n        //         .SetBasePath(context.FunctionAppDirectory)\n        //         .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true)\n        //         .AddEnvironmentVariables() // Include environment variables for other deployment scenarios\n        //         .Build();\n\n        var empNumber = await GetEmployeeNumber(req, config);\n\n        string workerOcpKey = config.WorkerOcpKey;\n        string apiBaseUrl = config.AttendanceSummaryApiBaseUrl;\n        // string workerOcpKey = config[\"workerOcpKey\"];\n        // string apiBaseUrl = config[\"AttendanceSummaryApiBaseUrl\"];\n\n        string apiUrl = $\"{apiBaseUrl}/emplyoees-api/v1/employees/{empNumber}/reportees\";\n\n        // string apiToken = req.Headers[\"Authorization\"]; // Get the entire Authorization header value\n        string apiToken = req.Headers.ContainsKey(\"Authorization\") ? req.Headers[\"Authorization\"] : \"\";\n\n        httpClient.DefaultRequestHeaders.Remove(\"Authorization\");\n        httpClient.DefaultRequestHeaders.Add(\"Authorization\", apiToken);\n        httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", workerOcpKey);\n\n        HttpResponseMessage response = await httpClient.GetAsync(apiUrl);\n\n        if (response.IsSuccessStatusCode)\n        {\n            var responseContent = await response.Content.ReadAsStringAsync();\n            // dynamic data = Newtonsoft.Json.JsonConvert.DeserializeObject(responseContent);\n            // List<Reportee> reportees = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Reportee>>(responseContent);\n            List<Reportee> reportees = JsonSerializer.Deserialize<List<Reportee>>(responseContent);\n\n            var mappedData = reportees?\n                .Where(obj => obj.managerType == \"LINE_MANAGER\" && obj.emailAddresses?.Any(itm => itm.emailType == \"W1\") == true)\n                .Select(obj => new\n                            {\n                                personNumber = obj.employeeNumber,\n                                lineManager = obj.managerType,\n                                //emailAddresses = obj.emailAddresses?.Where(itm => itm.emailType == \"W1\").Select(itm => itm.emailAddress).ToArray()\n                                emailAddress = obj.emailAddresses?.FirstOrDefault(itm => itm.emailType == \"W1\")?.emailAddress\n                            }).ToArray();\n\n            bool userExists = mappedData.Any(item =>\n                item.personNumber == PersonNumber || item?.emailAddress?.Split('@')[0].ToLower() == UserName.ToLower()\n            );\n\n            return userExists;\n        }\n        else\n        {\n            return false;\n        }\n\n    }\n\n    // Get User email From given token\n    private string GetUserFromToken( LocalHttpRequest req)\n    {\n        if (!req.Headers.TryGetValue(\"Authorization\", out var authorizationHeader) ||\n            string.IsNullOrEmpty(authorizationHeader) ||\n            !authorizationHeader.StartsWith(\"Bearer \", StringComparison.OrdinalIgnoreCase))\n        {\n            // Handle missing or invalid Authorization header (e.g., return null or throw an exception)\n            return null;\n        }\n\n        string token = authorizationHeader.Substring(\"Bearer \".Length);\n\n        try\n        {\n            /*var handler = new JwtSecurityTokenHandler();\n            var jwtToken = handler.ReadJwtToken(token);\n\n            // Extract the 'unique_name' claim\n            var uniqueNameClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == \"unique_name\");\n\n            if (uniqueNameClaim != null)\n            {\n                return uniqueNameClaim.Value;\n            }\n            else\n            {\n                // Handle the case where the 'unique_name' claim is not present\n                return null; // Or throw an exception\n            }*/\n\n            // JWT structure: header.payload.signature\n            var parts = token.Split('.');\n            if (parts.Length != 3)\n                return null;\n\n            string payload = parts[1];\n\n            // Base64Url decode\n            payload = payload.PadRight(payload.Length + (4 - payload.Length % 4) % 4, '=')\n                             .Replace('-', '+')\n                             .Replace('_', '/');\n\n            var bytes = Convert.FromBase64String(payload);\n            var jsonPayload = Encoding.UTF8.GetString(bytes);\n\n            using (var doc = JsonDocument.Parse(jsonPayload))\n            {\n                if (doc.RootElement.TryGetProperty(\"unique_name\", out var uniqueName))\n                {\n                    return uniqueName.GetString();\n                }\n            }\n\n            return null;\n        }\n        catch (Exception ex)\n        {\n            // Handle token parsing errors (e.g., log the error and return null or throw an exception)\n            return ex.Message; // Or throw\n        }\n    }\n\n    // Get EmployeeNumber using Worker API\n    public async Task<string> GetEmployeeNumber( LocalHttpRequest req, AppConfig config)\n    {\n        HttpClient httpClient = new HttpClient();\n\n        var userEmail = GetUserFromToken(req);\n\n        // string workerOcpKey = config[\"workerOcpKey\"];\n        // string apiBaseUrl = config[\"AttendanceSummaryApiBaseUrl\"];\n        string workerOcpKey = config.WorkerOcpKey;\n        string apiBaseUrl = config.AttendanceSummaryApiBaseUrl;\n\n        string apiUrl = $\"{apiBaseUrl}/v5-workers-api/v1/workers?onlyData=true&limit=400&q=(UPPER(emails.EmailAddress)='{userEmail.ToUpper()}' and emails.EmailType='W1')\";\n\n        // string apiToken = req.Headers[\"Authorization\"];\n        string apiToken = req.Headers.ContainsKey(\"Authorization\") ? req.Headers[\"Authorization\"] : \"\";\n\n        httpClient.DefaultRequestHeaders.Remove(\"Authorization\");\n        httpClient.DefaultRequestHeaders.Add(\"Authorization\", apiToken);\n        httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", workerOcpKey);\n        httpClient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n        httpClient.DefaultRequestHeaders.Add(\"REST-Framework-Version\", \"4\");\n\n        HttpResponseMessage response = await httpClient.GetAsync(apiUrl);\n\n        var responseContent = await response.Content.ReadAsStringAsync();\n\n        if (response.IsSuccessStatusCode)\n        {\n            // dynamic data = Newtonsoft.Json.JsonConvert.DeserializeObject(responseContent);\n            // return data?.items[0]?.PersonNumber;\n            var doc = JsonDocument.Parse(responseContent);\n            var items = doc.RootElement.GetProperty(\"items\");\n            if (items.GetArrayLength() > 0 && items[0].TryGetProperty(\"PersonNumber\", out var personNumber))\n            {\n                return personNumber.GetString();\n            } \n            else \n            {\n                return null;\n            }\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    public async Task<string> GetToken( AppConfig config)\n    {\n        HttpClient httpClient = new HttpClient();\n\n        // var config = new ConfigurationBuilder()\n        //         .SetBasePath(context.FunctionAppDirectory)\n        //         .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true)\n        //         .AddEnvironmentVariables() // Include environment variables for other deployment scenarios\n        //         .Build();\n\n        // string apiKey = config[\"TokenOcp\"];\n        // string apiBaseUrl = config[\"TokenApi\"];\n        // string tokenClientId = config[\"TokenClientId\"];\n        // string tokenClientSecret = config[\"TokenClientSecret\"];\n        // string tokenScope = config[\"TokenScope\"];\n        string apiKey = config.TokenOcp;\n        string apiBaseUrl = config.TokenApi;\n        string tokenClientId = config.TokenClientId;\n        string tokenClientSecret = config.TokenClientSecret;\n        string tokenScope = config.TokenScope;\n\n        httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", apiKey);\n\n        var requestBody = $\"client_id={tokenClientId}&grant_type=client_credentials&client_secret={tokenClientSecret}&scope={tokenScope}\";\n        var content = new StringContent(requestBody, Encoding.UTF8, \"application/x-www-form-urlencoded\");\n\n        HttpResponseMessage response = await httpClient.PostAsync(apiBaseUrl, content);\n\n        if (response.IsSuccessStatusCode)\n        {\n            var responseContent = await response.Content.ReadAsStringAsync();\n            // dynamic data = Newtonsoft.Json.JsonConvert.DeserializeObject(responseContent);\n            // return data?.access_token;\n            var doc = System.Text.Json.JsonDocument.Parse(responseContent);\n            if (doc.RootElement.TryGetProperty(\"access_token\", out var accessToken))\n            {\n                return accessToken.GetString();\n            }\n            else\n            {\n                return null;\n            }\n        }\n        else\n        {\n            //Handle error cases\n            return null; //Or throw exception\n        }\n    }\n}\n\n\n// ----- GetAttendanceSummeryHttpTrigger -----\n\npublic async Task<IDictionary<string, object>> mainFunction(LocalHttpRequest req, AppConfig config)\n{\n    var response = new Dictionary<string, object>();\n    var _authService = new AuthService();\n    var _getReporteeService = new ReporteesService(_authService);\n\n    try\n    {\n        // log.LogInformation(\"Start processing the request\");\n\n        // string userName = req.Query[\"userName\"];\n        string userName = req.Query.ContainsKey(\"userName\") ? req.Query[\"userName\"] : null;\n\n        if (string.IsNullOrEmpty(userName))\n        {\n            // return new BadRequestObjectResult(\"Invalid UserName\");\n            response[\"statusCode\"] = 400;\n            response[\"body\"] = \"Invalid UserName\";\n            return response;\n        }\n\n        // string apiToken = req.Headers[\"Authorization\"];        \n        string apiToken = req.Headers.ContainsKey(\"Authorization\") ? req.Headers[\"Authorization\"] : null;\n\n        if (string.IsNullOrEmpty(apiToken) || !apiToken.StartsWith(\"Bearer \", StringComparison.OrdinalIgnoreCase))\n        {\n            response[\"statusCode\"] = 401;\n            response[\"body\"] = \"Unauthorized. Access token is missing or invalid.\";\n            return response;\n        }\n\n        if (!(_authService.IsUserEqualsToTokenUser(userName, req)))\n        {\n            response[\"statusCode\"] = 403;\n            response[\"body\"] = \"Unauthorized. Access Denied for Requested User.\";\n            return response;\n        }\n\n        return await _getReporteeService.GetReportees(req, config);\n    }\n    catch (JsonException e)\n    {\n        // log.LogError(e, $\"Error message: {e.Message}\");\n        // return new BadRequestObjectResult(\"Invalid inputs\");\n        response[\"statusCode\"] = 400;\n        response[\"body\"] = $\"Invalid inputs: {e.Message}\";\n        return response;\n    }\n    catch (Exception e)\n    {\n        // log.LogError(e, $\"Error message: {e.Message}\");\n        // return new InternalServerErrorResult();\n        response[\"statusCode\"] = 500;\n        response[\"body\"] = $\"Internal Server Error: {e.Message}\";\n        return response;\n    }\n}\n\n\n// ------ Example input -----\n\nvar queryParams = new Dictionary<string, string>\n{\n    { \"userName\", \"amdissanayaka\" }\n};\nvar headers = new Dictionary<string, string>\n{\n    { \"Authorization\", \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6InlFVXdtWFdMMTA3Q2MtN1FaMldTYmVPYjNzUSIsImtpZCI6InlFVXdtWFdMMTA3Q2MtN1FaMldTYmVPYjNzUSJ9.eyJhdWQiOiJodHRwczovL3NlcnZpY2UuZmxvdy5taWNyb3NvZnQuY29tLyIsImlzcyI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzBkODUxNjBjLTU4OTktNDRjYS1hY2M4LWRiMTUwMWI5OTNiNi8iLCJpYXQiOjE3NjE5ODI0NzIsIm5iZiI6MTc2MTk4MjQ3MiwiZXhwIjoxNzYxOTg3NjcyLCJhY2N0IjowLCJhY3IiOiIxIiwiYWlvIjoiQVVRQXUvOGFBQUFBbWNSa1Z2VWw0bjhRTUNsa0RXcGJBN1lVS2RRTXR4UEdpdTNDTzhpajNGWXBUWVZRdkIyTXhiVy9GWSthdXZKeUV6RCtac25zMlgwWXorWmU2bkprMlE9PSIsImFtciI6WyJwd2QiLCJyc2EiXSwiYXBwaWQiOiIwOGUxODg3Ni02MTc3LTQ4N2UtYjhiNS1jZjk1MGMxZTU5OGMiLCJhcHBpZGFjciI6IjAiLCJkZXZpY2VpZCI6IjlmMTZlZDdmLTY5MDEtNGJkOS1iOTI0LWViN2MyYTU3ZDI4NyIsImZhbWlseV9uYW1lIjoiS3VtYXIiLCJnaXZlbl9uYW1lIjoiQW5zaHVsIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMTA0LjIxMS4yMTEuMTYzIiwibmFtZSI6IkFuc2h1bCBLdW1hciIsIm9pZCI6ImJhNDg0MTRiLTFkNDMtNDNjMC1iNmM5LTRiZmUxM2ZjMGQyMiIsIm9ucHJlbV9zaWQiOiJTLTEtNS0yMS0xOTM1NjU1Njk3LTIxMzk4NzE5OTUtNjgyMDAzMzMwLTY0ODMyNSIsInB1aWQiOiIxMDAzMjAwNEQyQkFCNzdGIiwicmgiOiIxLkFRb0FEQmFGRFpsWXlrU3N5TnNWQWJtVHRpV2g4SDItMDVaTXFsUlpINFBfVkJ3S0FMY0tBQS4iLCJzY3AiOiJBcHByb3ZhbHMuTWFuYWdlLkFsbCBGbG93cy5SZWFkLkFsbCBGbG93cy5SZWFkLlBsYW5zIEZsb3dzLldyaXRlLlBsYW5zIiwic2lkIjoiMDA5Y2U0MjktMmUwNi1jODczLTQ3NzUtYzNhM2NkZjg5ZDA1Iiwic2lnbmluX3N0YXRlIjpbImR2Y19tbmdkIiwiZHZjX2NtcCIsImR2Y19kbWpkIiwiaW5rbm93bm50d2siLCJrbXNpIl0sInN1YiI6IlRoN2UwZDRCUjJIUVk1Uk9Ldl9lSW16amVhdGw4Q0hNQ0toSmI5dThOVzAiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiQVMiLCJ0aWQiOiIwZDg1MTYwYy01ODk5LTQ0Y2EtYWNjOC1kYjE1MDFiOTkzYjYiLCJ1bmlxdWVfbmFtZSI6ImFuc2h1bGt1bWFyQHZpcnR1c2EuY29tIiwidXBuIjoiYW5zaHVsa3VtYXJAdmlydHVzYS5jb20iLCJ1dGkiOiJTUE5zV2x1dDcwcVFvSGhmNkZEZEFBIiwidmVyIjoiMS4wIiwieG1zX2FjdF9mY3QiOiI1IDMiLCJ4bXNfZnRkIjoieThqY0FCR2d0WS13NGdnejloM3F6a0FWVlZJbWlTTWhvbjE0YkVSOGRRb0JhMjl5WldGemIzVjBhQzFrYzIxeiIsInhtc19pZHJlbCI6IjQgMSIsInhtc19zdWJfZmN0IjoiMyAxMCJ9.aSf7GNY3bN-KGag5NPUDumeaOpCpaH32j9e6dFsnsmm_aSVDqa6cu2FLBEH5Ozo1QZFpxqb1-fp0VA-PTqB4Cu16jgYexF6BgUTj1NSLtHPbPECN8dN6E1ECGpAvLZFeJO-S92PWTGP8Om11J3_7WnTntTsFIOn7S4dLomNUNNmstVfS7wh2rEsc1DCza7n6B4WSGqxffiZckTmtNcaFSjeRgKtwGE_KkryU5QGtvFJW3gdZ-oU0PAj7W2JiRVxfQPr-m5X8oqdj7pMGr2A-gz9oo2Bgm8kxXEQ6GyP7XLeV5TKHTYOj0z5HxgMuiBURBWxSQsU3xm0O4L3gWjh-Yw\" }\n};\nvar req = new LocalHttpRequest(headers, queryParams);\n\nvar config = new AppConfig(\n    attendanceOcpKey: \"fd62d08d87c74a23b1b48e493dbcb72b\",\n    attendanceApiBaseUrl: \"https://virtueagintegrationsapim.azure-api.net\",\n    workerOcpKey: \"9ff9b4951ab2422cb55334058f39dcbd\",\n    tokenOcp: \"ffea0077e81d4b8e86fad8384cced7f8\",\n    tokenApi: \"https://virtueagintegrationsapim-dev2.azure-api.net/accesstokenapi/v1/v2.0/token\",\n    tokenClientId: \"dec4789f-9b46-42b8-9c6d-9cda0b0a4a7e\",\n    tokenClientSecret: \"E[62Rzi5WRzI]8[v[iv3bRR5mb2RQDpn\",\n    tokenScope: \"https://eagdev2.api.crm5.dynamics.com/.default\"\n);\n\nvar result = await mainFunction(req, config);\nresult",
				"isAsync":false,
				"parameters":{
					"Authorization":"{{ n_WmBtH.outputs.headers.Authorization }}",
					"endDate":"{{ n_WmBtH.outputs.queryParams.endDate }}",
					"startDate":"{{ n_WmBtH.outputs.queryParams.startDate }}",
					"employeeNumber":"{{ n_WmBtH.outputs.queryParams.employeeNumber }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":916,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_nXgwV",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39714,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":16
}