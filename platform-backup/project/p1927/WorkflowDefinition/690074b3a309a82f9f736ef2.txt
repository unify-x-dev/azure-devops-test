{
	"appsUsed":[
		
	],
	"createdTime":1761637555150,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_WmBtH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Sqk3w",
			"type":"next"
		},
		{
			"fromNodeId":"n_Sqk3w",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nXgwV",
			"type":"next"
		}
	],
	"id":"690074b3a309a82f9f736ef2",
	"lastModifiedBy":39714,
	"lcName":"[virtu-empowerattendancefn]->getreporteeshttptrigger",
	"modifiedTime":1761637555150,
	"name":"[virtu-emPowerAttendanceFN]->GetReporteesHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":965,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_WmBtH",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"Authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"queryParams":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"employeeNumber":{
								"type":"string",
								"title":"Employee Number"
							},
							"startDate":{
								"type":"string",
								"title":"Start Date"
							},
							"endDate":{
								"type":"string",
								"title":"End Date"
							}
						}
					},
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":39,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_Sqk3w",
			"index":2,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"employeeNumber":{
							"type":"string",
							"title":"employeeNumber"
						},
						"startDate":{
							"type":"string",
							"title":"startDate"
						},
						"endDate":{
							"type":"string",
							"title":"endDate"
						},
						"Authorization":{
							"type":"string",
							"title":"Authorization"
						}
					}
				},
				"code":"using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Net.Http;\nusing System.Web.Http;\nusing attendanceAPI.ApplicationCore.Interfaces;\nusing attendanceAPI.ApplicationCore.Services;\nusing System.Security.Claims;\nusing System.Linq;\n\npublic static class GetAttendanceSummeryHttpTrigger\n{\n    private readonly IAttendanceSummaryService _attendanceSummaryService;\n    private readonly IAuthService _authService;\n\n    public GetAttendanceSummeryHttpTrigger(IAttendanceSummaryService attendanceSummaryService, IAuthService authService)\n    {\n        _attendanceSummaryService = attendanceSummaryService;\n        _authService = authService;\n    }\n\n    private static readonly HttpClient httpClient = new HttpClient(); // Static HttpClient for better performance\n\n    [FunctionName(\"GetAttendanceSummeryHttpTrigger\")]\n    public async Task<IActionResult> Run(\n        [HttpTrigger(AuthorizationLevel.Function, \"get\", \"post\", Route = null)] HttpRequest req, ILogger log,ExecutionContext context, ClaimsPrincipal principal)\n    {\n        try\n        {\n            //reportie validation -> need to call worker API with AD token user (RM giving to api) and get reportie list and check that with\n            //\"employeeNumber\" from query parameter to confirm he or she is a reportie\n\n            log.LogInformation(\"Start processing the request\");\n\n            string employeeId = employeeNumber;\n            string startDate = startDate;\n            string endDate = endDate;\n\n    \n            if (string.IsNullOrEmpty(employeeId))\n            {\n                return new BadRequestObjectResult(\"Invalid employeeNumber\");\n            }\n\n            if (string.IsNullOrEmpty(startDate))\n            {\n                return new BadRequestObjectResult(\"Invalid startDate\");\n            }\n\n            if (string.IsNullOrEmpty(endDate))\n            {\n                return new BadRequestObjectResult(\"Invalid endDate\");\n            }\n\n            string apiToken = Authorization;\n\n            if (string.IsNullOrEmpty(apiToken) && apiToken.StartsWith(\"Bearer \", StringComparison.OrdinalIgnoreCase))\n            {\n                return new UnauthorizedObjectResult($\"Unauthorized. Access token is missing or invalid.\");\n            }\n\n            if (!(await _authService.IsUserReportsToTokenUser(\"\", employeeId, context, req)))\n            {\n                return new UnauthorizedObjectResult($\"Unauthorized. Access Denied for Requested User.!\");\n            }\n\n            HttpResponseMessage response = await _attendanceSummaryService.GetEmployeeAttendanceSummaryData(apiToken, employeeId, startDate, endDate, context, req);\n\n            if (response.IsSuccessStatusCode)\n            {\n                string responseBody = await response.Content.ReadAsStringAsync();\n                // Parse the response if needed\n                //var attendanceData = JsonSerializer.Deserialize<object>(responseBody); \n\n                return new OkObjectResult(responseBody); // Return the raw JSON or a parsed object\n            }\n            else\n            {\n                log.LogError($\"API call failed with status code: {response.StatusCode}\");\n                return new BadRequestObjectResult($\"API call failed with status code: {response.StatusCode}\");\n            }\n        }\n        catch (JsonException e)\n        {\n            log.LogError(e, $\"Error message: {e.Message}\");\n            return new BadRequestObjectResult(\"Invalid inputs\");\n        }\n        catch (Exception e)\n        {\n            log.LogError(e, $\"Error message: {e.Message}\");\n            return new InternalServerErrorResult();\n        }\n    }\n}\n\nGetAttendanceSummeryHttpTrigger.Run();",
				"isAsync":false,
				"parameters":{
					"employeeNumber":"{{ n_WmBtH.outputs.queryParams.employeeNumber }}",
					"startDate":"{{ n_WmBtH.outputs.queryParams.startDate }}",
					"endDate":"{{ n_WmBtH.outputs.queryParams.endDate }}",
					"Authorization":"{{ n_WmBtH.outputs.headers.Authorization }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":916,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_nXgwV",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39714,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":0
}