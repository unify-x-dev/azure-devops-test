{
	"appsUsed":[
		
	],
	"createdTime":1761831796867,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_9nF2z",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ivopS",
			"type":"next"
		},
		{
			"fromNodeId":"n_ivopS",
			"priority":0,
			"skip":false,
			"toNodeId":"n_FGJUT",
			"type":"next"
		}
	],
	"id":"69036b740bb3c67f73ad303c",
	"lastModifiedBy":308,
	"lcName":"temp",
	"modifiedTime":1761832418645,
	"name":"temp",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1163,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_gnhZ1-1",
			"id":"n_9nF2z",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"string",
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"ok",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":232,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_gnhZ1-1",
			"id":"n_ivopS",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"result":{
							"type":"string",
							"title":"Result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"authorization":{
							"type":"string",
							"title":"Authorization"
						},
						"requestBody":{
							"type":"string",
							"title":"Request Body"
						}
					}
				},
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\n\n// Entities\npublic class BaseEntity\n{\n    public int Id { get; set; }\n}\n\npublic class IndividualMetric : BaseEntity\n{\n    public string UserName { get; set; }\n    public int ActivityId { get; set; }\n    public decimal Score { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public Activity Activity { get; set; }\n}\n\npublic class Activity : BaseEntity\n{\n    public string Name { get; set; }\n}\n\npublic class Employee : BaseEntity\n{\n    public string UserName { get; set; }\n}\n\npublic class BadgeActivity : BaseEntity\n{\n    public int ActivityId { get; set; }\n    public int BadgeId { get; set; }\n}\n\npublic class BadgeEmployee : BaseEntity\n{\n    public int BadgeId { get; set; }\n    public int EmployeeId { get; set; }\n}\n\n// Models\npublic class MetricRequest<T>\n{\n    public int ActivityId { get; set; }\n    public T Data { get; set; }\n}\n\n// Exceptions\npublic class ActivityNotFoundException : Exception\n{\n    public ActivityNotFoundException(string message) : base(message) { }\n}\n\npublic class EmployeeNotFoundException : Exception\n{\n    public EmployeeNotFoundException(string message) : base(message) { }\n}\n\n// Response Models\npublic class OkObjectBulkResult\n{\n    public int code { get; set; }\n    public string message { get; set; }\n    public List<IndividualMetric> failed { get; set; }\n\n    public OkObjectBulkResult(string message, int code, List<IndividualMetric> failed)\n    {\n        this.message = message;\n        this.code = code;\n        this.failed = failed;\n    }\n}\n\n// JWT Helper\npublic static class JwtHelper\n{\n    public static string ExtractAppId(string bearerToken)\n    {\n        try\n        {\n            if (string.IsNullOrEmpty(bearerToken))\n                return null;\n\n            // Remove \"Bearer \" prefix if present\n            var token = bearerToken.StartsWith(\"Bearer \", StringComparison.OrdinalIgnoreCase) \n                ? bearerToken.Substring(7).Trim() \n                : bearerToken;\n\n            // JWT has 3 parts separated by dots\n            var parts = token.Split('.');\n            if (parts.Length != 3)\n                return null;\n\n            // Decode the payload (second part)\n            var payload = parts[1];\n            \n            // Add padding if needed\n            switch (payload.Length % 4)\n            {\n                case 2: payload += \"==\"; break;\n                case 3: payload += \"=\"; break;\n            }\n\n            // Decode from Base64\n            var jsonBytes = Convert.FromBase64String(payload);\n            var jsonString = Encoding.UTF8.GetString(jsonBytes);\n\n            // Parse JSON to get appid\n            var jsonDoc = JsonDocument.Parse(jsonString);\n            if (jsonDoc.RootElement.TryGetProperty(\"appid\", out JsonElement appidElement))\n            {\n                return appidElement.GetString();\n            }\n\n            return null;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n}\n\n// Services\npublic static class ApiHelper\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n\n    public static async Task<string> CallApiEndpointAsync(string endpointUrl, string operationName, object payload)\n    {\n        try\n        {\n            var requestBody = new\n            {\n                operationName = operationName,\n                payload = payload\n            };\n\n            string jsonBody = JsonSerializer.Serialize(requestBody);\n            var content = new StringContent(jsonBody, Encoding.UTF8, \"application/json\");\n\n            HttpResponseMessage response = await httpClient.PostAsync(endpointUrl, content);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                return $\"{{\\\"success\\\":false,\\\"message\\\":\\\"HTTP {response.StatusCode}\\\"}}\";\n            }\n            return responseContent;\n        }\n        catch (Exception ex)\n        {\n            return $\"{{\\\"success\\\":false,\\\"message\\\":\\\"{ex.Message}\\\"}}\";\n        }\n    }\n}\n\npublic static class GenerationStrategyContext\n{\n    public static async Task GenerateAsync(int activityId, IndividualMetric metric)\n    {\n        string employeeEndpoint = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeEndpoint\";\n        \n        var payload = new\n        {\n            activityId = activityId,\n            userName = metric.UserName,\n            score = metric.Score,\n            effectiveDate = metric.EffectiveDate,\n            referenceNumber = metric.Id\n        };\n\n        string apiResult = await ApiHelper.CallApiEndpointAsync(employeeEndpoint, \"GenerateAsync\", payload);\n        \n        try\n        {\n            var response = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(apiResult);\n            bool success = response.ContainsKey(\"success\") && response[\"success\"].GetBoolean();\n            \n            if (!success)\n            {\n                string errorMsg = response.ContainsKey(\"message\") ? response[\"message\"].GetString() : \"Unknown error\";\n                throw new Exception($\"Failed to generate activity: {errorMsg}\");\n            }\n        }\n        catch (JsonException)\n        {\n            // If response is not JSON, assume success\n        }\n    }\n}\n\npublic static class ActivityService\n{\n    public static async Task GenerateAsync(int activityId, IndividualMetric metric)\n    {\n        await GenerationStrategyContext.GenerateAsync(activityId, metric);\n    }\n\n    public static async Task GenerateBulkAsync(int activityId, IEnumerable<IndividualMetric> metrics)\n    {\n        foreach (IndividualMetric metric in metrics)\n        {\n            await GenerationStrategyContext.GenerateAsync(activityId, metric);\n        }\n    }\n}\n\npublic static class ClientService\n{\n    public static async Task<bool> IsAuthorize(string appid, int activityId)\n    {\n        if (string.IsNullOrEmpty(appid))\n        {\n            return false;\n        }\n\n        string authEndpoint = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeEndpoint\";\n        \n        var payload = new\n        {\n            appid = appid,\n            activityId = activityId\n        };\n\n        try\n        {\n            string apiResult = await ApiHelper.CallApiEndpointAsync(authEndpoint, \"IsAuthorize\", payload);\n            \n            var response = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(apiResult);\n            bool success = response.ContainsKey(\"success\") && response[\"success\"].GetBoolean();\n            \n            return success;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n\n    public static async Task<bool> IsAuthorizeForBadge(string appid, int badgeId)\n    {\n        if (string.IsNullOrEmpty(appid))\n        {\n            return false;\n        }\n\n        string authEndpoint = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeEndpoint\";\n        \n        var payload = new\n        {\n            appid = appid,\n            badgeId = badgeId\n        };\n\n        try\n        {\n            string apiResult = await ApiHelper.CallApiEndpointAsync(authEndpoint, \"IsAuthorizeForBadge\", payload);\n            \n            var response = JsonSerializer.Deserialize<Dictionary<string, JsonElement>>(apiResult);\n            bool success = response.ContainsKey(\"success\") && response[\"success\"].GetBoolean();\n            \n            return success;\n        }\n        catch\n        {\n            return false;\n        }\n    }\n}\n\npublic static class SyncEmployeeActivitiesBulkHttpTrigger\n{\n    public static async Task<Dictionary<string, object>> Run(string requestBody, string authorization)\n    {\n        try\n        {\n            // Extract appid from Authorization header\n            string appid = JwtHelper.ExtractAppId(authorization);\n            \n            if (string.IsNullOrEmpty(appid))\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 401 },\n                    { \"body\", \"Invalid or missing authorization token\" }\n                };\n            }\n\n            MetricRequest<IEnumerable<IndividualMetric>> metrics = JsonSerializer.Deserialize<MetricRequest<IEnumerable<IndividualMetric>>>(requestBody);\n            var activityId = metrics.ActivityId;\n            \n            if (metrics.ActivityId <= 0)\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 400 },\n                    { \"body\", \"Invalid activity\" }\n                };\n            }\n            \n            if (!metrics.Data.Any())\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 400 },\n                    { \"body\", \"Invalid inputs\" }\n                };\n            }\n            \n            var isAuthorize = await ClientService.IsAuthorize(appid, metrics.ActivityId);\n            \n            if (!isAuthorize)\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 403 },\n                    { \"body\", $\"You are not authorized to send activities to activity id: {metrics.ActivityId}\" }\n                };\n            }\n            \n            var failedRecords = new List<IndividualMetric>();\n            \n            foreach (var metric in metrics.Data)\n            {\n                try\n                {\n                    if (string.IsNullOrEmpty(metric.UserName))\n                    {\n                        failedRecords.Add(metric);\n                        continue;\n                    }\n                    \n                    if(activityId == 0)\n                    {\n                        failedRecords.Add(metric);\n                        continue;\n                    }\n                    \n                    if (metric.Score == 0)\n                    {\n                        failedRecords.Add(metric);\n                        continue;\n                    }\n                    \n                    if (metric.EffectiveDate == DateTime.MinValue)\n                    {\n                        failedRecords.Add(metric);\n                        continue;\n                    }\n                    \n                    metric.ActivityId = activityId;\n                    await ActivityService.GenerateAsync(activityId, metric);\n                }\n                catch (ActivityNotFoundException e)\n                {\n                    return new Dictionary<string, object>\n                    {\n                        { \"statusCode\", 400 },\n                        { \"body\", $\"Invalid activity. {e.Message}\" }\n                    };\n                }\n                catch (EmployeeNotFoundException e)\n                {\n                    metric.Activity = null;\n                    failedRecords.Add(metric);\n                }\n                catch (Exception e)\n                {\n                    metric.Activity = null;\n                    failedRecords.Add(metric);\n                    if (e is OutOfMemoryException)  \n                    {\n                        throw; \n                    }\n                }\n            }\n            \n            if (metrics.Data.Count() == failedRecords.Count)\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 500 },\n                    { \"body\", \"Internal Server Error\" }\n                };\n            }\n            \n            string responseMessage = $\"Successfully completed\";\n            int statusCode = 0;\n            \n            if (failedRecords.Any())\n            {\n                statusCode = -1;\n            }\n            \n            var resultObject = new OkObjectBulkResult(responseMessage, statusCode, failedRecords);\n            \n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 200 },\n                { \"body\", resultObject }\n            };\n        }\n        catch (JsonException e)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid inputs\" }\n            };\n        }\n        catch (Exception e)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 500 },\n                { \"body\", $\"Internal Server Error: {e.Message}\" }\n            };\n        }\n    }\n}\n\nvar result = await SyncEmployeeActivitiesBulkHttpTrigger.Run(requestBody, authorization);\nresult",
				"isAsync":false,
				"parameters":{
					"authorization":"{{ n_9nF2z.outputs.headers.authorization }}",
					"requestBody":"{{ n_9nF2z.outputs.body.requestBody }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1132,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_gnhZ1-1",
			"id":"n_FGJUT",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_ok",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":308,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":3
}