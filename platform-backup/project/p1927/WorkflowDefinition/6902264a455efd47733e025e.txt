{
	"appsUsed":[
		
	],
	"createdTime":1761748554018,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_gWbia",
			"priority":0,
			"skip":false,
			"toNodeId":"n_fySYw",
			"type":"next"
		},
		{
			"fromNodeId":"n_fySYw",
			"priority":0,
			"skip":false,
			"toNodeId":"n_3BCPt",
			"type":"next"
		}
	],
	"id":"6902264a455efd47733e025e",
	"lastModifiedBy":39713,
	"lcName":"[virtu-empowerraveschedulerfn]syncemployeehttptrigger",
	"modifiedTime":1761749152991,
	"name":"[virtu-emPowerRaveSchedulerFN]SyncEmployeeHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1158,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_1Gh0X-1",
			"id":"n_gWbia",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"200",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":227,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_1Gh0X-1",
			"id":"n_fySYw",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Text.Json; // Using System.Text.Json\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Net.Http;\nusing System.Text;\n// Removed ASP.NET and Azure-specific usings\nusing Microsoft.Extensions.Logging; // For ILogger (will be passed as null)\n\n// --- Base Models ---\n\npublic class BaseEntity\n{\n    // Switched to object? to be more generic, though int was specified.\n    // Sticking to 'int' as per your provided class.\n    public int Id { get; set; }\n}\n\npublic class Category : BaseEntity\n{\n    public string? Name { get; set; }\n    public string? Description { get; set; }\n    public string? ImageUrl { get; set; }\n    public bool IsActive { get; set; }\n    public IReadOnlyCollection<Rave>? Raves { get; set; }\n    public IReadOnlyCollection<EmployeeCategory>? EmployeeCategories { get; set; }\n}\n\npublic class Employee : BaseEntity\n{\n    public long EmployeeId { get; set; }\n    public string? UserName { get; set; }\n    public string? FullName { get; set; }\n    public string? Email { get; set; }\n    public long? ManagerId { get; set; }\n    public string? ManagerEmployeeNumber { get; set; }\n    public bool IsActive { get; set; }\n    public string? EmployeeNumber { get; set; } // Kept nullable for consistency\n    public string? Status { get; set; }\n    public Employee? Manager { get; set; }\n\n    public string? Designation { get; set; }\n    public IReadOnlyCollection<Rave>? Raves { get; set; }\n    public IReadOnlyCollection<EmployeeCategory>? EmployeeCategories { get; set; }\n    private readonly List<RaveEmployee> _raveEmployees = new List<RaveEmployee>();\n    public IReadOnlyCollection<RaveEmployee> RaveEmployees => _raveEmployees.AsReadOnly();\n\n    public void AddRaveEmployee(RaveEmployee raveEmployee)\n    {\n        _raveEmployees.Add(raveEmployee);\n    }\n}\n\npublic class EmployeeCategory : BaseEntity\n{\n    public long EmployeeId { get; set; }\n    public int CategoryId { get; set; }\n    public Employee? Employee { get; set; }\n    public Category? Category { get; set; }\n}\npublic class Rave : BaseEntity\n{\n    public long SenderEmployeeId { get; set; }\n    public string? Content { get; set; }\n    public int CategoryId { get; set; }\n    public DateTime SentDate { get; set; }\n    public Employee? Sender { get; set; }\n    public Category? Category { get; set; }\n    private readonly List<RaveEmployee> _raveEmployees = new List<RaveEmployee>();\n    public IReadOnlyCollection<RaveEmployee> RaveEmployees => _raveEmployees.AsReadOnly();\n\n    public void AddRaveEmployee(RaveEmployee raveEmployee)\n    {\n        _raveEmployees.Add(raveEmployee);\n    }\n    public void AddRaveEmployee(string userName)\n    {\n        _raveEmployees.Add(new RaveEmployee { Employee = new Employee { UserName = userName } });\n    }\n}\npublic class RaveEmployee : BaseEntity\n{\n    public int RaveId { get; set; }\n    public long EmployeeId { get; set; }\n    public bool IsThanked { get; set; }\n    public Rave? Rave { get; set; }\n    public Employee? Employee { get; set; }\n}\n\n// --- Logic Class ---\n\npublic class EmployeeProcessor\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    // Assuming the EmployeeEndpoint can handle all Employee operations\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeEndpoint\";\n    private const string DomainName = \"virtusa.com\";\n\n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    };\n\n    // Logger instance, set by mainFunction\n    private ILogger? _log;\n\n    // --- DB Interaction Method ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\";\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n             _log?.LogError(e, \"JSON Serialization Error (Request - {OperationName})\", operationName);\n             throw; \n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                 _log?.LogWarning(\"HTTP Request Error ({OperationName}): {StatusCode} | Response: {ResponseContent}\", operationName, response.StatusCode, responseContent);\n                 response.EnsureSuccessStatusCode();\n            }\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\")\n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     // Check for a nested result, common in API responses\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         return resultElement.Deserialize<TResponse>(jsonOptions);\n                     }\n                     // Otherwise, try to deserialize the entire response\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                        return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                _log?.LogError(jsonEx, \"JSON Deserialization Error ({OperationName}) | Response: {ResponseContent}\", operationName, responseContent);\n                return default;\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            _log?.LogError(e, \"HTTP Request Error ({OperationName})\", operationName);\n            throw;\n        }\n        catch (Exception e)\n        {\n             _log?.LogError(e, \"An unexpected error occurred in CallDb ({OperationName})\", operationName);\n             throw;\n        }\n    }\n\n    // --- Employee Service Logic ---\n\n    public async Task AddOrUpdateAsync(Employee employee)\n    {\n        if (string.IsNullOrEmpty(employee.EmployeeNumber))\n        {\n            throw new ArgumentException(\"EmployeeNumber cannot be null or empty\", nameof(employee.EmployeeNumber));\n        }\n        ValidateEmployeeNumber(employee.EmployeeNumber);\n\n        if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n        {\n            await ProcessManagerAsync(employee.ManagerEmployeeNumber);\n        }\n\n        await AddManagerIdAsync(employee);\n        await ProcessEmployeeAsync(employee);\n    }\n\n    private async Task AddManagerIdAsync(Employee employee)\n    {\n        if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n        {\n            var manager = await GetEmployeeAsync(employee.ManagerEmployeeNumber).ConfigureAwait(false);\n            employee.ManagerId = manager?.EmployeeId;\n        }\n    }\n\n    public async Task DeleteAsync(string employeeNumber)\n    {\n        ValidateEmployeeNumber(employeeNumber);\n        var isExistingEmployee = await IsExistingEmployee(employeeNumber);\n\n        if (isExistingEmployee)\n        {\n            var existingEmployee = await GetEmployeeAsync(employeeNumber);\n            if (existingEmployee == null) return; // Should not happen if isExisting is true, but safe check\n\n            // ⭐ REPO -> CallDb\n            // Find reportees\n            var reporteePayload = new Dictionary<string, object> { { \"ManagerEmployeeNumber\", employeeNumber } };\n            var reportees = await CallDb<List<Employee>>(\"ListAsync\", reporteePayload);\n\n            if(reportees != null)\n            {\n                foreach (var reportee in reportees)\n                {\n                    reportee.ManagerId = null;\n                    await CallDb<object>(\"UpdateAsync\", reportee).ConfigureAwait(false);\n                }\n            }\n\n            // Delete the employee\n            await CallDb<object>(\"DeleteAsync\", existingEmployee).ConfigureAwait(false);\n        }\n    }\n\n    private async Task ProcessManagerAsync(string managerEmployeeNumber)\n    {\n        bool isExistingEmployee = await IsExistingEmployee(managerEmployeeNumber);\n        if (!isExistingEmployee)\n        {\n            var manager = new Employee\n            {\n                EmployeeNumber = managerEmployeeNumber,\n                UserName = managerEmployeeNumber, // Assuming UserName is same as EmployeeNumber for stub\n                IsActive = false\n            };\n            await AddEmployeeAsync(manager).ConfigureAwait(false);\n        }\n    }\n\n    private async Task ProcessEmployeeAsync(Employee employee)\n    {\n        bool isExistingEmployee = await IsExistingEmployee(employee.EmployeeNumber!); // Non-null check handled by caller\n        if (!isExistingEmployee)\n        {\n            await AddEmployeeAsync(employee).ConfigureAwait(false);\n        }\n        else\n        {\n            var existingEmployee = await GetEmployeeAsync(employee.EmployeeNumber!).ConfigureAwait(false);\n            if (existingEmployee == null) return; // Safety check\n\n            // Merge properties\n            existingEmployee.FullName = employee.FullName;\n            existingEmployee.Email = employee.Email;\n            existingEmployee.UserName = employee.UserName;\n            existingEmployee.ManagerId = employee.ManagerId;\n            existingEmployee.IsActive = employee.IsActive; // This is set by mainFunction logic\n            existingEmployee.Status = employee.Status; // Also set by mainFunction\n            existingEmployee.ManagerEmployeeNumber = employee.ManagerEmployeeNumber;\n\n            // ⭐ REPO -> CallDb\n            await CallDb<object>(\"UpdateAsync\", existingEmployee).ConfigureAwait(false);\n        }\n    }\n\n    private async Task AddEmployeeAsync(Employee employee)\n    {\n        FormatEmployee(employee);\n        // ⭐ REPO -> CallDb\n        await CallDb<Employee>(\"AddAsync\", employee).ConfigureAwait(false);\n    }\n\n    private void FormatEmployee(Employee employee)\n    {\n        employee.FullName = string.IsNullOrEmpty(employee.FullName) ? employee.EmployeeNumber : employee.FullName;\n        employee.Email = string.IsNullOrEmpty(employee.Email) ? $\"{employee.EmployeeNumber}@{DomainName}\" : employee.Email;\n    }\n\n    private async Task<Employee?> GetEmployeeAsync(string employeeNumber)\n    {\n        // ⭐ REPO -> CallDb\n        var payload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n        return await CallDb<Employee>(\"FirstOrDefaultAsync\", payload);\n    }\n\n    private void ValidateEmployeeNumber(string? employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(Employee.EmployeeNumber));\n        }\n    }\n\n    private async Task<bool> IsExistingEmployee(string employeeNumber)\n    {\n        // ⭐ REPO -> CallDb\n        var payload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n        int? employeeCount = await CallDb<int>(\"CountAsync\", payload);\n        return employeeCount.HasValue && employeeCount.Value > 0;\n    }\n\n    // --- Main Script Function (Refactored) ---\n   public async Task<IDictionary<string, object>> mainFunction(string requestBody, ILogger? log = null)\n    {\n        this._log = log; // Set logger instance\n        \n        try\n        {\n            // ⭐ Using System.Text.Json.JsonSerializer as requested\n            var employee = System.Text.Json.JsonSerializer.Deserialize<Employee>(requestBody, jsonOptions);\n\n            if (employee == null)\n            {\n                return new Dictionary<string, object> {\n                    { \"statusCode\", 400 },\n                    { \"body\", new { message = \"Please pass a valid employee to sync\" } }\n                };\n            }\n\n            if (string.IsNullOrEmpty(employee.EmployeeNumber))\n            {\n                return new Dictionary<string, object> {\n                    { \"statusCode\", 400 },\n                    { \"body\", new { message = \"Invalid Employee Number\" } }\n                };\n            }\n\n            if (string.IsNullOrEmpty(employee.Status))\n            {\n                return new Dictionary<string, object> {\n                    { \"statusCode\", 400 },\n                    { \"body\", new { message = \"Employee Status is empty\" } }\n                };\n            }\n            else\n            {\n                // ⭐ Call this.DeleteAsync and this.AddOrUpdateAsync\n                if (employee.Status == \"Cancelled\")\n                {\n                    await this.DeleteAsync(employee.EmployeeNumber).ConfigureAwait(false);\n                }\n                else\n                {\n                    await this.AddOrUpdateAsync(new Employee\n                    {\n                        UserName = employee.UserName,\n                        Email = employee.Email,\n                        FullName = employee.FullName,\n                        ManagerEmployeeNumber = employee.ManagerEmployeeNumber,\n                        EmployeeNumber = employee.EmployeeNumber,\n                        IsActive = employee.Status == \"Active\",\n                        Status = employee.Status // Pass status\n                    }).ConfigureAwait(false);\n                }\n            }\n\n            // ⭐ Return map for success\n            return new Dictionary<string, object> {\n                { \"statusCode\", 200 },\n                { \"body\", new {\n                    message = $\"Successfully processed for {employee.EmployeeNumber} employee\"\n                }}\n            };\n        }\n        catch (ArgumentNullException e)\n        {\n            _log?.LogError(e, \"Invalid user detail - {ParamName}\", e.ParamName);\n            // ⭐ Return map for bad request\n            return new Dictionary<string, object> {\n                { \"statusCode\", 400 },\n                { \"body\", new { message = $\"Invalid user detail - {e.ParamName}\" } }\n            };\n        }\n        catch (Exception e) when (e is InvalidOperationException || e is HttpRequestException) // Catch specific operation errors\n        {\n            _log?.LogError(e, \"Specific error occurred - {Message}\", e.Message);\n            // ⭐ Return map for server error\n            return new Dictionary<string, object> {\n                { \"statusCode\", 500 },\n                { \"body\", new { message = $\"Specific error occurred - {e.Message}\" } }\n            };\n        }\n         catch (JsonException e) // Catch deserialization errors\n        {\n            _log?.LogError(e, \"JSON Deserialization error - {Message}\", e.Message);\n            return new Dictionary<string, object> {\n                { \"statusCode\", 400 },\n                { \"body\", new { message = $\"Invalid JSON format - {e.Message}\" } }\n            };\n        }\n        catch (Exception e) // General catch-all\n        {\n             _log?.LogError(e, \"An unhandled exception occurred - {Message}\", e.Message);\n            return new Dictionary<string, object> {\n                { \"statusCode\", 500 },\n                { \"body\", new { message = $\"An unhandled exception occurred - {e.Message}\" } }\n            };\n        }\n    }\n}\n\n// --- Script Execution ---\n\n// ⭐ FIX: requestBody is now a JSON Array (string)\nstring requestBody = @\"\n{\n    \"\"Email\"\": \"\"amdissanayaka@virtusa.com\"\",\n    \"\"EmployeeNumber\"\": \"\"8083721\"\",\n    \"\"FullName\"\": \"\"Amila Dissanayaka Test\"\",\n    \"\"ManagerEmployeeNumber\"\": \"\"5002615\"\",\n    \"\"Status\"\": \"\"Active\"\",\n    \"\"UserName\"\": \"\"amdissanayaka\"\"\n}\n\";\n\n\nvar processor = new EmployeeProcessor();\n// We pass 'null' for the logger, as it's not provided by the script host\nvar resultObject = await processor.mainFunction(requestBody, null);\n\nresultObject // Return value for the script\n\n",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1127,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_1Gh0X-1",
			"id":"n_3BCPt",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39713,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":4
}