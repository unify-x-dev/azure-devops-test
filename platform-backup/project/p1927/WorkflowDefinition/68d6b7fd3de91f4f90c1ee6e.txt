{
	"appsUsed":[
		
	],
	"createdTime":1758902269457,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_F6UGW",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tUSTr",
			"type":"next"
		},
		{
			"fromNodeId":"n_tUSTr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YoNGn",
			"type":"next"
		}
	],
	"id":"68d6b7fd3de91f4f90c1ee6e",
	"lastModifiedBy":39713,
	"lcName":"syncemployeehttptrigger",
	"modifiedTime":1761410957865,
	"name":"SyncEmployeeHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":961,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_0jUTW-1",
			"id":"n_F6UGW",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":35,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_0jUTW-1",
			"id":"n_tUSTr",
			"index":2,
			"inputs":{
				"code":"\nusing System;\nusing System.IO;\nusing System.Threading.Tasks;\n\n public abstract class BaseEntity<T>\n    {\n        public T Id { get; set; }\n    }\n\npublic class Account : BaseEntity<int>\n    {\n        public string Name { get; set; }\n        public string ReferenceNumber { get; set; }\n        public IReadOnlyCollection<EmployeeAccount> EmployeeAccounts { get; set; }\n    }\n\npublic class EmployeeAccount : BaseEntity<int>\n    {\n        public long EmployeeId { get; set; }\n        public string EmployeeNumber { get; set; }\n        public Employee Employee { get; set; }\n        public int AccountId { get; set; }\n        public Account Account { get; set; }\n        public string ReferenceNumber { get; set; }\n    }\n\n\npublic class Designation : BaseEntity<int>\n    {\n        public string Name { get; set; }\n        public string ReferenceNumber { get; set; }\n        public IReadOnlyCollection<EmployeeDesignation> EmployeeDesignations { get; set; }\n    }\n\n\npublic class EmployeeDesignation : BaseEntity<int>\n    {\n        public long EmployeeId { get; set; }\n        public string EmployeeNumber { get; set; }\n        public Employee Employee { get; set; }\n        public int DesignationId { get; set; }\n        public Designation Designation { get; set; }\n        public string ReferenceNumber { get; set; }\n    }\n\n\n\n public class Employee : BaseEntity<int>\n    {\n        public long EmployeeId { get; set; }\n        public string UserName { get; set; }\n        public string FullName { get; set; }\n        public string EmployeeNumber { get; set; }\n        public string Email { get; set; }\n        public bool IsActive { get; set; }\n        public string Status { get; set; }\n        public Employee Manager { get; set; }\n        public string ManagerEmployeeNumber { get; set; }\n        public long? ManagerId { get; set; }\n        public EmployeeDesignation EmployeeDesignation { get; set; }\n        public EmployeeAccount EmployeeAccount { get; set; }\n        public EmployeeBusinessUnit EmployeeBusinessUnit { get; set; }\n        public EmployeeLocation EmployeeLocation { get; set; }\n        public EmployeeTier EmployeeTier { get; set; }\n        private readonly List<EmployeeRepsActivity> _employeeRepsActivities = new List<EmployeeRepsActivity>();\n        public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities => _employeeRepsActivities.AsReadOnly();\n\n        public void AddRepsActivity(EmployeeRepsActivity employeeRepsActivity)\n        {\n            _employeeRepsActivities.Add(employeeRepsActivity);\n        }\n    }\n\n//  public class EmployeeService : IEmployeeService\n//     {\n        private readonly IAsyncRepository<Employee, int> _employeeRepository;\n        private const string DomainName = \"virtusa.com\";\n        public EmployeeService(IAsyncRepository<Employee, int> employeeRepository)\n        {\n            _employeeRepository = employeeRepository;\n        }\n        public async Task AddOrUpdateAsync(Employee employee)\n        {\n            // should not process when username is empty\n            ValidateEmployeeNumber(employee.EmployeeNumber);\n\n            if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n            {\n                // provided manager should exist prior to add or update employee\n                await ProcessManagerAsync(employee.ManagerEmployeeNumber);\n            }\n\n            //adding manager id to the employee object\n            await AddManagerIdAsync(employee);\n\n            // adding employee when employee not exist, updating employee if exist\n            await ProcessEmployeeAsync(employee);\n        }\n\n        private async Task AddManagerIdAsync(Employee employee)\n        {\n            if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n            {\n                var manager = await GetEmployeeAsync(employee.ManagerEmployeeNumber).ConfigureAwait(false);\n                employee.ManagerId = manager?.EmployeeId;\n            }\n        }\n        public async Task DeleteAsync(string employeeNumber)\n        {\n            // should not process when username is empty\n            ValidateEmployeeNumber(employeeNumber);\n\n            var isExistingEmployee = await IsExistingEmployee(employeeNumber);\n\n            if (isExistingEmployee)\n            {\n                var existingEmployee = await GetEmployeeAsync(employeeNumber);\n                var reporteesSpecification = new ReporteesByEmployeeNumberSpecification(employeeNumber);\n                var reportees = await _employeeRepository.ListAsync(reporteesSpecification).ConfigureAwait(false);\n\n                foreach (var reportee in reportees)\n                {\n                    reportee.ManagerId = null;\n                    await _employeeRepository.UpdateAsync(reportee).ConfigureAwait(false);\n                }\n\n                await _employeeRepository.DeleteAsync(existingEmployee).ConfigureAwait(false);\n            }\n        }\n\n         async Task ProcessManagerAsync(string managerEmployeeNumber)\n        {\n            // check whether manager is already exist\n            bool isExistingEmployee = await IsExistingEmployee(managerEmployeeNumber);\n            if (!isExistingEmployee)\n            {\n                // if manager not exist, add manager as inactive user with username\n                var manager = new Employee\n                {\n                    UserName = managerEmployeeNumber,\n                    EmployeeNumber = managerEmployeeNumber,\n                    IsActive = false\n                };\n\n                // format user with the username\n                await AddEmployeeAsync(manager).ConfigureAwait(false);\n            }\n        }\n\n         async Task ProcessEmployeeAsync(Employee employee)\n        {\n            // check whether user is already exist\n            bool isExistingEmployee = await IsExistingEmployee(employee.EmployeeNumber);\n            if (!isExistingEmployee)\n            {\n                await AddEmployeeAsync(employee).ConfigureAwait(false);\n            }\n            else\n            {\n                // get existing employee\n                var existingEmployee = await GetEmployeeAsync(employee.EmployeeNumber).ConfigureAwait(false);\n\n                // update details of the active employee\n                if (employee.IsActive)\n                {\n                    FormatEmployee(employee);\n                    existingEmployee.FullName = employee.FullName;\n                    existingEmployee.Email = employee.Email;\n                    existingEmployee.UserName = employee.UserName;\n                    existingEmployee.ManagerId = employee.ManagerId;\n\n                    existingEmployee.IsActive = employee.IsActive;\n                    await _employeeRepository.UpdateAsync(existingEmployee).ConfigureAwait(false);\n                }\n                else\n                {\n                    existingEmployee.Email = employee.Email;\n                    existingEmployee.UserName = employee.UserName;\n\n                    existingEmployee.IsActive = employee.IsActive;\n                    await _employeeRepository.UpdateAsync(existingEmployee).ConfigureAwait(false);\n                }\n            }\n        }\n\n         async Task AddEmployeeAsync(Employee employee)\n        {\n            FormatEmployee(employee);\n            await _employeeRepository.AddAsync(employee).ConfigureAwait(false);\n        }\n\n\n        /// <summary>Format missing information of the user.</summary>\n        /// <param name=\"employee\">The employee.</param>\n         void FormatEmployee(Employee employee)\n        {\n            employee.FullName = string.IsNullOrEmpty(employee.FullName) ? employee.EmployeeNumber : employee.FullName;\n            employee.Email = string.IsNullOrEmpty(employee.Email) ? $\"{employee.EmployeeNumber}@{DomainName}\" : employee.Email;\n        }\n\n         async Task<Employee> GetEmployeeAsync(string employeeNumber)\n        {\n            var specification = new EmployeeByEmployeeNumberSpecification(employeeNumber);\n            return await _employeeRepository.FirstOrDefaultAsync(specification).ConfigureAwait(false);\n        }\n\n        /// <summary>Validate username of the user to check whether it is a null or empty value.</summary>\n        /// <param name=\"userName\">UserName of the user.</param>\n        /// <exception cref=\"ArgumentException\">UserName</exception>\n         void ValidateEmployeeNumber(string employeeNumber)\n        {\n            if (string.IsNullOrEmpty(employeeNumber))\n            {\n                throw new ArgumentException(\"Value cannot be null or empty\", nameof(Employee.EmployeeNumber));\n            }\n        }\n\n         async Task<bool> IsExistingEmployee(string employeeNumber)\n        {\n            var specification = new EmployeeByEmployeeNumberSpecification(employeeNumber);\n            int employeeCount = await _employeeRepository.CountAsync(specification).ConfigureAwait(false);\n            return employeeCount == 1;\n        }\n\n        public async Task<long?> GetEmployeeIdByUsername(string userName)\n        {\n            if (userName == null)\n            {\n                return null;\n            }\n\n            var employee = await _employeeRepository.FirstOrDefaultAsync(new EmployeeByUserNameSpecification(userName));\n            return employee?.EmployeeId;\n        }\n    // }\n\n\n\nasync Task<Object> mainFunction(string requestBody){\n    var employee = JsonSerializer.Deserialize<Employee>(requestBody);\n    if (employee == null)\n    {\n        return new BadRequestObjectResult(\"Please pass valid employee to sync\");\n    }\n    if (string.IsNullOrEmpty(employee.EmployeeNumber))\n    {\n        return new BadRequestObjectResult(\"Invalid Employee Number\");\n    }\n    if (string.IsNullOrEmpty(employee.Status))\n    {\n        return new BadRequestObjectResult(\"Employee Status is empty\");\n    }\n    else\n    {\n        if (employee.Status == \"Cancelled\")\n        {\n            // This 'await' requires the function to be 'async'\n            await DeleteAsync(employee.EmployeeNumber);\n        }\n        else\n        {\n            // This 'await' also requires the function to be 'async'\n            await AddOrUpdateAsync(new Employee\n            {\n                UserName = employee.UserName,\n                Email = employee.Email,\n                FullName = employee.FullName,\n                ManagerEmployeeNumber = employee.ManagerEmployeeNumber,\n                EmployeeNumber = employee.EmployeeNumber,\n                IsActive = employee.Status == \"Active\"\n            });\n        }\n    }\n    return new OkObjectResult(new\n    {\n        message = $\"Successfully processed for {employee.UserName} employee\"\n    });\n}\n\n// How you call this async function depends on your environment.\n// In many C# script/hosting environments, you would 'await' it.\nvar resultObject = await mainFunction(requestBody); \n\nresultObject\n\n\n",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":912,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_0jUTW-1",
			"id":"n_YoNGn",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":308,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":5
}