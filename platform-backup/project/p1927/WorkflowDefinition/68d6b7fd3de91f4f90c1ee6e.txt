{
	"appsUsed":[
		
	],
	"createdTime":1758902269457,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761697946739,
		"deployedBy":39713,
		"deployedDefinitionId":"6901609a9688a922b64845ac",
		"status":"DEPLOYED",
		"version":8,
		"workflowVersion":26
	},
	"edges":[
		{
			"fromNodeId":"n_F6UGW",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tUSTr",
			"type":"next"
		},
		{
			"fromNodeId":"n_tUSTr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YoNGn",
			"type":"next"
		}
	],
	"id":"68d6b7fd3de91f4f90c1ee6e",
	"lastModifiedBy":39713,
	"lcName":"[virtu-empowerrepsschedulerfn]syncemployeehttptrigger",
	"modifiedTime":1761805165037,
	"name":"[virtu-emPowerRepsSchedulerFN]SyncEmployeeHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":961,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_0jUTW-1",
			"id":"n_F6UGW",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":35,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_0jUTW-1",
			"id":"n_tUSTr",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"statusCode":{
							"type":"integer",
							"title":"Status Code"
						},
						"body":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Body"
						}
					}
				},
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Net.Http;\nusing System.Text;\n\npublic enum ComparisonGroups : short\n{\n    None = 0,\n    Tier = 1 << 0,\n    Designation = 1 << 1,\n    Location = 1 << 2,\n    BusinessUnit = 1 << 3\n}\n\npublic class EvaluationCategory : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public int Weightage { get; set; }\n    public string ImageName { get; set; }\n    public short DefaultRating { get; set; }\n    public ComparisonGroups ComparisonGroups { get; set; }\n    public IReadOnlyCollection<RepsActivity> RepsActivities { get; set; }\n}\n\npublic enum CalculationStrategy\n{\n    None = 0,\n    IndividualMetric = 1,\n    DeliveryProjectMetric = 2\n}\n\npublic enum CappingStrategy : short\n{\n    None = 0,\n    ActivityCountBased = 1,\n    AverageBased = 2,\n    RevisedScoreBased = 3,\n    ScoreBased = 4\n}\n\npublic class CapLimit : BaseEntity<int>\n{\n    public int RepsActivityId { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public short Limit { get; set; }\n    public short Frequency { get; set; }\n    public CappingStrategy CappingStrategy { get; set; }\n}\n\npublic class RepsActivity : BaseEntity<int>\n{\n    public string ActivityName { get; set; }\n    public string Description { get; set; }\n    public int Points { get; set; }\n    public bool IsActive { get; set; }\n    public string FocusArea { get; set; }\n    public string RepsSize { get; set; }\n    public int? CapLimitId { get; set; }\n    public CapLimit CapLimit { get; set; }\n    public CalculationStrategy CalculationStrategy { get; set; }\n    public EvaluationCategory EvaluationCategory { get; set; }\n    public int EvaluationCategoryId { get; set; }\n    public bool ShouldAggregate { get; set; }\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities { get; set; }\n}\n\npublic class EmployeeRepsActivity : BaseEntity<long>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public int RepsActivityId { get; set; }\n    public int Points { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public string ReferenceNumber { get; set; } // need to revisit\n    public RepsActivity RepsActivity { get; set; }\n    public Employee Employee { get; set; }\n    public bool IsAggregated { get; set; }\n}\n\npublic class Tier : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeTier> EmployeeTiers { get; set; }\n}\n\npublic abstract class BaseEntity<T>\n{\n    public T Id { get; set; }\n}\n\npublic class Account : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeAccount> EmployeeAccounts { get; set; }\n}\n\npublic class EmployeeAccount : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int AccountId { get; set; }\n    public Account Account { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Designation : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeDesignation> EmployeeDesignations { get; set; }\n}\n\npublic class EmployeeDesignation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int DesignationId { get; set; }\n    public Designation Designation { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class BusinessUnit : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeBusinessUnit> EmployeeBusinessUnits { get; set; }\n}\n\npublic class EmployeeBusinessUnit : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int BusinessUnitId { get; set; }\n    public BusinessUnit BusinessUnit { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class EmployeeTier : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int TierId { get; set; }\n    public Tier Tier { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Location : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeLocation> EmployeeLocations { get; set; }\n}\n\npublic class EmployeeLocation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int LocationId { get; set; }\n    public Location Location { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Employee : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string? UserName { get; set; } // Nullable if it can be missing\n    public string? FullName { get; set; } // Nullable if it can be missing\n    public string EmployeeNumber { get; set; } // Assuming this is non-nullable key\n    public string? Email { get; set; } // Nullable if it can be missing\n    public bool IsActive { get; set; }\n    public string? Status { get; set; } // Nullable if it can be missing\n    public Employee? Manager { get; set; } // Nullable for top-level managers\n    public string? ManagerEmployeeNumber { get; set; } // Nullable for top-level managers\n    public long? ManagerId { get; set; } // Nullable for top-level managers\n    public EmployeeDesignation? EmployeeDesignation { get; set; } // Nullable if optional\n    public EmployeeAccount? EmployeeAccount { get; set; } // Nullable if optional\n    public EmployeeBusinessUnit? EmployeeBusinessUnit { get; set; } // Nullable if optional\n    public EmployeeLocation? EmployeeLocation { get; set; } // Nullable if optional\n    public EmployeeTier? EmployeeTier { get; set; } // Nullable if optional\n\n    // Note: Deserializing into a readonly List field might require adjustments\n    // Making it a property with a private setter is often safer.\n    private List<EmployeeRepsActivity> _employeeRepsActivities = new List<EmployeeRepsActivity>();\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities => _employeeRepsActivities.AsReadOnly();\n\n    // Internal method to allow adding if needed, potentially called during processing logic\n    internal void AddActivity(EmployeeRepsActivity activity)\n    {\n         if (_employeeRepsActivities == null)\n         {\n             _employeeRepsActivities = new List<EmployeeRepsActivity>();\n         }\n        _employeeRepsActivities.Add(activity);\n    }\n}\n\n\n// --- Logic Class ---\n\npublic class EmployeeProcessor\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/EmployeeRepoUrl\"\";\n    private const string DomainName = \"virtusa.com\";\n\n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n        // Consider adding other options like handling null values if needed\n        // DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull\n    };\n\n    // --- DB Interaction Method ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\"; // Default to empty object\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n             Console.WriteLine($\"JSON Serialization Error (Request - {operationName}): {e.Message} | Payload: {payload}\");\n             throw; // Re-throw serialization errors immediately\n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            // Console.WriteLine($\"DEBUG: Sending {operationName} with payload: {jsonRequestBody}\"); // Optional debug log\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n            // Console.WriteLine($\"DEBUG: Received status {response.StatusCode}, content: {responseContent}\"); // Optional debug log\n\n            // Check for non-success status codes specifically\n            if (!response.IsSuccessStatusCode)\n            {\n                 Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n                 // Consider how to handle specific non-success codes (e.g., 404 Not Found might return default)\n                 // For now, throw an exception for any non-success to indicate failure clearly.\n                 response.EnsureSuccessStatusCode(); // This will throw HttpRequestException\n            }\n\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") // Treat empty JSON object as null/default\n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         // Check if the target type is primitive (like int, bool, long) and the JSON element reflects that\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             // Attempt direct deserialization for primitives/string from the element\n                             try {\n                                return resultElement.Deserialize<TResponse>(jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                                return default;\n                             }\n                         }\n                         else // Assume complex object\n                         {\n                            return resultElement.Deserialize<TResponse>(jsonOptions);\n                         }\n                     }\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                        // Check for primitives at the root as well\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             try {\n                                return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                                return default;\n                             }\n                         }\n                         else\n                         {\n                            return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                         }\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n                return default; // Return default on deserialization failure\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n            // Depending on the operation, maybe return default or false instead of throwing\n            // For now, re-throwing signals a clear failure.\n            throw;\n        }\n        // Removed redundant JsonException catch here, handled in request serialization try-catch\n        catch (Exception e) // Catch unexpected errors\n        {\n             Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n             throw;\n        }\n    }\n\n    // --- Employee Service Logic ---\n\n    public async Task AddOrUpdateAsync(Employee employee)\n    {\n        if (employee == null || string.IsNullOrEmpty(employee.EmployeeNumber))\n        {\n             throw new ArgumentException(\"Employee object or EmployeeNumber cannot be null/empty for AddOrUpdate.\");\n        }\n        ValidateEmployeeNumber(employee.EmployeeNumber); // Still validate format if needed\n\n        if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n        {\n            // Ensure manager exists or create inactive stub\n            await ProcessManagerAsync(employee.ManagerEmployeeNumber);\n        }\n\n        // Set ManagerId based on ManagerEmployeeNumber\n        await AddManagerIdAsync(employee);\n        // Process the employee (add or update)\n        await ProcessEmployeeAsync(employee);\n    }\n\n    private async Task AddManagerIdAsync(Employee employee)\n    {\n         if (employee == null) return; // Safety check\n        // Reset ManagerId initially\n        employee.ManagerId = null;\n        if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n        {\n            var manager = await GetEmployeeAsync(employee.ManagerEmployeeNumber).ConfigureAwait(false);\n            employee.ManagerId = manager?.EmployeeId; // Assign if manager found, otherwise stays null\n        }\n    }\n\n    public async Task DeleteAsync(string employeeNumber)\n    {\n        ValidateEmployeeNumber(employeeNumber);\n\n        var existingEmployee = await GetEmployeeAsync(employeeNumber); // Check existence by trying to get it\n\n        if (existingEmployee != null)\n        {\n            // Get reportees by querying where ManagerEmployeeNumber matches\n            // Assuming payload requires a \"Filter\" or similar structure\n            var reporteePayload = new Dictionary<string, object>\n            {\n                { \"Filter\", new Dictionary<string, object> { { \"ManagerEmployeeNumber\", employeeNumber } } }\n                // Adjust payload structure based on API expectation for ListAsync filters\n            };\n            List<Employee>? reportees = await CallDb<List<Employee>>(\"ListAsync\", reporteePayload);\n\n            if (reportees != null)\n            {\n                foreach (var reportee in reportees)\n                {\n                    reportee.ManagerId = null;\n                    reportee.ManagerEmployeeNumber = null; // Also clear ManagerEmployeeNumber link\n                    // Update each reportee\n                    await CallDb<object>(\"UpdateAsync\", reportee);\n                }\n            }\n\n            // Delete the original employee\n            // Payload might just need the key, or the full object. Assuming key is sufficient.\n            var deletePayload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n            await CallDb<object>(\"DeleteAsync\", deletePayload);\n        }\n         else\n         {\n              Console.WriteLine($\"Employee {employeeNumber} not found. Delete operation skipped.\");\n         }\n    }\n\n    private async Task ProcessManagerAsync(string managerEmployeeNumber)\n    {\n         if (string.IsNullOrEmpty(managerEmployeeNumber)) return; // No manager to process\n\n        bool isExistingEmployee = await IsExistingEmployee(managerEmployeeNumber);\n        if (!isExistingEmployee)\n        {\n            Console.WriteLine($\"Manager {managerEmployeeNumber} not found, creating inactive stub.\");\n            var manager = new Employee\n            {\n                // UserName might need to be derived or handled differently for stubs\n                UserName = managerEmployeeNumber, // Placeholder UserName\n                EmployeeNumber = managerEmployeeNumber,\n                IsActive = false // Add as inactive initially\n            };\n            FormatEmployee(manager); // Ensure Email/FullName are set minimally\n            await AddEmployeeAsync(manager).ConfigureAwait(false);\n        }\n    }\n\n    private async Task ProcessEmployeeAsync(Employee employee)\n    {\n         if (employee == null || string.IsNullOrEmpty(employee.EmployeeNumber)) return; // Safety check\n\n        var existingEmployee = await GetEmployeeAsync(employee.EmployeeNumber).ConfigureAwait(false);\n\n        if (existingEmployee == null) // Employee doesn't exist, Add\n        {\n            Console.WriteLine($\"Employee {employee.EmployeeNumber} not found, adding new record.\");\n            FormatEmployee(employee); // Ensure derived fields are set\n            employee.IsActive = employee.Status == \"Active\"; // Ensure IsActive matches Status\n            await AddEmployeeAsync(employee).ConfigureAwait(false);\n        }\n        else // Employee exists, Update\n        {\n             Console.WriteLine($\"Employee {employee.EmployeeNumber} found, updating record.\");\n            // Merge updates onto existingEmployee\n            FormatEmployee(employee); // Format incoming data first (for FullName/Email if needed)\n\n            // Update only specific fields based on incoming data\n            existingEmployee.FullName = employee.FullName ?? existingEmployee.FullName; // Keep existing if null\n            existingEmployee.Email = employee.Email ?? existingEmployee.Email; // Keep existing if null\n            existingEmployee.UserName = employee.UserName ?? existingEmployee.UserName; // Keep existing if null\n            existingEmployee.ManagerId = employee.ManagerId; // Update ManagerId (set in AddManagerIdAsync)\n            existingEmployee.ManagerEmployeeNumber = employee.ManagerEmployeeNumber; // Update Manager link\n            existingEmployee.IsActive = employee.Status == \"Active\"; // Update IsActive based on incoming Status\n            existingEmployee.Status = employee.Status; // Update Status field itself\n\n            // TODO: Consider how to handle other fields like Designation, Account etc.\n            // If they are part of the input 'employee', should they overwrite existingEmployee's values?\n            // existingEmployee.EmployeeDesignation = employee.EmployeeDesignation ?? existingEmployee.EmployeeDesignation; // Example\n\n            await CallDb<object>(\"UpdateAsync\", existingEmployee); // Send the merged/updated object\n        }\n    }\n\n    private async Task AddEmployeeAsync(Employee employee)\n    {\n         if (employee == null) return; // Safety check\n        FormatEmployee(employee); // Ensure derived fields are set\n        // Call AddAsync via CallDb, passing the employee object\n        await CallDb<Employee>(\"AddAsync\", employee); // Assuming AddAsync might return the created employee\n    }\n\n    private void FormatEmployee(Employee employee)\n    {\n        if (employee == null) return; // Safety check\n        // Use EmployeeNumber if FullName is missing\n        employee.FullName = string.IsNullOrEmpty(employee.FullName) ? employee.EmployeeNumber : employee.FullName;\n         // Construct email if missing, ensure EmployeeNumber is not null first\n        employee.Email = string.IsNullOrEmpty(employee.Email) && !string.IsNullOrEmpty(employee.EmployeeNumber)\n            ? $\"{employee.EmployeeNumber}@{DomainName}\"\n            : employee.Email;\n    }\n\n    private async Task<Employee?> GetEmployeeAsync(string employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber)) return null; // Cannot get employee without number\n        // Payload likely needs to specify the key field for lookup\n        var payload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n        // Call FirstOrDefaultAsync via CallDb, expecting an Employee object back\n        return await CallDb<Employee>(\"FirstOrDefaultAsync\", payload);\n    }\n\n    private void ValidateEmployeeNumber(string employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(Employee.EmployeeNumber));\n        }\n        // Add more specific validation if needed (e.g., regex for format)\n    }\n\n    public async Task<bool> IsExistingEmployee(string employeeNumber)\n    {\n         if (string.IsNullOrEmpty(employeeNumber)) return false; // Cannot exist without number\n        // Payload for CountAsync likely needs the filter criteria\n        var payloadMap = new Dictionary<string, object>\n        {\n            { \"EmployeeNumber\", employeeNumber }\n            // Adjust payload based on API expectation for CountAsync filters\n        };\n        try\n        {\n            // Expecting the API to return an integer count\n            int? employeeCount = await CallDb<int>(\"CountAsync\", payloadMap);\n            return employeeCount.HasValue && employeeCount.Value > 0; // Check if count > 0, not just == 1\n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine($\"Error checking existing employee ({employeeNumber}): {ex.Message}\");\n            return false; // Safest default on error\n        }\n    }\n\n    public async Task<long?> GetEmployeeIdByUsername(string userName)\n    {\n        if (string.IsNullOrEmpty(userName))\n        {\n            return null;\n        }\n        // Payload likely needs to specify the key field for lookup\n        var payload = new Dictionary<string, object> { { \"UserName\", userName } };\n        var employee = await CallDb<Employee>(\"FirstOrDefaultAsync\", payload);\n        return employee?.EmployeeId;\n    }\n\n    // --- Main Script Function ---\n    public async Task<IDictionary<string, object>> mainFunction(string requestBody)\n    {\n        Employee? employee = null;\n        try {\n            // Use specific options for potentially missing properties if needed\n            employee = JsonSerializer.Deserialize<Employee>(requestBody, jsonOptions);\n        } catch (JsonException ex) {\n             Console.WriteLine($\"Error deserializing request body: {ex.Message}\");\n             return new Dictionary<string, object>\n             {\n                 { \"statusCode\", 400 },\n                 { \"body\", $\"Invalid JSON input: {ex.Message}\" }\n             };\n        }\n\n        // --- Input Validation ---\n        if (employee == null)\n        {\n            return new Dictionary<string, object>\n            { { \"statusCode\", 400 }, { \"body\", \"Please pass valid employee JSON to sync\" } };\n        }\n        if (string.IsNullOrEmpty(employee.EmployeeNumber))\n        {\n            return new Dictionary<string, object>\n            { { \"statusCode\", 400 }, { \"body\", \"Employee Number is required and cannot be empty\" } };\n        }\n        if (string.IsNullOrEmpty(employee.Status))\n        {\n            return new Dictionary<string, object>\n            { { \"statusCode\", 400 }, { \"body\", \"Employee Status is required and cannot be empty\" } };\n        }\n         // Add validation for other required fields if necessary\n\n        // --- Processing Logic ---\n        try\n        {\n            if (employee.Status.Equals(\"Cancelled\", StringComparison.OrdinalIgnoreCase)) // Case-insensitive compare\n            {\n                 Console.WriteLine($\"Processing Delete for Employee: {employee.EmployeeNumber}\");\n                await DeleteAsync(employee.EmployeeNumber);\n            }\n            else // Includes \"Active\" and potentially other statuses\n            {\n                 Console.WriteLine($\"Processing Add/Update for Employee: {employee.EmployeeNumber} with Status: {employee.Status}\");\n                // No need to create employeeToProcess, just pass the deserialized 'employee'\n                // Ensure IsActive is set correctly based on Status before calling AddOrUpdateAsync\n                employee.IsActive = employee.Status.Equals(\"Active\", StringComparison.OrdinalIgnoreCase);\n                await AddOrUpdateAsync(employee);\n            }\n\n            var successBody = new\n            {\n                message = $\"Successfully processed for employee {employee.EmployeeNumber}\"\n            };\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 200 },\n                { \"body\", successBody }\n            };\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error during processing employee {employee?.EmployeeNumber ?? \"UNKNOWN\"}: {ex.Message}\");\n             // Optionally log stack trace ex.StackTrace\n             return new Dictionary<string, object>\n            {\n                { \"statusCode\", 500 },\n                { \"body\", $\"Internal server error processing employee {employee?.EmployeeNumber ?? \"UNKNOWN\"}: {ex.Message}\" }\n            };\n        }\n    }\n}\n\n// --- Script Execution ---\n// This part is outside the class and will run when the script executes\n\nstring requestBody = @\"{\n  \"\"Email\"\": \"\"susheeln@invalid.virtusa.com\"\",\n  \"\"EmployeeNumber\"\": \"\"8028960\"\",\n  \"\"FullName\"\": \"\"Susheel Narlawar_PERF02\"\",\n  \"\"ManagerEmployeeNumber\"\": \"\"8030855\"\",\n  \"\"Status\"\": \"\"Active\"\",\n  \"\"UserName\"\": \"\"susheeln\"\"\n}\";\n\n// Need an instance of EmployeeProcessor to call mainFunction\nvar processor = new EmployeeProcessor();\n// 'await' must be used in an async context, assuming the script host handles top-level await\nvar resultObject = await processor.mainFunction(requestBody);\n\nresultObject \n\n",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":912,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_0jUTW-1",
			"id":"n_YoNGn",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"body":{
					"result":"{{ n_tUSTr.outputs.result }}"
				},
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":308,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":28
}