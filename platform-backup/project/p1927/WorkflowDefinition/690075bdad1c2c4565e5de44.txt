{
	"appsUsed":[
		
	],
	"createdTime":1761637821357,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761813312736,
		"deployedBy":39714,
		"deployedDefinitionId":"69032340501d855ce6474a3d",
		"status":"DEPLOYED",
		"version":2,
		"workflowVersion":6
	},
	"edges":[
		{
			"fromNodeId":"n_WmBtH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rh0oF",
			"type":"next"
		},
		{
			"fromNodeId":"n_rh0oF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nXgwV",
			"type":"next"
		}
	],
	"id":"690075bdad1c2c4565e5de44",
	"lastModifiedBy":46217,
	"lcName":"[virtu-empowerattendancefn]->getconfirmlophttptrigger",
	"modifiedTime":1761984467832,
	"name":"[virtu-emPowerAttendanceFN]->GetCOnfirmLOPHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":965,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_WmBtH",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"Authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_rh0oF",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Linq;\n\n// ----- Local Models -----\n\npublic class AppConfig\n{\n    public string TokenOcp { get; set; }\n    public string TokenApi { get; set; }\n    public string TokenClientId { get; set; }\n    public string TokenClientSecret { get; set; }\n    public string TokenScope { get; set; }\n\n    public string ConfirmLOPOcpKey { get; set; }\n    public string ConfirmLOPBaseUrl { get; set; }\n\n    public AppConfig(string tokenOcp, string tokenApi, string tokenClientId, string tokenClientSecret, string tokenScope,\n                     string confirmLOPOcpKey, string confirmLOPBaseUrl)\n    {\n        TokenOcp = tokenOcp;\n        TokenApi = tokenApi;\n        TokenClientId = tokenClientId;\n        TokenClientSecret = tokenClientSecret;\n        TokenScope = tokenScope;\n        ConfirmLOPOcpKey = confirmLOPOcpKey;\n        ConfirmLOPBaseUrl = confirmLOPBaseUrl;\n    }\n}\n\npublic class LocalHttpRequest\n{\n    public Dictionary<string, string> Headers { get; set; } = new();\n    public Dictionary<string, string> Query { get; set; } = new();\n\n    public LocalHttpRequest(Dictionary<string, string> headers, Dictionary<string, string> query)\n    {\n        Headers = headers;\n        Query = query;\n    }\n}\n\n// ----- Services -----\n\npublic class AuthService\n{\n    public string GetUserFromToken(LocalHttpRequest req)\n    {\n        if (!req.Headers.TryGetValue(\"Authorization\", out var authHeader) || string.IsNullOrEmpty(authHeader))\n            return null;\n\n        if (!authHeader.StartsWith(\"Bearer \", StringComparison.OrdinalIgnoreCase))\n            return null;\n\n        string token = authHeader.Substring(\"Bearer \".Length);\n\n        try\n        {\n            var parts = token.Split('.');\n            if (parts.Length != 3) return null;\n\n            string payload = parts[1].PadRight(parts[1].Length + (4 - parts[1].Length % 4) % 4, '=')\n                                     .Replace('-', '+').Replace('_', '/');\n\n            var bytes = Convert.FromBase64String(payload);\n            var jsonPayload = Encoding.UTF8.GetString(bytes);\n\n            var doc = JsonDocument.Parse(jsonPayload);\n            if (doc.RootElement.TryGetProperty(\"unique_name\", out var uniqueName))\n                return uniqueName.GetString();\n\n            return null;\n        }\n        catch\n        {\n            return null;\n        }\n    }\n\n    public async Task<bool> IsUserReportsToTokenUser(string userName, string personNumber, AppConfig config, LocalHttpRequest req)\n    {\n        // For simplicity, here we just check if the token user matches the requested user\n        var tokenUser = GetUserFromToken(req);\n        if (tokenUser == null) return false;\n\n        return tokenUser.Split('@')[0].Equals(userName.Split('@')[0], StringComparison.OrdinalIgnoreCase);\n    }\n}\n\npublic class ConfirmLOPService\n{\n    private readonly AppConfig _config;\n\n    public ConfirmLOPService(AppConfig config)\n    {\n        _config = config;\n    }\n\n    public async Task<string> GetToken(LocalHttpRequest req)\n    {\n        HttpClient httpClient = new HttpClient();\n\n        httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", _config.TokenOcp);\n\n        var requestBody = $\"client_id={_config.TokenClientId}&grant_type=client_credentials&client_secret={_config.TokenClientSecret}&scope={_config.TokenScope}\";\n        var content = new StringContent(requestBody, Encoding.UTF8, \"application/x-www-form-urlencoded\");\n\n        var response = await httpClient.PostAsync(_config.TokenApi, content);\n        if (!response.IsSuccessStatusCode) return null;\n\n        var responseContent = await response.Content.ReadAsStringAsync();\n        var doc = JsonDocument.Parse(responseContent);\n\n        if (doc.RootElement.TryGetProperty(\"access_token\", out var token))\n            return token.GetString();\n\n        return null;\n    }\n\n    public async Task<HttpResponseMessage> GetEmployeeConfirmLOPData(string userName, string startDate, string endDate, LocalHttpRequest req)\n    {\n        HttpClient httpClient = new HttpClient();\n\n        string apiToken = await GetToken(req);\n        if (apiToken == null) throw new Exception(\"Unable to get access token\");\n\n        string apiUrl = $\"{_config.ConfirmLOPBaseUrl}?$filter=xxx_name eq '{userName}' and (xxx_lopdate ge {startDate} and xxx_lopdate le {endDate})\";\n\n        httpClient.DefaultRequestHeaders.Remove(\"Authorization\");\n        httpClient.DefaultRequestHeaders.Add(\"Authorization\", $\"Bearer {apiToken}\");\n        httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", _config.ConfirmLOPOcpKey);\n        httpClient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n\n        return await httpClient.GetAsync(apiUrl);\n    }\n}\n\n// ----- Main Function -----\n\npublic async Task<IDictionary<string, object>> GetConfirmLOPMain(LocalHttpRequest req, AppConfig config)\n{\n    var response = new Dictionary<string, object>();\n    var _authService = new AuthService();\n    var _confirmLOPService = new ConfirmLOPService(config);\n\n    try\n    {\n        string userName = req.Query.ContainsKey(\"userName\") ? req.Query[\"userName\"] : null;\n        string startDate = req.Query.ContainsKey(\"startDate\") ? req.Query[\"startDate\"] : null;\n        string endDate = req.Query.ContainsKey(\"endDate\") ? req.Query[\"endDate\"] : null;\n\n        if (string.IsNullOrEmpty(userName))\n        {\n            response[\"statusCode\"] = 400;\n            response[\"body\"] = \"Invalid UserName\";\n            return response;\n        }\n\n        if (string.IsNullOrEmpty(startDate))\n        {\n            response[\"statusCode\"] = 400;\n            response[\"body\"] = \"Invalid startDate\";\n            return response;\n        }\n\n        if (string.IsNullOrEmpty(endDate))\n        {\n            response[\"statusCode\"] = 400;\n            response[\"body\"] = \"Invalid endDate\";\n            return response;\n        }\n\n        string apiToken = req.Headers.ContainsKey(\"Authorization\") ? req.Headers[\"Authorization\"] : null;\n        if (string.IsNullOrEmpty(apiToken) || !apiToken.StartsWith(\"Bearer \", StringComparison.OrdinalIgnoreCase))\n        {\n            response[\"statusCode\"] = 401;\n            response[\"body\"] = \"Unauthorized. Access token is missing or invalid.\";\n            return response;\n        }\n\n        if (!(await _authService.IsUserReportsToTokenUser(userName, \"\", config, req)))\n        {\n            response[\"statusCode\"] = 403;\n            response[\"body\"] = \"Unauthorized. Access Denied for Requested User.\";\n            return response;\n        }\n\n        var apiResponse = await _confirmLOPService.GetEmployeeConfirmLOPData(userName, startDate, endDate, req);\n\n        if (apiResponse.IsSuccessStatusCode)\n        {\n            string responseBody = await apiResponse.Content.ReadAsStringAsync();\n            response[\"statusCode\"] = (int)apiResponse.StatusCode;\n            response[\"body\"] = responseBody;\n            return response;\n        }\n        else\n        {\n            response[\"statusCode\"] = 400;\n            response[\"body\"] = $\"API call failed with status code: {apiResponse.StatusCode}\";\n            return response;\n        }\n    }\n    catch (Exception e)\n    {\n        response[\"statusCode\"] = 500;\n        response[\"body\"] = $\"Internal Server Error: {e.Message}\";\n        return response;\n    }\n}\n\n// ----- Example Input -----\n\nvar queryParams = new Dictionary<string, string>\n{\n    { \"userName\", \"anshulkumar@virtusa.com\" },\n    { \"startDate\", \"2025-08-01\" },\n    { \"endDate\", \"2025-08-31\" }\n};\n\nvar headers = new Dictionary<string, string>\n{\n    { \"Authorization\", \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIn...\" } // Use a valid token\n};\n\nvar req = new LocalHttpRequest(headers, queryParams);\n\nvar config = new AppConfig(\n    tokenOcp: \"ffea0077e81d4b8e86fad8384cced7f8\",\n    tokenApi: \"https://virtueagintegrationsapim-dev2.azure-api.net/accesstokenapi/v1/v2.0/token\",\n    tokenClientId: \"dec4789f-9b46-42b8-9c6d-9cda0b0a4a7e\",\n    tokenClientSecret: \"E[62Rzi5WRzI]8[v[iv3bRR5mb2RQDpn\",\n    tokenScope: \"https://eagdev2.api.crm5.dynamics.com/.default\",\n    confirmLOPOcpKey: \"fd62d08d87c74a23b1b48e493dbcb72b\",\n    confirmLOPBaseUrl: \"https://virtueagintegrationsapim.azure-api.net/confirm-lop-api/v1/confirmLOP\"\n);\n\n// ----- Call the main function -----\n\nvar result = await GetConfirmLOPMain(req, config);\nresult",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":916,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_nXgwV",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39714,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":9
}