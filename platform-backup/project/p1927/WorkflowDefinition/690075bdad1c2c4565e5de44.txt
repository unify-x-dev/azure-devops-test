{
	"appsUsed":[
		
	],
	"createdTime":1761637821357,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_WmBtH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Sqk3w",
			"type":"next"
		},
		{
			"fromNodeId":"n_Sqk3w",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nXgwV",
			"type":"next"
		}
	],
	"id":"690075bdad1c2c4565e5de44",
	"lastModifiedBy":39714,
	"lcName":"[virtu-empowerattendancefn]->getconfirmlophttptrigger",
	"modifiedTime":1761645561254,
	"name":"[virtu-emPowerAttendanceFN]->GetCOnfirmLOPHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":965,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_WmBtH",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"Authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"queryParams":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"employeeNumber":{
								"type":"string",
								"title":"Employee Number"
							},
							"startDate":{
								"type":"string",
								"title":"Start Date"
							},
							"endDate":{
								"type":"string",
								"title":"End Date"
							}
						}
					},
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":39,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_Sqk3w",
			"index":2,
			"inputs":{
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"employeeNumber":{
							"type":"string",
							"title":"employeeNumber"
						},
						"startDate":{
							"type":"string",
							"title":"startDate"
						},
						"endDate":{
							"type":"string",
							"title":"endDate"
						},
						"Authorization":{
							"type":"string",
							"title":"Authorization"
						}
					}
				},
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System.Net.Http;\nusing System.Web.Http;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.Extensions.Configuration;\nusing System.IdentityModel.Tokens.Jwt;\nusing System.Text;\nusing attendanceAPI.ApplicationCore.Models;\n\n                try{\n                log.LogInformation(\"Start processing the request\");\n\n                string userName = userName;\n                string personNumber = personNumber;\n\n                if (string.IsNullOrEmpty(userName))\n                {\n                    return new BadRequestObjectResult(\"Invalid UserName\");\n                }\n\n                if (string.IsNullOrEmpty(personNumber))\n                {\n                    return new BadRequestObjectResult(\"Invalid PersonNumber\");\n                }\n\n                string apiToken = Authorization;\n\n                if (string.IsNullOrEmpty(apiToken) || !apiToken.StartsWith(\"Bearer \", StringComparison.OrdinalIgnoreCase))\n                {\n                    return new UnauthorizedObjectResult($\"Unauthorized. Access token is missing or invalid.\");\n                }\n\n                if (!(await IsUserReportsToTokenUser(userName, personNumber, context)))\n                {\n                    return new UnauthorizedObjectResult($\"Unauthorized. User does not report to the token user.\");\n                }\n\n                // Add your confirm LOP logic here\n                var resultObject = new OkObjectResult(\"LOP Confirmed Successfully\");\n\n                return resultObject;\n            }\n            catch (JsonException e)\n            {\n                log.LogError(e, $\"Error message: {e.Message}\");\n                return new BadRequestObjectResult(\"Invalid inputs\");\n            }\n            catch (Exception e)\n            {\n                log.LogError(e, $\"Error message: {e.Message}\");\n                return new InternalServerErrorResult();\n            }\n\n        #region Auth Methods\n\n        private async Task<bool> IsUserReportsToTokenUser(string UserName, string PersonNumber, ExecutionContext context)\n        {\n            HttpClient httpClient = new HttpClient();\n\n            var config = new ConfigurationBuilder()\n                .SetBasePath(context.FunctionAppDirectory)\n                .AddJsonFile(\"local.settings.json\", optional: true, reloadOnChange: true)\n                .AddEnvironmentVariables()\n                .Build();\n\n            var empNumber = await GetEmployeeNumber(config);\n\n            string workerOcpKey = config[\"workerOcpKey\"];\n            string apiBaseUrl = config[\"AttendanceSummaryApiBaseUrl\"];\n\n            string apiUrl = $\"{apiBaseUrl}/emplyoees-api/v1/employees/{empNumber}/reportees\";\n\n            string apiToken = Authorization;\n\n            httpClient.DefaultRequestHeaders.Remove(\"Authorization\");\n            httpClient.DefaultRequestHeaders.Add(\"Authorization\", apiToken);\n            httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", workerOcpKey);\n\n            HttpResponseMessage response = await httpClient.GetAsync(apiUrl);\n\n            if (response.IsSuccessStatusCode)\n            {\n                var responseContent = await response.Content.ReadAsStringAsync();\n                dynamic data = Newtonsoft.Json.JsonConvert.DeserializeObject(responseContent);\n\n                List<Reportee> reportees = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Reportee>>(responseContent);\n\n                var mappedData = reportees?\n                    .Where(obj => obj.managerType == \"LINE_MANAGER\" && obj.emailAddresses?.Any(itm => itm.emailType == \"W1\") == true)\n                    .Select(obj => new\n                    {\n                        personNumber = obj.employeeNumber,\n                        lineManager = obj.managerType,\n                        emailAddress = obj.emailAddresses?.FirstOrDefault(itm => itm.emailType == \"W1\")?.emailAddress\n                    }).ToArray();\n\n                bool userExists = mappedData.Any(item =>\n                    item.personNumber == PersonNumber || item?.emailAddress?.Split('@')[0].ToLower() == UserName.ToLower()\n                );\n                return userExists;\n            }\n            else\n            {\n                return false;\n            }\n        }\n\n        private string GetUserFromToken()\n        {\n            string authorizationHeader = Authorization;\n\n            if (string.IsNullOrEmpty(authorizationHeader) || !authorizationHeader.StartsWith(\"Bearer \"))\n            {\n                return null;\n            }\n\n            string token = authorizationHeader.Substring(\"Bearer \".Length);\n\n            try\n            {\n                var handler = new JwtSecurityTokenHandler();\n                var jwtToken = handler.ReadJwtToken(token);\n\n                var uniqueNameClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == \"unique_name\");\n\n                if (uniqueNameClaim != null)\n                {\n                    return uniqueNameClaim.Value;\n                }\n                else\n                {\n                    return null;\n                }\n            }\n            catch (Exception ex)\n            {\n                return ex.Message;\n            }\n        }\n\n        private async Task<string> GetEmployeeNumber(IConfigurationRoot config)\n        {\n            HttpClient httpClient = new HttpClient();\n\n            var userEmail = GetUserFromToken();\n\n            string workerOcpKey = config[\"workerOcpKey\"];\n            string apiBaseUrl = config[\"AttendanceSummaryApiBaseUrl\"];\n\n            string apiUrl = $\"{apiBaseUrl}/v5-workers-api/v1/workers?onlyData=true&limit=400&q=(UPPER(emails.EmailAddress)='{userEmail.ToUpper()}' and emails.EmailType='W1')\";\n\n            string apiToken = Authorization;\n\n            httpClient.DefaultRequestHeaders.Remove(\"Authorization\");\n            httpClient.DefaultRequestHeaders.Add(\"Authorization\", apiToken);\n            httpClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", workerOcpKey);\n            httpClient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n            httpClient.DefaultRequestHeaders.Add(\"REST-Framework-Version\", \"4\");\n\n            HttpResponseMessage response = await httpClient.GetAsync(apiUrl);\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n\n            if (response.IsSuccessStatusCode)\n            {\n                dynamic data = Newtonsoft.Json.JsonConvert.DeserializeObject(responseContent);\n                return data?.items[0]?.PersonNumber;\n            }\n            else\n            {\n                return null;\n            }\n        }\n\n        #endregion",
				"isAsync":false,
				"parameters":{
					"employeeNumber":"{{ n_WmBtH.outputs.queryParams.employeeNumber }}",
					"startDate":"{{ n_WmBtH.outputs.queryParams.startDate }}",
					"endDate":"{{ n_WmBtH.outputs.queryParams.endDate }}",
					"Authorization":"{{ n_WmBtH.outputs.headers.Authorization }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":916,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_nXgwV",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39714,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":2
}