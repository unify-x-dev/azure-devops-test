{
	"appsUsed":[
		
	],
	"createdTime":1761672601359,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_WmBtH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_LpIth",
			"type":"next"
		},
		{
			"fromNodeId":"n_LpIth",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nXgwV",
			"type":"next"
		}
	],
	"id":"6900fd99121d195dbbfaa6f2",
	"lastModifiedBy":39714,
	"lcName":"[virtu-approvalsfunctionappfn]->getcheckinapproval",
	"modifiedTime":1761714788378,
	"name":"[virtu-ApprovalsFunctionAppFN]->GetCheckInApproval",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":965,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_WmBtH",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"Authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"queryParams":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"employeeNumber":{
								"type":"string",
								"title":"Employee Number"
							},
							"startDate":{
								"type":"string",
								"title":"Start Date"
							},
							"endDate":{
								"type":"string",
								"title":"End Date"
							}
						}
					},
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_LpIth",
			"index":2,
			"inputs":{
				"code":"using System.Globalization;\nusing System.Net;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing Newtonsoft.Json;\n\nnamespace api.Functions\n{\n    // ==================== MODELS ====================\n    public class CheckInApproval\n    {\n        public string? id { get; set; }\n        public int gteEmployeeNo { get; set; }\n        public int year { get; set; }\n        public int week { get; set; }\n        public int gteProjectId { get; set; }\n        public string? projectName { get; set; }\n        public string? name { get; set; }\n        public int teamMembersGteEmployeeNo { get; set; }\n        public double time { get; set; }\n        public string? status { get; set; }\n        public string? app { get; set; }\n        public string? subCategory { get; set; }\n    }\n\n    public class CheckInApprovalList\n    {\n        public List<CheckInApproval>? items { get; set; }\n    }\n\n    public class CheckInApprovalData\n    {\n        public string? user { get; set; }\n        public int gteEmployeeNo { get; set; }\n        public int year { get; set; }\n        public int week { get; set; }\n        public IList<ApprovalData>? approvalData { get; set; }\n    }\n\n    public class ApprovalData\n    {\n        public int gteProjectId { get; set; }\n        public string? projectName { get; set; }\n        public IList<TeamMembers>? teamMembers { get; set; }\n    }\n\n    public class TeamMembers\n    {\n        public string? name { get; set; }\n        public string? email { get; set; }\n        public int gteEmployeeNo { get; set; }\n        public double time { get; set; }\n    }\n\n    // ==================== MAIN AZURE FUNCTION ====================\n    public class GetCheckInApproval\n    {\n        private readonly ILogger _logger;\n        private readonly IHttpClientFactory _httpClientFactory;\n\n        public GetCheckInApproval(ILoggerFactory loggerFactory, IHttpClientFactory httpClientFactory)\n        {\n            _logger = loggerFactory.CreateLogger<GetCheckInApproval>();\n            _httpClientFactory = httpClientFactory;\n        }\n\n        [OpenApiOperation(operationId: \"GetCheckInApproval\", tags: new[] { \"GetCheckInApproval\" }, Summary = \"Get CheckIn Time Approvals\", Description = \"Use this method to get CheckIn time approvals for a user\", Visibility = OpenApiVisibilityType.Important)]\n        [OpenApiSecurity(\"function_key\", SecuritySchemeType.ApiKey, Name = \"code\", In = OpenApiSecurityLocationType.Query)]\n        [OpenApiSecurity(\"bearer_auth\", SecuritySchemeType.Http, Scheme = OpenApiSecuritySchemeType.Bearer, BearerFormat = \"JWT\")]\n        [OpenApiParameter(name: \"email\", In = ParameterLocation.Path, Required = true, Type = typeof(string), Summary = \"The email of the user\", Description = \"Valid email of the user\", Visibility = OpenApiVisibilityType.Important)]\n        [OpenApiParameter(name: \"status\", In = ParameterLocation.Query, Required = false, Type = typeof(string), Summary = \"Filter parameter can be used to filter (e.g. requested etc.) approvals\", Description = \"Filter parameter can be used to filter (e.g. requested etc.) approvals\", Visibility = OpenApiVisibilityType.Advanced)]\n        [OpenApiParameter(name: \"isDescending\", In = ParameterLocation.Query, Required = false, Type = typeof(string), Summary = \"Sort parameter can be used to sort approvals\", Description = \"Sort parameter can be used to sort approvals\", Visibility = OpenApiVisibilityType.Advanced)]\n        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: \"application/json\", bodyType: typeof(CheckInApprovalList), Summary = \"Get CheckIn Time Approvals success response\", Description = \"If request is successful then it will show available CheckIn time approvals for the given user. If there are any errors in getting approvals then error is thrown\")]\n        [OpenApiResponseWithBody(statusCode: HttpStatusCode.BadRequest, contentType: \"application/json\", bodyType: typeof(string), Summary = \"Get CheckIn Time Approvals failure response\", Description = \"If request doesn't have a valid email then error is thrown\")]\n        [Function(\"GetCheckInApproval\")]\n        public async Task<HttpResponseData> RunAsync(\n            [HttpTrigger(AuthorizationLevel.Function, \"get\", Route = \"users/{email}/checkin-approvals\")] HttpRequestData req,\n            string email,\n            string status,\n            string isDescending)\n        {\n            HttpResponseData response;\n            KeyValuePair<string, IEnumerable<string>> header = req.Headers.ToList().Find(s => s.Key == \"Authorization\");\n\n            // Validate email\n            if (!Regex.IsMatch(email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))\n            {\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                response.WriteString(JsonConvert.SerializeObject(\"path parameter {email} is not valid. Please provide valid email\"));\n                return response;\n            }\n\n            // Validate Authorization header\n            if (header.Equals(default(KeyValuePair<string, IEnumerable<string>>)))\n            {\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                response.WriteString(JsonConvert.SerializeObject(\"Please provide Authorization header\"));\n                return response;\n            }\n\n            _logger.LogInformation(\"getting {status} checkin time approvals for {email} with isDescending : {isDescending}\", status, email, isDescending);\n\n            try\n            {\n                // Extract token from Authorization header\n                string token = header.Value.ToList()[0].Split(\" \").Last();\n\n                // Get CheckIn Time Approvals (inline provider logic)\n                CheckInApprovalList approvalList = await GetCheckInTimeApprovalsAsync(email, token);\n\n                // Sort if needed\n                if (!string.IsNullOrEmpty(isDescending) && approvalList.items!.Count > 0)\n                {\n                    List<CheckInApproval> sortedList = approvalList.items\n                        .OrderByDescending(x => x.gteProjectId)\n                        .ThenByDescending(x => x.year)\n                        .ThenByDescending(x => x.week)\n                        .ToList();\n                    approvalList.items.Clear();\n                    approvalList.items.AddRange(sortedList);\n                }\n\n                response = req.CreateResponse(HttpStatusCode.OK);\n                response.Headers.Add(\"Content-Type\", \"application/json; charset=utf-8\");\n                response.WriteString(JsonConvert.SerializeObject(approvalList));\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, ex.Message);\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                response.WriteString(JsonConvert.SerializeObject(new { response = \"request (body/header) is not valid\" }));\n            }\n\n            return response;\n        }\n\n        // ==================== INLINE PROVIDER LOGIC ====================\n        private async Task<CheckInApprovalList> GetCheckInTimeApprovalsAsync(string email, string token)\n        {\n            _logger.LogInformation(\"starting time approvals from CheckIn\");\n\n            CheckInApprovalList approvalList = new CheckInApprovalList() { items = new List<CheckInApproval>() };\n            \n            HttpClient checkinClient = _httpClientFactory.CreateClient(\"CheckinGet\");\n            checkinClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n            DateTime now = DateTime.Now;\n            DateTime startDate = now.AddDays(-90);\n            DateTime endDate = now.AddDays(30);\n            Calendar cal = new CultureInfo(\"en-US\").Calendar;\n\n            try\n            {\n                while (startDate <= endDate)\n                {\n                    HttpRequestMessage getUserRequest = new HttpRequestMessage(\n                        HttpMethod.Get,\n                        string.Format(\"approval?user-name={0}&year={1}&week-no={2}\",\n                            email,\n                            startDate.Year,\n                            cal.GetWeekOfYear(startDate, CalendarWeekRule.FirstFullWeek, DayOfWeek.Monday)));\n                    getUserRequest.Content = new StringContent(\"\", Encoding.ASCII, \"application/json\");\n\n                    startDate = startDate.AddDays(7);\n\n                    HttpResponseMessage checkinGetUSerApiResponse = await checkinClient.SendAsync(getUserRequest);\n\n                    if (!checkinGetUSerApiResponse.IsSuccessStatusCode)\n                    {\n                        dynamic result = JsonConvert.DeserializeObject<dynamic>(\n                            checkinGetUSerApiResponse.Content.ReadAsStringAsync().Result)!;\n                        string message = result.message.ToString();\n                        string content = result.ToString();\n                        _logger.LogError(\"Response status code does not indicate success. Response : {0}\", content);\n\n                        if (checkinGetUSerApiResponse.StatusCode == System.Net.HttpStatusCode.NotFound &&\n                            (message == \"No Pending Approvals\" || message == \"No Data Found\" || message.StartsWith(\"Value not found!\")))\n                        {\n                            continue;\n                        }\n                    }\n\n                    CheckInApprovalData checkinData = JsonConvert.DeserializeObject<CheckInApprovalData>(\n                        checkinGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                    // Inline mapper logic\n                    List<CheckInApproval> mappedApprovals = MapToApprovalList(checkinData);\n                    approvalList.items.AddRange(mappedApprovals);\n                }\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, ex.Message);\n                throw;\n            }\n\n            _logger.LogInformation(\"ending time approvals from CheckIn\");\n            return approvalList;\n        }\n\n        // ==================== INLINE MAPPER LOGIC ====================\n        private List<CheckInApproval> MapToApprovalList(CheckInApprovalData checkinApprovalList)\n        {\n            List<CheckInApproval> approvalList = new List<CheckInApproval>();\n\n            foreach (ApprovalData approvalData in checkinApprovalList.approvalData!)\n            {\n                foreach (TeamMembers teamMembers in approvalData.teamMembers!)\n                {\n                    try\n                    {\n                        CheckInApproval checkInApproval = new CheckInApproval()\n                        {\n                            id = string.Concat(approvalData.gteProjectId, checkinApprovalList.year, checkinApprovalList.week),\n                            gteEmployeeNo = checkinApprovalList.gteEmployeeNo,\n                            year = checkinApprovalList.year,\n                            week = checkinApprovalList.week,\n                            gteProjectId = approvalData.gteProjectId,\n                            projectName = approvalData.projectName,\n                            name = teamMembers.name,\n                            teamMembersGteEmployeeNo = teamMembers.gteEmployeeNo,\n                            time = teamMembers.time,\n                            app = \"CheckIn\",\n                            subCategory = \"Time Approval\"\n                        };\n\n                        approvalList.Add(checkInApproval);\n                    }\n                    catch (Exception ex)\n                    {\n                        _logger.LogError(ex, ex.Message);\n                    }\n                }\n            }\n\n            return approvalList;\n        }\n    }\n}",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":916,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_nXgwV",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39714,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":3
}