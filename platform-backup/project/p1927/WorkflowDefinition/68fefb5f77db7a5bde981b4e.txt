{
	"appsUsed":[
		
	],
	"createdTime":1761540959851,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_xY82L",
			"priority":0,
			"skip":false,
			"toNodeId":"n_2G9Iq",
			"type":"next"
		},
		{
			"fromNodeId":"n_2G9Iq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_GVBx1",
			"type":"next"
		}
	],
	"id":"68fefb5f77db7a5bde981b4e",
	"lastModifiedBy":44567,
	"lcName":"[virtu-empowerbadgesschedulerfn] syncemployeeactivitiesbulkhttptrigger",
	"modifiedTime":1761574803603,
	"name":"[virtu-emPowerBadgesSchedulerFN] SyncEmployeeActivitiesBulkHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1151,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_xY82L",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"200 ok",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":219,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_2G9Iq",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing System.Linq;\nusing System.Web.Http;\nusing System.Security.Claims;\n\n// public class ClientService : IClientService{\n//         private readonly IAsyncRepository<ClientActivity> _clientActivityRepository;\n//         public ClientService(IAsyncRepository<ClientActivity> clientActivityRepository){\n//             _clientActivityRepository = clientActivityRepository;}\n\n//         public async Task<bool> IsAuthorize(string applicationId, int activityId){\n//             var spec = new ActivitiesByApplicationIdSpecification(applicationId);\n//             var activities = await _clientActivityRepository.ListAsync(spec).ConfigureAwait(false);\n//             return activities != null && activities.Any(a => a.ActivityId == activityId);}\n\n//         public async Task<bool> IsAuthorizeForBadge(string applicationId, int badgeId){\n//             var spec = new ActivitiesByApplicationIdAndBadgeIdSpecification(applicationId, badgeId);\n//             var activities = await _clientActivityRepository.ListAsync(spec).ConfigureAwait(false);\n//             return activities.Count > 0;}}\n\n// public class ActivityService<T> : IActivityService<T> where T : BaseEntity{\n//         private readonly IGenerationStrategyContext<T> _generationStrategyContext;\n\n//         public ActivityService(IGenerationStrategyContext<T> generationStrategyContext){\n//             _generationStrategyContext = generationStrategyContext;}\n\n//         public async Task GenerateAsync(int activityId, T metric){\n//             await _generationStrategyContext.GenerateAsync(activityId, metric).ConfigureAwait(false);}\n\n//         public async Task GenerateBulkAsync(int activityId, IEnumerable<T> metrics){\n//             foreach (T metric in metrics){\n//                 await _generationStrategyContext.GenerateAsync(activityId, metric).ConfigureAwait(false);}}}\n\n// public async Task<bool> IsAuthorize(string applicationId, int activityId){\n//             var spec = new ActivitiesByApplicationIdSpecification(applicationId);\n//             var activities = await _clientActivityRepository.ListAsync(spec).ConfigureAwait(false);\n//             return activities != null && activities.Any(a => a.ActivityId == activityId);}\n\n// public ActivitiesByApplicationIdSpecification(string applicationId)\n//             : base(cra => cra.Client.IsActive && cra.Client.ApplicationId == applicationId){}\n\n// public async Task GenerateAsync(int activityId, T metric){\n//             await _generationStrategyContext.GenerateAsync(activityId, metric).ConfigureAwait(false);}\n\n// Task GenerateAsync(int activityId, T metric);\n\npublic class MetricRequest<T>{\n        public int ActivityId { get; set; }\n        public T Data { get; set; }}\n\npublic class IndividualMetric : BaseEntity{\n        public string UserName { get; set; }\n        public int ActivityId { get; set; }\n        public DateTime EffectiveDate { get; set; }\n        public decimal Score { get; set; }\n        public string ReferenceNumber { get; set; }\n\n        public Activity Activity { get; set; }}\n \n public class SyncEmployeeActivitiesBulkHttpTrigger{\n        private readonly IActivityService<IndividualMetric> _employeeActivityService;\n        private readonly IClientService _clientService;\n\n        public SyncEmployeeActivitiesBulkHttpTrigger(IActivityService<IndividualMetric> employeeActivityService,\n            IClientService clientService){\n            _employeeActivityService = employeeActivityService;\n            _clientService = clientService;}\n\n        [FunctionName(\"employee-activities\")]\n        public async Task<IActionResult> Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\")] HttpRequest req,\n            ClaimsPrincipal principal, \n            ILogger log){\n            try{\n                // log.LogInformation(\"Start processing the request\");\n                // using (StreamReader streamReader = new StreamReader(req.Body)) {\n                //     string requestBody = await streamReader.ReadToEndAsync();\n                string requestBody = @\"{\n                \"\"ActivityId\"\": 2,\n                \"\"Data\"\": [\n                    {\n                    \"\"EffectiveDate\"\": \"\"2025-07-09T12:39:42.867\"\",\n                    \"\"ReferenceNumber\"\": \"\"451977\"\",\n                    \"\"Score\"\": 1,\n                    \"\"UserName\"\": \"\"cwickramanayake\"\"\n                    }\n                ]\n                }\";\n                    \n                    MetricRequest<IEnumerable<IndividualMetric>> metrics = JsonSerializer.Deserialize<MetricRequest<IEnumerable<IndividualMetric>>>(requestBody);\n                    var activityId = metrics.ActivityId;\n                    if (metrics.ActivityId <= 0){\n                        return new Dictionary<string, object>{\n                        { \"statusCode\", 400 },\n                        { \"body\", \"Invalid activity\"}};}\n\n                    if (!metrics.Data.Any()){\n                        return new Dictionary<string, object>{\n                        { \"statusCode\", 400 },\n                        { \"body\", \"Invalid activity\"}};}\n\n                    var applicationId = principal.Claims.FirstOrDefault(e => e.Type == \"appid\")?.Value;\n                    var isAuthorize = await _clientService.IsAuthorize(applicationId, metrics.ActivityId);\n\n                    if (!isAuthorize){\n                        return new Dictionary<string, object>{\n                        { \"statusCode\", 403 },\n                        { \"body\", $\"You are not authorized to send activities to activity id: {metrics.ActivityId}\"}};}\n\n                    var failedRecords = new List<IndividualMetric>();\n\n                    foreach (var metric in metrics.Data){\n                        try{\n                            if (string.IsNullOrEmpty(metric.UserName)){\n                                // log.LogError(\"Empty UserName\");\n                                failedRecords.Add(metric);\n                                continue;}\n                            if(activityId == 0){\n                                // log.LogError(\"Empty Activity ID\");\n                                failedRecords.Add(metric);\n                                continue;}\n                            if (metric.Score == 0){\n                                // log.LogError(\"Empty Score\");\n                                failedRecords.Add(metric);\n                                continue;}\n                            if (metric.EffectiveDate == DateTime.MinValue){\n                                // log.LogError(\"Empty EffectiveDate\");\n                                failedRecords.Add(metric);\n                                continue;}\n\n                            metric.ActivityId = activityId;\n                            await GenerateAsync(activityId, metric).ConfigureAwait(false);}\n                        catch (ActivityNotFoundException e){\n                            // log.LogError($\"Error: {e}\");\n                            return new Dictionary<string, object>{\n                            { \"statusCode\", 400 },\n                            { \"body\", $\"Invalid activity. { e.Message}\"}};}\n                        catch (EmployeeNotFoundException e){\n                            metric.Activity = null;\n                            // log.LogError($\"Error: {e}\");\n                            failedRecords.Add(metric);}\n                        catch (Exception e){\n                            // log.LogError($\"Error: {e}\");\n                            metric.Activity = null;\n                            failedRecords.Add(metric);\n                            if (e is OutOfMemoryException)  {\n                                throw; }}}\n\n                    if (metrics.Data.Count() == failedRecords.Count){\n                        return new Dictionary<string, object>{\n                        { \"statusCode\", 500 }};}\n\n                    string responseMessage = $\"Successfully completed\";\n                    int statusCode = 0;\n\n                    if (failedRecords.Any()){\n                        statusCode = -1;}\n\n                    return new Dictionary<string, object>{\n                            { \"statusCode\", statusCode },\n                            { \"responseMessage\", responseMessage},\n                            {\"failedRecords\", failedRecords}};}\n            catch (JsonException e){\n                // log.LogError(e, $\"Error message: {e.Message}\");\n                return new Dictionary<string, object>{\n                        { \"statusCode\", 400 },\n                        { \"body\", \"Invalid inputs\"}};}\n            catch (Exception e){\n                // log.LogError(e, $\"Error message: {e.Message}\");\n                return new Dictionary<string, object>{\n                        { \"statusCode\", 500 }};}}}",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1120,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_GVBx1",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200 ok",
				"set_cookies":[],
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":44567,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":13
}