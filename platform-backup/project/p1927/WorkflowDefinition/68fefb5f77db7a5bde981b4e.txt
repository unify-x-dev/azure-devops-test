{
	"appsUsed":[
		
	],
	"createdTime":1761540959851,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_xY82L",
			"priority":0,
			"skip":false,
			"toNodeId":"n_2G9Iq",
			"type":"next"
		},
		{
			"fromNodeId":"n_2G9Iq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_GVBx1",
			"type":"next"
		}
	],
	"id":"68fefb5f77db7a5bde981b4e",
	"lastModifiedBy":308,
	"lcName":"[virtu-empowerbadgesschedulerfn] syncemployeeactivitiesbulkhttptrigger",
	"modifiedTime":1761655832111,
	"name":"[virtu-emPowerBadgesSchedulerFN] SyncEmployeeActivitiesBulkHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1151,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_xY82L",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"requestBody":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"title":"Request Body"
							}
						},
						"additionalProperties":false,
						"required":[]
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"200 ok",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":219,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_2G9Iq",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"result"
					],
					"properties":{
						"result":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"requestBody":{
							"type":"string",
							"title":"Request Body"
						},
						"appid":{
							"type":"string",
							"title":"Appid"
						}
					}
				},
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing System.Linq;\n\n// Entities\npublic class BaseEntity\n{\n    public int Id { get; set; }\n}\n\npublic class IndividualMetric : BaseEntity\n{\n    public string UserName { get; set; }\n    public int ActivityId { get; set; }\n    public decimal Score { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public Activity Activity { get; set; }\n}\n\npublic class Activity : BaseEntity\n{\n    public string Name { get; set; }\n}\n\npublic class Employee : BaseEntity\n{\n    public string UserName { get; set; }\n}\n\npublic class BadgeActivity : BaseEntity\n{\n    public int ActivityId { get; set; }\n    public int BadgeId { get; set; }\n}\n\npublic class BadgeEmployee : BaseEntity\n{\n    public int BadgeId { get; set; }\n    public int EmployeeId { get; set; }\n}\n\n// Models\npublic class MetricRequest<T>\n{\n    public int ActivityId { get; set; }\n    public T Data { get; set; }\n}\n\n// Exceptions\npublic class ActivityNotFoundException : Exception\n{\n    public ActivityNotFoundException(string message) : base(message) { }\n}\n\npublic class EmployeeNotFoundException : Exception\n{\n    public EmployeeNotFoundException(string message) : base(message) { }\n}\n\n// Response Models\npublic class OkObjectBulkResult\n{\n    public string Message { get; set; }\n    public int StatusCode { get; set; }\n    public List<IndividualMetric> FailedRecords { get; set; }\n\n    public OkObjectBulkResult(string message, int statusCode, List<IndividualMetric> failedRecords)\n    {\n        Message = message;\n        StatusCode = statusCode;\n        FailedRecords = failedRecords;\n    }\n}\n\n// Services\npublic static class GenerationStrategyContext\n{\n    public static async Task GenerateAsync(int activityId, IndividualMetric metric)\n    {\n        // Your generation logic here\n        // This is where you implement the actual business logic for generating activities\n        await Task.CompletedTask;\n    }\n}\n\npublic static class ActivityService\n{\n    public static async Task GenerateAsync(int activityId, IndividualMetric metric)\n    {\n        await GenerationStrategyContext.GenerateAsync(activityId, metric);\n    }\n\n    public static async Task GenerateBulkAsync(int activityId, IEnumerable<IndividualMetric> metrics)\n    {\n        foreach (IndividualMetric metric in metrics)\n        {\n            await GenerationStrategyContext.GenerateAsync(activityId, metric);\n        }\n    }\n}\n\npublic static class ClientService\n{\n    public static async Task<bool> IsAuthorize(string appid, int activityId)\n    {\n        // Your authorization logic here\n        // Return true if authorized, false otherwise\n        await Task.CompletedTask;\n        return true;\n    }\n\n    public static async Task<bool> IsAuthorizeForBadge(string appid, int badgeId)\n    {\n        // Your badge authorization logic here\n        await Task.CompletedTask;\n        return true;\n    }\n}\n\npublic static class SyncEmployeeActivitiesBulkHttpTrigger\n{\n    public static async Task<Dictionary<string, object>> Run(\n        string requestBody,\n        string appid)\n    {\n        try\n        {\n            MetricRequest<IEnumerable<IndividualMetric>> metrics = JsonSerializer.Deserialize<MetricRequest<IEnumerable<IndividualMetric>>>(requestBody);\n            var activityId = metrics.ActivityId;\n            \n            if (metrics.ActivityId <= 0)\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 400 },\n                    { \"body\", \"Invalid activity\" }\n                };\n            }\n            \n            if (!metrics.Data.Any())\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 400 },\n                    { \"body\", \"Invalid inputs\" }\n                };\n            }\n            \n            var isAuthorize = await ClientService.IsAuthorize(appid, metrics.ActivityId);\n            \n            if (!isAuthorize)\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 403 },\n                    { \"body\", $\"You are not authorized to send activities to activity id: {metrics.ActivityId}\" }\n                };\n            }\n            \n            var failedRecords = new List<IndividualMetric>();\n            \n            foreach (var metric in metrics.Data)\n            {\n                try\n                {\n                    if (string.IsNullOrEmpty(metric.UserName))\n                    {\n                        failedRecords.Add(metric);\n                        continue;\n                    }\n                    \n                    if(activityId == 0)\n                    {\n                        failedRecords.Add(metric);\n                        continue;\n                    }\n                    \n                    if (metric.Score == 0)\n                    {\n                        failedRecords.Add(metric);\n                        continue;\n                    }\n                    \n                    if (metric.EffectiveDate == DateTime.MinValue)\n                    {\n                        failedRecords.Add(metric);\n                        continue;\n                    }\n                    \n                    metric.ActivityId = activityId;\n                    await ActivityService.GenerateAsync(activityId, metric);\n                }\n                catch (ActivityNotFoundException e)\n                {\n                    return new Dictionary<string, object>\n                    {\n                        { \"statusCode\", 400 },\n                        { \"body\", $\"Invalid activity. {e.Message}\" }\n                    };\n                }\n                catch (EmployeeNotFoundException e)\n                {\n                    metric.Activity = null;\n                    failedRecords.Add(metric);\n                }\n                catch (Exception e)\n                {\n                    metric.Activity = null;\n                    failedRecords.Add(metric);\n                    if (e is OutOfMemoryException)  \n                    {\n                        throw; \n                    }\n                }\n            }\n            \n            if (metrics.Data.Count() == failedRecords.Count)\n            {\n                return new Dictionary<string, object>\n                {\n                    { \"statusCode\", 500 },\n                    { \"body\", \"Internal Server Error\" }\n                };\n            }\n            \n            string responseMessage = $\"Successfully completed\";\n            int statusCode = 0;\n            \n            if (failedRecords.Any())\n            {\n                statusCode = -1;\n            }\n            \n            var result = new OkObjectBulkResult(responseMessage, statusCode, failedRecords);\n            \n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 200 },\n                { \"body\", result }\n            };\n        }\n        catch (JsonException e)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid inputs\" }\n            };\n        }\n        catch (Exception e)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 500 },\n                { \"body\", \"Internal Server Error\" }\n            };\n        }\n    }\n}\n\n// Usage:\nvar result = await SyncEmployeeActivitiesBulkHttpTrigger.Run(requestBody, appid);\nresult",
				"isAsync":false,
				"parameters":{
					"requestBody":"{}",
					"appid":"123"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1120,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_C52UY-1",
			"id":"n_GVBx1",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200 ok",
				"set_cookies":[],
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":44567,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":16
}