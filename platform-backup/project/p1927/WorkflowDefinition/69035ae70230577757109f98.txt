{
	"appsUsed":[
		
	],
	"createdTime":1761827559776,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761915572943,
		"deployedBy":39712,
		"deployedDefinitionId":"6904b2b4ac67042c905e8d9e",
		"status":"DEPLOYED",
		"version":4,
		"workflowVersion":7
	},
	"edges":[
		{
			"fromNodeId":"n_WmBtH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_LpIth",
			"type":"next"
		},
		{
			"fromNodeId":"n_LpIth",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nXgwV",
			"type":"next"
		}
	],
	"id":"69035ae70230577757109f98",
	"lastModifiedBy":39712,
	"lcName":"[virtu-approvalsfunctionappfn]getcheckinapproval",
	"modifiedTime":1761916146784,
	"name":"[virtu-ApprovalsFunctionAppFN]GetCheckInApproval",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":965,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_WmBtH",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"Authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"queryParams":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"employeeNumber":{
								"type":"string",
								"title":"Employee Number"
							},
							"startDate":{
								"type":"string",
								"title":"Start Date"
							},
							"endDate":{
								"type":"string",
								"title":"End Date"
							}
						}
					},
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_LpIth",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Globalization;\n\n// ----- Models -----\n\npublic class CheckInApproval\n{\n    public string? id { get; set; }\n    public int gteEmployeeNo { get; set; }\n    public int year { get; set; }\n    public int week { get; set; }\n    public int gteProjectId { get; set; }\n    public string? projectName { get; set; }\n    public string? name { get; set; }\n    public int teamMembersGteEmployeeNo { get; set; }\n    public double time { get; set; }\n    public string? status { get; set; }\n    public string? app { get; set; }\n    public string? subCategory { get; set; }\n}\n\npublic class CheckInApprovalList\n{\n    public List<CheckInApproval>? items { get; set; }\n}\n\npublic class CheckInApprovalData\n{\n    public string? user { get; set; }\n    public int gteEmployeeNo { get; set; }\n    public int year { get; set; }\n    public int week { get; set; }\n    public IList<ApprovalData>? approvalData { get; set; }\n}\n\npublic class ApprovalData\n{\n    public int gteProjectId { get; set; }\n    public string? projectName { get; set; }\n    public IList<TeamMembers>? teamMembers { get; set; }\n}\n\npublic class TeamMembers\n{\n    public string? name { get; set; }\n    public string? email { get; set; }\n    public int gteEmployeeNo { get; set; }\n    public double time { get; set; }\n}\n\n\n// ----- Data Mappers -----\n\npublic class CheckInApprovalDataMapper \n{\n    public List<CheckInApproval> MapToApprovalList(CheckInApprovalData checkinApprovalList)\n    {\n        List<CheckInApproval> approvalList = new List<CheckInApproval>();\n\n        if (checkinApprovalList == null)\n        {\n            Console.WriteLine(\"MapToApprovalList: checkinApprovalList is null\");\n            return approvalList;\n        }\n\n        if (checkinApprovalList.approvalData == null)\n        {\n            Console.WriteLine(\"MapToApprovalList: approvalData is null\");\n            return approvalList;\n        }\n\n        Console.WriteLine($\"MapToApprovalList: Processing {checkinApprovalList.approvalData.Count} approval data items\");\n\n        foreach (ApprovalData approvalData in checkinApprovalList.approvalData)\n        {\n            if (approvalData == null)\n            {\n                Console.WriteLine(\"MapToApprovalList: approvalData item is null, skipping\");\n                continue;\n            }\n\n            if (approvalData.teamMembers == null)\n            {\n                Console.WriteLine($\"MapToApprovalList: teamMembers is null for projectId={approvalData.gteProjectId}\");\n                continue;\n            }\n\n            Console.WriteLine($\"MapToApprovalList: Processing {approvalData.teamMembers.Count} team members for project {approvalData.gteProjectId}\");\n\n            foreach (TeamMembers teamMembers in approvalData.teamMembers)\n            {\n                try\n                {\n                    CheckInApproval checkInApproval = new CheckInApproval()\n                    {\n                        id = string.Concat(approvalData.gteProjectId, checkinApprovalList.year, checkinApprovalList.week),\n                        gteEmployeeNo = checkinApprovalList.gteEmployeeNo,\n                        year = checkinApprovalList.year,\n                        week = checkinApprovalList.week,\n                        gteProjectId = approvalData.gteProjectId,\n                        projectName = approvalData.projectName,\n                        name = teamMembers.name,\n                        teamMembersGteEmployeeNo = teamMembers.gteEmployeeNo,\n                        time = teamMembers.time,\n                        app = \"CheckIn\",\n                        subCategory = \"Time Approval\"\n                    };\n\n                    approvalList.Add(checkInApproval);\n                    Console.WriteLine($\"MapToApprovalList: Added approval for {teamMembers.name} (empNo: {teamMembers.gteEmployeeNo})\");\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine($\"MapToApprovalList: Error mapping approval: {ex.Message}\");\n                }\n            }\n        }\n\n        Console.WriteLine($\"MapToApprovalList: Returning {approvalList.Count} approvals\");\n        return approvalList;\n    }\n}\n\n\n// ----- Data Providers -----\n\npublic class CheckInApprovalDataProvider\n{\n    private static readonly HttpClient checkinClient = new HttpClient();\n    private static readonly HttpClient checkinPatchClient = new HttpClient();\n    private readonly CheckInApprovalDataMapper _checkinApprovalDataMapper;\n    \n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true,\n        DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull,\n        PropertyNamingPolicy = JsonNamingPolicy.CamelCase,\n        WriteIndented = false\n    };\n\n    static CheckInApprovalDataProvider()\n    {\n        string checkinClientUrl = \"https://virtueagintegrationsapim-dev2.azure-api.net/checkin-api/v1/generic/\";\n        checkinClient.BaseAddress = new Uri(checkinClientUrl);\n        checkinClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"d6f3f63f50854c0990cd61dbd7e64057\");\n\n        string checkinPatchClientUrl = \"https://virtueagintegrationsapim-dev2.azure-api.net/checkin-crud-api/v1/generic/\";\n        checkinPatchClient.BaseAddress = new Uri(checkinPatchClientUrl);\n        checkinPatchClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"e173134d94d34ce8a12ebe02e69d5b3e\");\n    }\n\n    public CheckInApprovalDataProvider()\n    {\n        _checkinApprovalDataMapper = new CheckInApprovalDataMapper();\n    }\n\n    public async Task<CheckInApprovalList> GetCheckInTimeApprovalsAsync(string email, string token)\n    {\n        Console.WriteLine(\"========== GetCheckInTimeApprovalsAsync START ==========\");\n        Console.WriteLine($\"Email: {email}\");\n        Console.WriteLine($\"Token length: {token?.Length ?? 0}\");\n\n        CheckInApprovalList approvalList = new CheckInApprovalList() { items = new List<CheckInApproval>() };\n\n        DateTime now = DateTime.Now;\n        DateTime startDate = now.AddDays(-90);\n        DateTime endDate = now.AddDays(30);\n        Calendar cal = new CultureInfo(\"en-US\").Calendar;\n        \n        int totalRequests = 0;\n        int successfulRequests = 0;\n        int errorRequests = 0;\n        int notFoundRequests = 0;\n        \n        try\n        {\n            while (startDate <= endDate)\n            {\n                totalRequests++;\n                int weekNumber = cal.GetWeekOfYear(startDate, CalendarWeekRule.FirstFullWeek, DayOfWeek.Monday);\n                \n                string requestUrl = $\"approval?user-name={email}&year={startDate.Year}&week-no={weekNumber}\";\n                \n                HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, requestUrl);\n                getUserRequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                getUserRequest.Content = new StringContent(\"\", Encoding.ASCII, \"application/json\");\n\n                Console.WriteLine($\"\\n[Request {totalRequests}] Year={startDate.Year}, Week={weekNumber}\");\n                Console.WriteLine($\"URL: {checkinClient.BaseAddress}{requestUrl}\");\n                \n                startDate = startDate.AddDays(7);\n\n                HttpResponseMessage checkinGetUSerApiResponse = await checkinClient.SendAsync(getUserRequest);\n                \n                Console.WriteLine($\"[Request {totalRequests}] Status: {checkinGetUSerApiResponse.StatusCode}\");\n\n                if (!checkinGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    string responseContent = await checkinGetUSerApiResponse.Content.ReadAsStringAsync();\n                    Console.WriteLine($\"[Request {totalRequests}] Error response: {responseContent}\");\n                    \n                    try\n                    {\n                        JsonDocument jsonDoc = JsonDocument.Parse(responseContent);\n                        JsonElement root = jsonDoc.RootElement;\n\n                        string message = string.Empty;\n                        if (root.TryGetProperty(\"message\", out JsonElement messageProp))\n                        {\n                            message = messageProp.GetString() ?? string.Empty;\n                        }\n\n                        Console.WriteLine($\"[Request {totalRequests}] Error message: '{message}'\");\n                        jsonDoc.Dispose();\n\n                        if (checkinGetUSerApiResponse.StatusCode == System.Net.HttpStatusCode.NotFound &&\n                            (message == \"No Pending Approvals\" || \n                             message == \"No Data Found\" || \n                             message.StartsWith(\"Value not found!\")))\n                        {\n                            notFoundRequests++;\n                            Console.WriteLine($\"[Request {totalRequests}] Skipping - no data (NotFound)\");\n                            continue;\n                        }\n                    }\n                    catch (JsonException ex)\n                    {\n                        Console.WriteLine($\"[Request {totalRequests}] Could not parse error as JSON: {ex.Message}\");\n                    }\n                    \n                    errorRequests++;\n                    continue;\n                }\n\n                // SUCCESS RESPONSE\n                string content = await checkinGetUSerApiResponse.Content.ReadAsStringAsync();\n                Console.WriteLine($\"[Request {totalRequests}] SUCCESS! Response length: {content.Length}\");\n                Console.WriteLine($\"[Request {totalRequests}] Response preview: {content.Substring(0, Math.Min(300, content.Length))}...\");\n                \n                try\n                {\n                    CheckInApprovalData approvalData = JsonSerializer.Deserialize<CheckInApprovalData>(content, jsonOptions);\n                    \n                    if (approvalData == null)\n                    {\n                        Console.WriteLine($\"[Request {totalRequests}] WARNING: Deserialized to null!\");\n                        continue;\n                    }\n\n                    Console.WriteLine($\"[Request {totalRequests}] Deserialized: Year={approvalData.year}, Week={approvalData.week}, EmpNo={approvalData.gteEmployeeNo}\");\n                    Console.WriteLine($\"[Request {totalRequests}] ApprovalData items: {approvalData.approvalData?.Count ?? 0}\");\n                    \n                    if (approvalData.approvalData != null)\n                    {\n                        foreach (ApprovalData ad in approvalData.approvalData)\n                        {\n                            Console.WriteLine($\"  - ProjectId: {ad.gteProjectId}, ProjectName: {ad.projectName}, TeamMembers: {ad.teamMembers?.Count ?? 0}\");\n                        }\n                    }\n                    \n                    List<CheckInApproval> mappedApprovals = _checkinApprovalDataMapper.MapToApprovalList(approvalData);\n                    \n                    if (mappedApprovals.Count > 0)\n                    {\n                        approvalList.items.AddRange(mappedApprovals);\n                        successfulRequests++;\n                        Console.WriteLine($\"[Request {totalRequests}] ✓ Added {mappedApprovals.Count} approvals. Total: {approvalList.items.Count}\");\n                    }\n                    else\n                    {\n                        Console.WriteLine($\"[Request {totalRequests}] ⚠ Mapping returned 0 approvals\");\n                    }\n                }\n                catch (JsonException ex)\n                {\n                    Console.WriteLine($\"[Request {totalRequests}] JSON error: {ex.Message}\");\n                    Console.WriteLine($\"Content causing error: {content}\");\n                    errorRequests++;\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"\\n========== EXCEPTION ==========\");\n            Console.WriteLine($\"Error: {ex.Message}\");\n            Console.WriteLine($\"Stack: {ex.StackTrace}\");\n            throw;\n        }\n\n        Console.WriteLine($\"\\n========== SUMMARY ==========\");\n        Console.WriteLine($\"Total requests made: {totalRequests}\");\n        Console.WriteLine($\"Successful (with data): {successfulRequests}\");\n        Console.WriteLine($\"Not found (no data): {notFoundRequests}\");\n        Console.WriteLine($\"Errors: {errorRequests}\");\n        Console.WriteLine($\"TOTAL APPROVALS FETCHED: {approvalList.items.Count}\");\n        Console.WriteLine($\"=============================\\n\");\n        \n        return approvalList;\n    }\n\n    public async Task PatchCheckInTimeApprovalAsync(CheckInApprovalList approvalList, string token)\n    {\n        Console.WriteLine(\"Start sending time approvals to CheckIn\");\n\n        if (approvalList?.items == null || approvalList.items.Count == 0)\n        {\n            Console.WriteLine(\"No items to patch\");\n            return;\n        }\n\n        List<CheckInApproval> approveList = approvalList.items.FindAll(s => s.status?.ToLower() == \"approve\");\n        List<CheckInApproval> rejectList = approvalList.items.FindAll(s => s.status?.ToLower() == \"reject\");\n\n        Console.WriteLine($\"Approve list: {approveList.Count}, Reject list: {rejectList.Count}\");\n\n        IEnumerable<CheckInApprovalData> newApproveList = approveList\n            .GroupBy(x => new { x.year, x.week, x.gteEmployeeNo })\n            .Select(a => new CheckInApprovalData()\n            {\n                year = a.Key.year,\n                week = a.Key.week,\n                gteEmployeeNo = a.Key.gteEmployeeNo,\n                approvalData = a.GroupBy(b => new { b.gteProjectId })\n                    .Select(c => new ApprovalData()\n                    {\n                        gteProjectId = c.Key.gteProjectId,\n                        teamMembers = c.GroupBy(d => new { d.teamMembersGteEmployeeNo, d.time })\n                            .Select(e => new TeamMembers()\n                            {\n                                gteEmployeeNo = e.Key.teamMembersGteEmployeeNo\n                            }).ToList()\n                    }).ToList()\n            });\n\n        IEnumerable<CheckInApprovalData> newRejectList = rejectList\n            .GroupBy(x => new { x.year, x.week, x.gteEmployeeNo })\n            .Select(a => new CheckInApprovalData()\n            {\n                year = a.Key.year,\n                week = a.Key.week,\n                gteEmployeeNo = a.Key.gteEmployeeNo,\n                approvalData = a.GroupBy(b => new { b.gteProjectId })\n                    .Select(c => new ApprovalData()\n                    {\n                        gteProjectId = c.Key.gteProjectId,\n                        teamMembers = c.GroupBy(d => new { d.teamMembersGteEmployeeNo, d.time })\n                            .Select(e => new TeamMembers()\n                            {\n                                gteEmployeeNo = e.Key.teamMembersGteEmployeeNo\n                            }).ToList()\n                    }).ToList()\n            });\n\n        try\n        {\n            foreach (CheckInApprovalData checkInApprovalData in newApproveList)\n            {\n                object payload = new\n                {\n                    gteEmployeeNo = checkInApprovalData.gteEmployeeNo,\n                    approvalData = checkInApprovalData.approvalData.Select(a => new\n                    {\n                        gteProjectId = a.gteProjectId,\n                        teamMembers = a.teamMembers.Select(b => b.gteEmployeeNo).ToList()\n                    }).ToList()\n                };\n\n                string jsonPayload = JsonSerializer.Serialize(payload, jsonOptions);\n                Console.WriteLine($\"Approving: Year={checkInApprovalData.year}, Week={checkInApprovalData.week}\");\n\n                HttpRequestMessage patchUserRequest = new HttpRequestMessage(\n                    HttpMethod.Put, \n                    $\"approval/{checkInApprovalData.year}/{checkInApprovalData.week}/A\"\n                );\n                patchUserRequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                patchUserRequest.Content = new StringContent(jsonPayload, Encoding.UTF8, \"application/json\");\n\n                HttpResponseMessage checkinPatchUSerApiResponse = await checkinPatchClient.SendAsync(patchUserRequest);\n                \n                if (!checkinPatchUSerApiResponse.IsSuccessStatusCode)\n                {\n                    string errorContent = await checkinPatchUSerApiResponse.Content.ReadAsStringAsync();\n                    Console.WriteLine($\"Approve PATCH failed: {checkinPatchUSerApiResponse.StatusCode} - {errorContent}\");\n                }\n                else\n                {\n                    Console.WriteLine($\"Approve PATCH succeeded\");\n                }\n\n                checkinPatchUSerApiResponse.EnsureSuccessStatusCode();\n            }\n\n            foreach (CheckInApprovalData checkInApprovalData in newRejectList)\n            {\n                object payload = new\n                {\n                    gteEmployeeNo = checkInApprovalData.gteEmployeeNo,\n                    approvalData = checkInApprovalData.approvalData.Select(a => new\n                    {\n                        gteProjectId = a.gteProjectId,\n                        teamMembers = a.teamMembers.Select(b => b.gteEmployeeNo).ToList()\n                    }).ToList()\n                };\n\n                string jsonPayload = JsonSerializer.Serialize(payload, jsonOptions);\n                Console.WriteLine($\"Rejecting: Year={checkInApprovalData.year}, Week={checkInApprovalData.week}\");\n\n                HttpRequestMessage patchUserRequest = new HttpRequestMessage(\n                    HttpMethod.Put, \n                    $\"approval/{checkInApprovalData.year}/{checkInApprovalData.week}/R\"\n                );\n                patchUserRequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                patchUserRequest.Content = new StringContent(jsonPayload, Encoding.UTF8, \"application/json\");\n\n                HttpResponseMessage checkinPatchUSerApiResponse = await checkinPatchClient.SendAsync(patchUserRequest);\n                \n                if (!checkinPatchUSerApiResponse.IsSuccessStatusCode)\n                {\n                    string errorContent = await checkinPatchUSerApiResponse.Content.ReadAsStringAsync();\n                    Console.WriteLine($\"Reject PATCH failed: {checkinPatchUSerApiResponse.StatusCode} - {errorContent}\");\n                }\n                else\n                {\n                    Console.WriteLine($\"Reject PATCH succeeded\");\n                }\n\n                checkinPatchUSerApiResponse.EnsureSuccessStatusCode();\n            }\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error in PatchCheckInTimeApprovalAsync: {ex.Message}\");\n            throw;\n        }\n\n        Console.WriteLine(\"End sending time approvals to CheckIn\");\n    }\n}\n\n\n// ----- Azure GetCheckinApproval Function -----\n\npublic async Task<IDictionary<string, object>> mainFunction(string email, string status, string isDescending, string authorizationToken = null)\n{\n    Dictionary<string, object> response = new Dictionary<string, object>();\n\n    Console.WriteLine($\"\\n========== MAIN FUNCTION START ==========\");\n    Console.WriteLine($\"Email: {email}\");\n    Console.WriteLine($\"Status: {status}\");\n    Console.WriteLine($\"IsDescending: {isDescending}\");\n    Console.WriteLine($\"Has Auth Token: {!string.IsNullOrEmpty(authorizationToken)}\");\n\n    if (!Regex.IsMatch(email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))\n    {\n        Console.WriteLine(\"ERROR: Invalid email format\");\n        response[\"statusCode\"] = 400;\n        response[\"body\"] = $\"path parameter {email} is not valid. Please provide valid email\";\n        return response;\n    }\n\n    if (string.IsNullOrEmpty(authorizationToken))\n    {\n        Console.WriteLine(\"ERROR: No authorization token\");\n        response[\"statusCode\"] = 400;\n        response[\"body\"] = \"Please provide Authorization header\";\n        return response;\n    }\n\n    CheckInApprovalDataProvider checkinProvider = new CheckInApprovalDataProvider();\n\n    try\n    {\n        string token = authorizationToken.Split(' ').Last();\n        Console.WriteLine($\"Token extracted. Length: {token.Length}\");\n        \n        CheckInApprovalList approvalList = await checkinProvider.GetCheckInTimeApprovalsAsync(email, token);\n\n        Console.WriteLine($\"\\nMain: Received {approvalList.items?.Count ?? 0} items from provider\");\n\n        if (!string.IsNullOrEmpty(isDescending) && approvalList.items != null && approvalList.items.Count > 0)\n        {\n            Console.WriteLine(\"Sorting results...\");\n            List<CheckInApproval> sortedList = approvalList.items\n                .OrderByDescending(x => x.gteProjectId)\n                .ThenByDescending(x => x.year)\n                .ThenByDescending(x => x.week)\n                .ToList();\n\n            approvalList.items.Clear();\n            approvalList.items.AddRange(sortedList);\n            Console.WriteLine(\"Sorting complete\");\n        }\n\n        response[\"statusCode\"] = 200;\n        response[\"headers\"] = new Dictionary<string, string>\n        {\n            { \"Content-Type\", \"application/json; charset=utf-8\" }\n        };\n        response[\"body\"] = approvalList;\n        \n        Console.WriteLine($\"========== SUCCESS: Returning {approvalList.items?.Count ?? 0} items ==========\\n\");\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"\\n========== MAIN FUNCTION ERROR ==========\");\n        Console.WriteLine($\"Type: {ex.GetType().Name}\");\n        Console.WriteLine($\"Message: {ex.Message}\");\n        Console.WriteLine($\"Stack: {ex.StackTrace}\");\n        \n        if (ex.InnerException != null)\n        {\n            Console.WriteLine($\"Inner: {ex.InnerException.Message}\");\n        }\n        \n        response[\"statusCode\"] = 500;\n        response[\"body\"] = $\"Internal server error: {ex.Message}\";\n    }\n\n    return response;\n}\n\n// Example input\nstring email = \"tskulathunga@virtusa.com\";\nstring status = \"requested\";               \nstring isDescending = \"true\";       \nstring authorizationToken = \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6InlFVXdtWFdMMTA3Q2MtN1FaMldTYmVPYjNzUSIsImtpZCI6InlFVXdtWFdMMTA3Q2MtN1FaMldTYmVPYjNzUSJ9.eyJhdWQiOiJodHRwczovL3NlcnZpY2UuZmxvdy5taWNyb3NvZnQuY29tLyIsImlzcyI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzBkODUxNjBjLTU4OTktNDRjYS1hY2M4LWRiMTUwMWI5OTNiNi8iLCJpYXQiOjE3NjE5MTIyMDgsIm5iZiI6MTc2MTkxMjIwOCwiZXhwIjoxNzYxOTE3NjI0LCJhY2N0IjowLCJhY3IiOiIxIiwiYWlvIjoiQVVRQXUvOGFBQUFBRnFoTm1Bb2ZaR0p5eGtQSWpWQjBEdDBuZWh5NTJsOFh1SXRsUVVNWStXZk4wZnhnSzkzVVdvS0g1bXJBL3p0NTArSDZQN0RwY3JzWnFFQk1OUUphTVE9PSIsImFtciI6WyJwd2QiLCJyc2EiXSwiYXBwaWQiOiIwOGUxODg3Ni02MTc3LTQ4N2UtYjhiNS1jZjk1MGMxZTU5OGMiLCJhcHBpZGFjciI6IjAiLCJkZXZpY2VpZCI6IjQyOTc2ZDQ4LTRlYjUtNDY3Yy1hOTMzLWVkNTM2YTMzNWM5MiIsImZhbWlseV9uYW1lIjoiS3VtYXIiLCJnaXZlbl9uYW1lIjoiQW5zaHVsIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMTY1LjIyNS4xMjUuNzMiLCJuYW1lIjoiQW5zaHVsIEt1bWFyIiwib2lkIjoiYmE0ODQxNGItMWQ0My00M2MwLWI2YzktNGJmZTEzZmMwZDIyIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTE5MzU2NTU2OTctMjEzOTg3MTk5NS02ODIwMDMzMzAtNjQ4MzI1IiwicHVpZCI6IjEwMDMyMDA0RDJCQUI3N0YiLCJyaCI6IjEuQVFvQURCYUZEWmxZeWtTc3lOc1ZBYm1UdGlXaDhIMi0wNVpNcWxSWkg0UF9WQndLQUxjS0FBLiIsInNjcCI6IkFwcHJvdmFscy5NYW5hZ2UuQWxsIEZsb3dzLlJlYWQuQWxsIEZsb3dzLlJlYWQuUGxhbnMgRmxvd3MuV3JpdGUuUGxhbnMiLCJzaWQiOiIwMDljYmQxOS0yMTM0LTdjMGYtYTRjZi02MzUyN2FhNDlkMjAiLCJzaWduaW5fc3RhdGUiOlsiZHZjX21uZ2QiLCJkdmNfY21wIiwiZHZjX2RtamQiLCJrbXNpIl0sInN1YiI6IlRoN2UwZDRCUjJIUVk1Uk9Ldl9lSW16amVhdGw4Q0hNQ0toSmI5dThOVzAiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiQVMiLCJ0aWQiOiIwZDg1MTYwYy01ODk5LTQ0Y2EtYWNjOC1kYjE1MDFiOTkzYjYiLCJ1bmlxdWVfbmFtZSI6ImFuc2h1bGt1bWFyQHZpcnR1c2EuY29tIiwidXBuIjoiYW5zaHVsa3VtYXJAdmlydHVzYS5jb20iLCJ1dGkiOiJaZFFkNVR0aVFrVzVsNmlrWmNYWEFBIiwidmVyIjoiMS4wIiwieG1zX2FjdF9mY3QiOiIzIDUiLCJ4bXNfZnRkIjoiaUtseHJQQzZGdElxaE9vd1RJR1dTdHJwd1d1aWR4SUdxYnhzTm1FWF9pY0JhMjl5WldGemIzVjBhQzFrYzIxeiIsInhtc19pZHJlbCI6IjEgMTAiLCJ4bXNfc3ViX2ZjdCI6IjMgMTAifQ.c3EQVXtwYGvRXbqDAjoan3LePr-k8D41UrePNnxC9ZKpOWqN_BHheMY1vxb1K7KxUH-IwHg3mPLbP6du0EQlRvI3mD6ax-f3ESnuYCFn4MRrZUNo0jeQS8IQ664TztJ8Z-I1F_rsPl8ZJ4eUXRC5axFoGdGgypepspc_uwdBXNFKt795JMejUlPl52yXbwglRwqBt0CH6iROGNZc_5NPDLSmy0eStDnF8k8xuCKiQuzfjJAPyMiArexbLv-58gxpN5w0Sn5XhXuB1z1uHO7af9JZ9o8eo1Xr3niE1CMXf9JwsEsVrq3As_lYdgRQEL6cr-TLjzAdXKCZR64Hxn2iWQ\"; \n\nvar result = await mainFunction(email, status, isDescending, authorizationToken);\nresult",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":916,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_nXgwV",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39714,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":8
}