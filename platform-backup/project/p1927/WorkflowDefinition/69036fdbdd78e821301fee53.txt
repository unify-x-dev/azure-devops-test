{
	"appsUsed":[
		
	],
	"createdTime":1761832923424,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761850303498,
		"deployedBy":46217,
		"deployedDefinitionId":"6903b3bf1a02a9321417ac91",
		"status":"DEPLOYED",
		"version":1,
		"workflowVersion":5
	},
	"edges":[
		{
			"fromNodeId":"n_XhbEi",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8rSjZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_8rSjZ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_jH3B7",
			"type":"next"
		}
	],
	"id":"69036fdbdd78e821301fee53",
	"lastModifiedBy":46217,
	"lcName":"[virtu-approvalsfunctionappfn]updateapproval",
	"modifiedTime":1761894081387,
	"name":"[virtu-ApprovalsFunctionAppFN]UpdateApproval",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_XhbEi",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_8rSjZ",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Net;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\n// ----- Models -----\n\n// 1.\npublic class Approval\n{\n    public string? id { get; set; }\n    public string? request { get; set; }\n    public string? requestedBy { get; set; }\n    public string? app { get; set; }\n    public string? appGroup { get; set; }\n    public string? subCategory { get; set; }\n    public string? details { get; set; }\n    public string? requestedByImage { get; set; }\n    public DateTime createdDate { get; set; }\n    public Uri? link { get; set; }\n    public string? status { get; set; }\n    public string? comment { get; set; }\n}\n\npublic class ApprovalList\n{\n    public List<Approval>? items { get; set; }\n}\n\npublic class DocumentId\n{\n    [JsonPropertyName(\"link\")]\n    public Uri? Link { get; set; }\n}\n\npublic class NowApproval\n{\n    [JsonPropertyName(\"sys_id\")]\n    public string? SysId { get; set; }\n\n    [JsonPropertyName(\"document_id.short_description\")]\n    public string? SysapprovalShortDescription { get; set; }\n\n    [JsonPropertyName(\"document_id.description\")]\n    public string? SysapprovalDescription { get; set; }\n\n    [JsonPropertyName(\"sys_created_on\")]\n    public DateTime SysCreatedOn { get; set; }\n\n    [JsonPropertyName(\"document_id\")]\n    public DocumentId? DocumentId { get; set; }\n\n    [JsonPropertyName(\"document_id.sys_class_name\")]\n    public string? DocumentIdSysClassName { get; set; }\n\n    [JsonPropertyName(\"document_id.name\")]\n    public string? DocumentIdName { get; set; }\n\n    [JsonPropertyName(\"state\")]\n    public string? State { get; set; }\n\n    [JsonPropertyName(\"sys_created_by\")]\n    public string? SysCreatedBy { get; set; }\n\n    [JsonPropertyName(\"source_table\")]\n    public string? SourceTable { get; set; }\n\n    [JsonPropertyName(\"document_id.requested_for.name\")]\n    public string? RequestedForName { get; set; }\n\n    [JsonPropertyName(\"document_id.requested_for.email\")]\n    public string? RequestedForEmail { get; set; }\n\n    [JsonPropertyName(\"document_id.author.name\")]\n    public string? AuthorName { get; set; }\n\n    [JsonPropertyName(\"document_id.author.email\")]\n    public string? AuthorEmail { get; set; }\n\n    [JsonPropertyName(\"document_id.requested_by.name\")]\n    public string? RequestedByName { get; set; }\n\n    [JsonPropertyName(\"document_id.requested_by.email\")]\n    public string? RequestedByEmail { get; set; }\n\n    [JsonPropertyName(\"document_id.assigned_to.name\")]\n    public string? AssignedToName { get; set; }\n\n    [JsonPropertyName(\"document_id.assigned_to.email\")]\n    public string? AssignedToEmail { get; set; }\n\n    [JsonPropertyName(\"document_id.opened_by.name\")]\n    public string? OpenedByName { get; set; }\n\n    [JsonPropertyName(\"document_id.opened_by.email\")]\n    public string? OpenedByEmail { get; set; }\n\n    //sc_task\n    public string? short_description { get; set; }\n\n    public string? u_sd_onboarding { get; set; }\n\n    [JsonPropertyName(\"request_item.requested_for.name\")]\n    public string? request_itemrequested_forname { get; set; }\n\n    [JsonPropertyName(\"request_item.u_last_working_date\")]\n    public string? request_itemu_last_working_date { get; set; }\n\n    [JsonPropertyName(\"request_item.requested_for.employee_number\")]\n    public string? request_itemrequested_foremployee_number { get; set; }\n}\n\npublic class NowApprovalList\n{\n    [JsonPropertyName(\"result\")]\n    public IList<NowApproval>? Items { get; set; }\n}\n\n// 2.\npublic class Owner\n{\n    public string? id { get; set; }\n    public string? type { get; set; }\n    public string? tenantId { get; set; }\n}\n\npublic class Principal\n{\n    public string? id { get; set; }\n    public string? displayName { get; set; }\n    public string? email { get; set; }\n    public string? type { get; set; }\n    public string? tenantId { get; set; }\n    public string? userPrincipalName { get; set; }\n    public string? thumbnailPhoto { get; set; }\n}\n\npublic class Properties\n{\n    public string? type { get; set; }\n    public bool isActive { get; set; }\n    public List<string>? userRoles { get; set; }\n    public Owner? owner { get; set; }\n    public string? title { get; set; }\n    public string? details { get; set; }\n    public string? result { get; set; }\n    public bool allowCancel { get; set; }\n    public bool enableNotifications { get; set; }\n    public DateTime creationDate { get; set; }\n    public DateTime dueDate { get; set; }\n    public DateTime expirationDate { get; set; }\n    public DateTime completionDate { get; set; }\n    public UserRequest? userRequest { get; set; }\n    public List<string>? approvers { get; set; }\n    public List<Principal>? principals { get; set; }\n    public string? priority { get; set; }\n    public string? requestType { get; set; }\n}\n\npublic class UserRequest\n{\n    public List<string>? responseOptions { get; set; }\n}\n\npublic class PAApproval\n{\n    public string? name { get; set; }\n    public string? id { get; set; }\n    public string? type { get; set; }\n    public Properties? properties { get; set; }\n}\n\npublic class PAApprovalList\n{\n    [JsonPropertyName(\"value\")]\n    public List<PAApproval>? items { get; set; }\n    public string? nextLink { get; set; }\n}\n\n// 3.\npublic sealed class V5ActionList : IEquatable<V5ActionList>\n{\n    public string? title { get; set; }\n\n    public override bool Equals(object? obj)\n    {\n        if (obj == null) return false;\n        return obj is V5ActionList objAsPart && Equals(objAsPart);\n    }\n\n    public bool Equals(V5ActionList? other)\n    {\n        if (other == null) return false;\n        return title!.Equals(other.title);\n    }\n\n    public override int GetHashCode()\n    {\n        throw new NotImplementedException();\n    }\n}\n\npublic class DetailsUrl\n{\n    public string? href { get; set; }\n}\n\npublic class V5Approval\n{\n    public string? title { get; set; }\n    public string? createdDate { get; set; }\n    public string? fromUserDisplayName { get; set; }\n    public int number { get; set; }\n    public string? state { get; set; }\n    public string? taskDefinitionName { get; set; }\n    public List<V5ActionList>? actionList { get; set; }\n    public DetailsUrl? detailsURL { get; set; }\n}\n\npublic class V5Link\n{\n    public string? rel { get; set; }\n    public string? href { get; set; }\n}\n\npublic class V5ApprovalList\n{\n    public bool hasMore { get; set; }\n    public List<V5Approval>? items { get; set; }\n    public List<V5Link>? links { get; set; }\n}\n\n// 4.\npublic class ActionList\n{\n    public int length { get; set; }\n    public string? title { get; set; }\n    public string? actionId { get; set; }\n    public string? actionType { get; set; }\n}\n\npublic class Assignees\n{\n    public bool hasMore { get; set; }\n    public List<Item>? items { get; set; }\n}\n\npublic class Attachments\n{\n    public Attachments? attachments { get; set; }\n    public int length { get; set; }\n    public string? rel { get; set; }\n    public string? href { get; set; }\n}\n\npublic class Comments\n{\n    public Comments? comments { get; set; }\n    public int length { get; set; }\n    public string? rel { get; set; }\n    public string? href { get; set; }\n}\n\npublic class History\n{\n    public History? history { get; set; }\n    public int length { get; set; }\n    public string? rel { get; set; }\n    public string? href { get; set; }\n}\n\npublic class Item\n{\n    public int levels { get; set; }\n    public string? id { get; set; }\n    public string? type { get; set; }\n    public string? displayName { get; set; }\n    public bool adminFlag { get; set; }\n}\n\npublic class Link\n{\n    public int length { get; set; }\n    public string? rel { get; set; }\n    public string? href { get; set; }\n}\n\npublic class OriginalAssignees\n{\n    public int count { get; set; }\n    public bool hasMore { get; set; }\n    public bool totalResult { get; set; }\n    public List<Item>? items { get; set; }\n}\n\npublic class Payload\n{\n    public Payload? payload { get; set; }\n    public int length { get; set; }\n    public string? rel { get; set; }\n    public string? href { get; set; }\n}\n\npublic class ProcessInstanceDetail\n{\n    public int length { get; set; }\n    public string? rel { get; set; }\n    public string? href { get; set; }\n}\n\npublic class Reviewers\n{\n    public bool hasMore { get; set; }\n    public List<Item>? items { get; set; }\n}\n\npublic class V5PaaSApproval\n{\n    public string? title { get; set; }\n    public int number { get; set; }\n    public string? id { get; set; }\n    public string? createdBy { get; set; }\n    public string? fromUserDisplayName { get; set; }\n    public string? fromUserName { get; set; }\n    public int priority { get; set; }\n    public string? ownerRole { get; set; }\n    public string? status { get; set; }\n    public string? state { get; set; }\n    public DateTime assignedDate { get; set; }\n    public DateTime createdDate { get; set; }\n    public string? updatedById { get; set; }\n    public string? updatedByDisplayName { get; set; }\n    public DateTime updatedDate { get; set; }\n    public bool hasSubTasksFlag { get; set; }\n    public string? routingType { get; set; }\n    public string? processName { get; set; }\n    public string? processId { get; set; }\n    public string? processDefId { get; set; }\n    public bool isDocsEnabledFlag { get; set; }\n    public bool isConversationEnabledFlag { get; set; }\n    public string? formMetadata { get; set; }\n    public ProcessInstanceDetail? processInstanceDetail { get; set; }\n    public List<string>? rolesPlayedByUser { get; set; }\n    public Reviewers? reviewers { get; set; }\n    public Assignees? assignees { get; set; }\n    public OriginalAssignees? originalAssignees { get; set; }\n    public Payload? payload { get; set; }\n    public Attachments? attachments { get; set; }\n    public History? history { get; set; }\n    public Comments? comments { get; set; }\n    public List<ActionList>? actionList { get; set; }\n    public int length { get; set; }\n    public List<Link>? links { get; set; }\n}\n\npublic class V5PaaSApprovalList\n{\n    public bool hasMore { get; set; }\n    public List<V5PaaSApproval>? items { get; set; }\n}\n\n// 5.\npublic class SkillApproval\n{\n    public string? fullname { get; set; }\n    public string? employeeNumber { get; set; }\n    public string? email { get; set; }\n    public string? referenceNumber { get; set; }\n    public string? skillName { get; set; }\n    public int rating { get; set; }\n    public DateTime requestedDate { get; set; }\n}\n\n// 6.\npublic class SbaaOwner\n{\n    public string? Name { get; set; }\n}\n\npublic class QuoteR\n{\n    public string? Name { get; set; }\n    public SbqqOpportunity2R? SBQQ__Opportunity2__r { get; set; }\n    public SbqqAccountR? SBQQ__Account__r { get; set; }\n    public string? SBQQ__StartDate__c { get; set; }\n    public string? SBQQ__EndDate__c { get; set; }\n    public string? Total_Contract_Value_excl_VD__c { get; set; }\n    public string? Revenue_Net_of_Volume_Discount__c { get; set; }\n    public string? AM_BCB__c { get; set; }\n    public string? AM_ACB__c { get; set; }\n    public string? Provider_and_Benchmark_Rates__c { get; set; }\n    public string? TCV_Using_Market_Rate__c { get; set; }\n    public string? AM_BCB_using_Market_Rates__c { get; set; }\n    public string? Variance_of_TCV_and_TCV_using_Market_Rat__c { get; set; }\n    public string? Margin_Variance__c { get; set; }\n    public string? FTE_Overall__c { get; set; }\n    public string? FTE_Onsite__c { get; set; }\n    public string? FTE_Offshore__c { get; set; }\n    public string? of_Resource_Mix_Overall__c { get; set; }\n    public string? of_Resource_Mix_Onsite__c { get; set; }\n    public string? of_Resource_Mix_Offshore__c { get; set; }\n    public string? PHR_Overall__c { get; set; }\n    public string? PHR_Onsite__c { get; set; }\n    public string? PHR_Offshore__c { get; set; }\n    public string? Pyramid__c { get; set; }\n    public string? Pyramid_T0_Onsite__c { get; set; }\n    public string? Pyramid_T0_Offshore__c { get; set; }\n    public string? Pyramid_T1_Global__c { get; set; }\n    public string? Pyramid_T1_onsite__c { get; set; }\n    public string? Pyramid_T1_Offshore__c { get; set; }\n    public string? Pyramid_T2_Global__c { get; set; }\n    public string? Pyramid_T2_Onsite__c { get; set; }\n    public string? Pyramid_T2_Offshore__c { get; set; }\n    public string? Pyramid_T3_Global__c { get; set; }\n    public string? Pyramid_T3_Onsite__c { get; set; }\n    public string? Pyramid_T3_Offshore__c { get; set; }\n    public string? Pyramid_T4_Global__c { get; set; }\n    public string? Pyramid_T4_Onsite__c { get; set; }\n    public string? Pyramid_T4_Offshore__c { get; set; }\n}\n\npublic class SbqqAccountR\n{\n    public string? Name { get; set; }\n}\n\npublic class SbqqOpportunity2R\n{\n    public string? Opportunity_ID__c { get; set; }\n    public string? Group_SBU__c { get; set; }\n    public string? Name { get; set; }\n    public string? CurrencyIsoCode { get; set; }\n    public string? Amount { get; set; }\n    public string? StageName { get; set; }\n    public string? Deal_Type__c { get; set; }\n    public string? Quote_Project_Type__c { get; set; }\n}\n\npublic class ProcessInstance\n{\n    public TargetObject? TargetObject { get; set; }\n    public string? Status { get; set; }\n}\n\npublic class TargetObject\n{\n    public Attributes? attributes { get; set; }\n    public string? Name { get; set; }\n    //SIMP_Project__c\n    public string? Project_Name__c { get; set; }\n    public string? Project_Start_Date__c { get; set; }\n    public string? Customers__c { get; set; }\n    public string? VRTU_Business_Unit__c { get; set; }\n    public string? Engagement_Type__c { get; set; }\n    public string? Project_Currency__c { get; set; }\n    public string? Id { get; set; }\n}\n\npublic class Attributes\n{\n    public string? url { get; set; }\n}\n\npublic class Group\n{\n    public string? Id { get; set; }\n}\n\npublic class SfdcApproval\n{\n    public string? Id { get; set; }\n    public QuoteR? Quote__r { get; set; }\n    public SbaaOwner? Owner { get; set; }\n    public DateTime CreatedDate { get; set; }\n    public string? sbaa__Status__c { get; set; }\n    public string? sbaa__CommentsLong__c { get; set; }\n    //Standard\n    public ProcessInstance? ProcessInstance { get; set; }\n    public TargetObject? CreatedBy { get; set; }\n    //Public Group\n    public Group? Group { get; set; }\n}\n\npublic class SfdcApprovalList\n{\n    public string? nextRecordsUrl { get; set; }\n    [JsonPropertyName(\"records\")]\n    public List<SfdcApproval>? items { get; set; }\n}\n\n// 7.\npublic class TaleoApproval\n{\n    public string? approvalId { get; set; }\n    public string? type { get; set; }\n    public string? request { get; set; }\n    public string? details { get; set; }\n    public string? requestedBy { get; set; }\n    public DateTime createdDate { get; set; }\n    public string? status { get; set; }\n}\n\n// 8.\npublic class EmailAddress\n{\n    public string? name { get; set; }\n    public string? address { get; set; }\n}\n\npublic class Person\n{\n    public EmailAddress? emailAddress { get; set; }\n}\n\npublic class SingleValueExtendedProperty\n{\n    public string? id { get; set; }\n    public string? value { get; set; }\n}\n\npublic class OutlookApproval\n{\n    public DateTime createdDateTime { get; set; }\n    public string? subject { get; set; }\n    public string? bodyPreview { get; set; }\n    public string? webLink { get; set; }\n    public Person? sender { get; set; }\n    public Person? from { get; set; }\n\n    public List<SingleValueExtendedProperty>? singleValueExtendedProperties { get; set; }\n}\n\npublic class OutlookApprovalList\n{\n    public List<OutlookApproval>? value { get; set; }\n\n    [JsonPropertyName(\"@odata.nextLink\")]\n    public string? odatanextLink { get; set; }\n}\n\n\n// ----- Data Mappers -----\n\npublic class NowApprovalDataMapper\n{\n    public Approval MapToApproval(NowApproval nowApproval)\n    {\n        string requestedBy = string.Empty;\n        string requestedByImage = string.Empty;\n        string app = \"Anytime\";\n        string subCategory = \"Anytime Approval\";\n        string? title = nowApproval.SourceTable == \"sn_vul_change_approval\" ? nowApproval.DocumentIdName : nowApproval.SysapprovalShortDescription;\n\n        switch (nowApproval.SourceTable)\n        {\n            case \"sc_req_item\":\n                requestedBy = nowApproval.RequestedForName!;\n                requestedByImage = nowApproval.RequestedForEmail!;\n                break;\n            case \"change_request\":\n            case \"sn_vul_change_approval\":\n                requestedBy = nowApproval.RequestedByName!;\n                requestedByImage = nowApproval.RequestedByEmail!;\n                break;\n            case \"kb_knowledge\":\n                requestedBy = nowApproval.AuthorName!;\n                requestedByImage = nowApproval.AuthorEmail!;\n                break;\n            case \"std_change_proposal\":\n            case \"sn_risk_acceptance_task\":\n            case \"u_account_info\":\n            case \"u_account_task\":\n            case \"sn_imt_travel_request\":\n                requestedBy = nowApproval.OpenedByName!;\n                requestedByImage = nowApproval.OpenedByEmail!;\n                break;\n            case \"sn_audit_control_test\":\n            case \"sn_audit_engagement\":\n                requestedBy = nowApproval.AssignedToName!;\n                requestedByImage = nowApproval.AssignedToEmail!;\n                break;\n        }\n\n        requestedBy = string.IsNullOrEmpty(requestedBy) ? nowApproval.SysCreatedBy! : requestedBy;\n        requestedByImage = string.IsNullOrEmpty(requestedByImage) ? string.Concat(requestedBy, \"@virtusa.com\") : requestedByImage;\n        title = string.IsNullOrEmpty(title) ? subCategory : title;\n\n        return new Approval\n        {\n            id = nowApproval.SysId,\n            app = app,\n            appGroup = app,\n            subCategory = !string.IsNullOrEmpty(nowApproval.DocumentIdSysClassName) ? string.Concat(nowApproval.DocumentIdSysClassName.Replace(\"Approval\", \"\"), \" Approval\") : subCategory,\n            request = title,\n            details = nowApproval.SysapprovalDescription,\n            requestedBy = requestedBy,\n            // requestedByImage = requestedByImage,\n            createdDate = DateTime.SpecifyKind(nowApproval.SysCreatedOn, DateTimeKind.Utc).ToUniversalTime(),\n            link = new Uri(string.Format(\"{0}/sp?id=approval&table=sysapproval_approver&sys_id={1}\", nowApproval.DocumentId!.Link!.GetLeftPart(UriPartial.Authority), nowApproval.SysId)),\n            status = nowApproval.State\n        };\n    }\n\n    public List<Approval> MapToApprovalList(IList<NowApproval> nowApprovalList)\n    {\n        var approvals = new List<Approval>();\n        foreach (var n in nowApprovalList)\n            approvals.Add(MapToApproval(n));\n        return approvals;\n    }\n}\n\npublic class PAApprovalDataMapper\n{\n    private readonly Dictionary<string, Dictionary<string, string>> _propertyMappings = new Dictionary<string, Dictionary<string, string>>\n    {\n        { \"LOP Reversal\", new Dictionary<string, string> { { \"Velocity 5\", \"LOP Reversal Approval\" } } },\n        { \"FYA: The Candidate\", new Dictionary<string, string> { { \"Velocity 5\", \"RR Approval\" } } },\n        { \"Virtusa Management Level Approval\", new Dictionary<string, string> { { \"Velocity 5\", \"VML Approval\" } } },\n        { \"Notification For POC\",  new Dictionary<string, string> { { \"Velocity 5\", \"POC Approval\" } } },\n        { \"ALM - Chorus Project\", new Dictionary<string, string> { { \"Velocity 5\", \"ALM Project Approval\" } } },\n    };\n\n    public Approval MapToApproval(PAApproval paApproval, String environment)\n    {\n        Properties? properties = paApproval.properties;\n        string app = \"Power Automate\";\n        string application = app;\n        string subCategory = \"Power Automate Approval\";\n\n        foreach (string key in _propertyMappings.Keys)\n        {\n            if (properties != null && properties.title != null && properties.title.Contains(key))\n            {\n                var qry = from outer in _propertyMappings\n                            where outer.Key == key\n                            from inner in outer.Value\n                            select inner.Key + \"#\" + inner.Value;\n\n                application = qry.ElementAt(0).Split(\"#\")[0];\n                subCategory = qry.ElementAt(0).Split(\"#\")[1];\n                break;\n            }\n        }\n\n        return new Approval()\n        {\n            id = paApproval.name,\n            app = application,\n            appGroup = app,\n            subCategory = subCategory,\n            request = properties!.title,\n            details = string.IsNullOrEmpty(properties.details) ? \"\" : properties.details,\n            requestedBy = properties.principals?[0].displayName,\n            requestedByImage = properties.principals?[0].thumbnailPhoto,\n            createdDate = properties.creationDate,\n            link = new Uri(string.Format(\"https://make.powerautomate.com/environments/{0}approvals/received/{1}\", environment, paApproval.name)),\n            status = \"requested\"\n        };\n    }\n\n    public List<Approval> MapToApprovalList(List<PAApproval> paApprovalList, String environment)\n    {\n        List<Approval> approvalList = new List<Approval>();\n        List<string> options = new List<string>() { \"Approve\", \"Reject\" };\n\n        paApprovalList.RemoveAll(a => !options.All(a.properties!.userRequest!.responseOptions!.Contains));\n\n        List<string> titles = new List<string>() { \"Direct Project Approval\" };\n\n        paApprovalList.RemoveAll(a => titles.All(a.properties!.title!.Contains));\n\n        foreach (PAApproval paApproval in paApprovalList)\n        {\n            try\n            {\n                approvalList.Add(MapToApproval(paApproval, environment));\n            }\n            catch (Exception ex)\n            {\n                throw;\n            }\n        }\n        return approvalList;\n    }\n}\n\npublic class V5ApprovalDataMapper\n{\n    private readonly Dictionary<string, string> _propertyMappings = new Dictionary<string, string>\n    {\n        {\"AbsencesApprovalsTask\", \"Employee Absence Approval\"},\n        {\"ContractsApproval\", \"Contract Approval\"},\n        {\"ResignationApproval\", \"Employee Resignation Approval\"},\n        {\"ProjectStatusNotificationApproval\", \"Project Status Change Approval\"},\n        {\"TerminationsApproval\", \"Employee Termination Approval\"},\n        {\"ApprovePerformanceGoal\", \"Performance Goal Approval\"},\n        {\"FinExmWorkflowExpenseApproval\", \"Employee Expenses Approval\"},\n        {\"InvoiceApprovalHumantask\",\"AR Invoice Approval\"},\n        {\"ApprovePlanVersion\", \"Percentage of Completion Approval\"},\n        {\"ProfileCoreHumanTask\", \"Talent Profile Approval\"},\n        {\"SupplierInternalRegistrationApproval\", \"Supplier Portal Approval\"},\n        {\"FinGlJournalApproval\", \"Journal Approval\"},\n        {\"PaymentApproval\", \"Payment Approval\"},\n        {\"DocumentApproval\", \"Documents Approval\"},\n        {\"ChangeSalaryApprovalTask\", \"Salary Revision Approval\"},\n        {\"FinApInvoiceApproval\",\"AP Invoice Approval\"},\n        {\"ReqApproval\",\"Purchase Requisition Approval\"},\n        {\"BankAcctTransferRequestForAction\",\"Supplier Bank Account Transfer Approval\"},\n        {\"LearningRequestApproval\", \"Learning Requests Approval\"},\n        {\"CareerDevApproveGoal\",\"Development Goal Approval\"}\n    };\n\n    public Approval MapToApproval(V5Approval v5Approval)\n    {\n        string title = _propertyMappings.TryGetValue(v5Approval.taskDefinitionName!, out var name) ? name : \"Velocity 5 Approval\";\n\n        return new Approval()\n        {\n            id = v5Approval.number.ToString(),\n            app = \"Velocity 5\",\n            appGroup = \"Velocity5\",\n            subCategory = title,\n            request = title,\n            details = v5Approval.title,\n            requestedBy = v5Approval.fromUserDisplayName,\n            createdDate = Convert.ToDateTime(v5Approval.createdDate).ToUniversalTime(),\n            link = new Uri(v5Approval.detailsURL!.href!),\n            status = v5Approval.state\n        };\n    }\n\n    public List<Approval> MapToApprovalList(List<V5Approval> v5ApprovalList)\n    {\n        List<Approval> approvalList = new List<Approval>();\n        List<V5ActionList> options = new List<V5ActionList>() { new V5ActionList() { title = \"Approve\" }, new V5ActionList() { title = \"Reject\" } };\n\n        v5ApprovalList.RemoveAll(a => !options.All(a.actionList!.Contains));\n\n        foreach (V5Approval v5Approval in v5ApprovalList)\n        {\n            try\n            {\n                approvalList.Add(MapToApproval(v5Approval));\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n            }\n        }\n        return approvalList;\n    }\n}\n\npublic class V5PaaSApprovalDataMapper \n{\n    private readonly Dictionary<string, string> _propertyMappings = new Dictionary<string, string>\n    {\n        {\"BillingChangeWorkflow\", \"Billing Parameter Approval\"}\n    };\n\n    public Approval MapToApproval(V5PaaSApproval v5PaaSApproval, JsonElement payload)\n    {\n        Approval approval;\n\n        try\n        {\n            string title = _propertyMappings.TryGetValue(v5PaaSApproval.processName!, out var name) ? name : \"Velocity 5 PaaS Approval\";\n            approval = new Approval()\n            {\n                id = v5PaaSApproval.number.ToString(),\n                app = \"Velocity 5\",\n                appGroup = \"Velocity5 PaaS\",\n                subCategory = title,\n                request = title,\n                details = string.Format(\n                    \"Project : {0} \\r\\n\\r\\n Contract : {1}\",\n                    payload.GetProperty(\"projectName\").GetString(),\n                    payload.GetProperty(\"contractName\").GetString()\n                ),\n                requestedBy = v5PaaSApproval.fromUserDisplayName,\n                createdDate = v5PaaSApproval.createdDate,\n                link = new Uri(string.Format(\n                    \"https://{0}/ic/builder/rt/Billing_Solution/live/webApps/billingsolution/?ContractID={1}\",\n                    payload.GetProperty(\"instanceName\").GetString(),\n                    payload.GetProperty(\"contractID\").GetString()\n                )),\n                status = v5PaaSApproval.state\n            };\n        }\n        catch (Exception ex)\n        {\n            approval = new Approval();\n            // _logger.LogError(ex, ex.Message);\n        }\n\n        return approval;\n    }\n}\n\npublic class SkillApprovalDataMapper \n{\n    public Approval MapToApproval(SkillApproval skillApproval)\n    {\n        string email = skillApproval.email!;\n        string userPart = email.Contains(\"@\") ? email.Split('@')[0] : email;\n        string app = \"Skills\";\n\n        return new Approval()\n        {\n            id = skillApproval.employeeNumber,\n            app = app,\n            appGroup = app,\n            subCategory = \"Skills Approval\",\n            request = string.Concat(\"Skill :: \", skillApproval.skillName, \"###delimeter###\", skillApproval.referenceNumber),\n            details = skillApproval.rating.ToString(),\n            requestedBy = skillApproval.fullname,\n            // requestedByImage = skillApproval.email,\n            createdDate = DateTime.SpecifyKind(skillApproval.requestedDate, DateTimeKind.Utc).ToUniversalTime(),\n            link = new Uri(string.Format(\"https://vplus-profile-test.azurewebsites.net/users/{0}/pending-skills/\", userPart)),\n            status = \"requested\"\n        };\n    }\n\n    public List<Approval> MapToApprovalList(IList<SkillApproval> skillApprovalList)\n    {\n        List<Approval> approvalList = new List<Approval>();\n\n        foreach (SkillApproval skillApproval in skillApprovalList)\n        {\n            try\n            {\n                approvalList.Add(MapToApproval(skillApproval));\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n            }\n        }\n        return approvalList;\n    }\n}\n\npublic class SfdcApprovalDataMapper\n{\n    private readonly Dictionary<string, string> _propertyMappings = new Dictionary<string, string>\n        {\n            {\"Customers__c\", \"Customer Approval\"},\n            {\"SIMP_Project__c\", \"{0} Direct Project Approval {1} {2}\"},\n            {\"Light_Weight_DRP_Fallback_Option__c\", \"CPQ Lite Approval\"},\n            {\"Pre_Sales_Support__c\", \"Pre-Sales Approval\"},\n            {\"Requirement_Tracker__c\", \"Project Tracker Approval\"},\n            {\"Sales_Commission_Form__c\", \"Sales Commission Approval\"},\n            {\"Order_Booking__c\", \"Order Booking Approval\"},\n            {\"CS_Incentive_Form__c\", \"Initiate CS Incentive Approval\"}\n        };\n\n    public Approval MapToApproval(SfdcApproval sfdcApproval)\n    {\n        string app = \"Salesforce\";\n        string subCategory = \"Salesforce Approval\";\n\n        if (sfdcApproval.ProcessInstance == null)\n        {\n            QuoteR? quote = sfdcApproval.Quote__r;\n\n            return new Approval()\n            {\n                id = sfdcApproval.Id,\n                app = app,\n                appGroup = \"Salesforce CPQ\",\n                subCategory = quote != null ? \"CPQ Approval\" : subCategory,\n                request = quote != null ? string.Format(\"Deal Review Approval {0} {1} {2}\", quote.SBQQ__Account__r?.Name, quote.SBQQ__Opportunity2__r?.Opportunity_ID__c, quote.Name) : subCategory,\n                details = GetDetailsForCPQApprovals(quote, sfdcApproval.sbaa__CommentsLong__c),\n                requestedBy = sfdcApproval.Owner?.Name,\n                createdDate = Convert.ToDateTime(sfdcApproval.CreatedDate).ToUniversalTime(),\n                link = new Uri(string.Format(\"https://virtusa--fullcbox2.sandbox.my.salesforce.com/{0}\", sfdcApproval.Id)),\n                status = sfdcApproval.sbaa__Status__c\n            };\n        }\n        else\n        {\n            TargetObject? targetObject = sfdcApproval.ProcessInstance.TargetObject;\n            string title = targetObject != null && targetObject.attributes != null && targetObject.attributes.url != null && _propertyMappings.TryGetValue(targetObject.attributes.url.Split('/')[5], out var name) ? name : subCategory;\n            string environment = \"https://virtusa--fullcbox2.sandbox.my.salesforce.com/{0}\".Contains(\".sandbox.my.salesforce.com\") ? \"Sandbox:\" : string.Empty;\n            string url = String.Format(\"p/process/ProcessInstanceWorkitemWizardStageManager?id={0}\", sfdcApproval.Id);\n\n            return new Approval()\n            {\n                id = sfdcApproval.Id,\n                app = app,\n                appGroup = app,\n                subCategory = string.Format(title, string.Empty, string.Empty, string.Empty).Trim(),\n                request = targetObject != null ? string.Format(title, environment, targetObject.Name, targetObject.Project_Name__c) : title,\n                details = GetDetailsForStandardApprovals(targetObject),\n                requestedBy = sfdcApproval.CreatedBy?.Name,\n                createdDate = Convert.ToDateTime(sfdcApproval.CreatedDate).ToUniversalTime(),\n                link = new Uri(string.Format(\"https://virtusa--fullcbox2.sandbox.my.salesforce.com/{0}\", url)),\n                status = sfdcApproval.ProcessInstance.Status\n            };\n        }\n    }\n\n    private static string GetDetailsForCPQApprovals(QuoteR? quote, string? comment)\n    {\n        if (quote == null)\n        {\n            return string.Empty;\n        }\n\n        SbqqOpportunity2R? opportunity = quote.SBQQ__Opportunity2__r;\n\n        return string.Format(\"A. Opportunity Information  \\r\\nSFID : {0}  \\r\\nGroup SBU : {1}  \\r\\nAccount Name : {2}  \\r\\nOpportunity Name : {3}  \\r\\nOpportunity Amount : {4} {5}  \\r\\nOpportunity Stage : {6}  \\r\\nStart date : {7}  \\r\\nEnd date : {8}  \\r\\nDeal Type : {9}  \\r\\nProject Type : {10}  \\r\\nQuote Currency : {11} \\r\\n\\r\\n B. Deal Metrics  \\r\\nTotal Contract Value(excl VD) : {12}  \\r\\nRevenue Net of Volume Discount : {13}  \\r\\nAM BCB % : {14}  \\r\\nAM ACB % : {15}  \\r\\nReview Comments : {16} \\r\\n\\r\\n C. Efficacy of Market Rates  \\r\\nProvider and Benchmark Rates : {17}  \\r\\nTCV as per Benchmark Rates : {18}  \\r\\nAM BCB as per Benchmark rates : {19}  \\r\\nTCV Variance % (Virtusa TCV vs Benchmark TCV) : {20}  \\r\\nMargin Variance % (Virtusa AM BCB% vs Benchmark AM BCB%) : {21} \\r\\n\\r\\n D.Deal KPIs  \\r\\nFTE : Overall-{22} Onsite-{23} Offshore-{24}  \\r\\n% of Resource Mix : Overall-{25} Onsite-{26} Offshore-{27}  \\r\\nPHR : Overall-{28} Onsite-{29} Offshore-{30} \\r\\n\\r\\n Pyramid  \\r\\nT0 : Overall-{31} Onsite-{32} Offshore-{33}  \\r\\nT1 : Overall-{34} Onsite-{35} Offshore-{36}  \\r\\nT2 : Overall-{37} Onsite-{38} Offshore-{39}  \\r\\nT3 : Overall-{40} Onsite-{41} Offshore-{42}  \\r\\nT4 : Overall-{43} Onsite-{44} Offshore-{45}  \\r\\n\", opportunity?.Opportunity_ID__c, opportunity?.Group_SBU__c, quote.SBQQ__Account__r?.Name, opportunity?.Name, opportunity?.CurrencyIsoCode, opportunity?.Amount, opportunity?.StageName, quote.SBQQ__StartDate__c, quote.SBQQ__EndDate__c, opportunity?.Deal_Type__c, opportunity?.Quote_Project_Type__c, opportunity?.CurrencyIsoCode, quote.Total_Contract_Value_excl_VD__c, quote.Revenue_Net_of_Volume_Discount__c, quote.AM_BCB__c, quote.AM_ACB__c, comment, quote.Provider_and_Benchmark_Rates__c, quote.TCV_Using_Market_Rate__c, quote.AM_BCB_using_Market_Rates__c, quote.Variance_of_TCV_and_TCV_using_Market_Rat__c, quote.Margin_Variance__c, quote.FTE_Overall__c, quote.FTE_Onsite__c, quote.FTE_Offshore__c, quote.of_Resource_Mix_Overall__c, quote.of_Resource_Mix_Onsite__c, quote.of_Resource_Mix_Offshore__c, quote.PHR_Overall__c, quote.PHR_Onsite__c, quote.PHR_Offshore__c, quote.Pyramid__c, quote.Pyramid_T0_Onsite__c, quote.Pyramid_T0_Offshore__c, quote.Pyramid_T1_Global__c, quote.Pyramid_T1_onsite__c, quote.Pyramid_T1_Offshore__c, quote.Pyramid_T2_Global__c, quote.Pyramid_T2_Onsite__c, quote.Pyramid_T2_Offshore__c, quote.Pyramid_T3_Global__c, quote.Pyramid_T3_Onsite__c, quote.Pyramid_T3_Offshore__c, quote.Pyramid_T4_Global__c, quote.Pyramid_T4_Onsite__c, quote.Pyramid_T4_Offshore__c);\n    }\n\n    private static string GetDetailsForStandardApprovals(TargetObject? targetObject)\n    {\n\n        if (targetObject == null)\n        {\n            return string.Empty;\n        }\n\n        Attributes? attributes = targetObject.attributes;\n\n        return (attributes != null && attributes.url != null && attributes.url.Split('/')[5] == \"SIMP_Project__c\") ? string.Format(\"Project Code : {0}  \\r\\nProject Name : {1}  \\r\\nProject Start Date : {2}  \\r\\nLegal Customer : {3}  \\r\\nBusiness Unit : {4}  \\r\\nDelivery Project Type : {5}  \\r\\nCurrency : {6}  \\r\\nProject Url : [Click Here]({7})  \\r\\n\", targetObject.Name, targetObject.Project_Name__c, targetObject.Project_Start_Date__c, targetObject.Customers__c, targetObject.VRTU_Business_Unit__c, targetObject.Engagement_Type__c, targetObject.Project_Currency__c, new Uri(string.Format(\"https://virtusa--fullcbox2.sandbox.my.salesforce.com/{0}\", targetObject.Id))) : string.Format(\"Name : {0}\", targetObject.Name);\n    }\n\n    public List<Approval> MapToApprovalList(List<SfdcApproval> sfdcApprovalList)\n    {\n        List<Approval> approvalList = new List<Approval>();\n        foreach (SfdcApproval sfdcApproval in sfdcApprovalList)\n        {\n            try\n            {\n                approvalList.Add(MapToApproval(sfdcApproval));\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n            }\n        }\n        return approvalList;\n    }\n}\n\npublic class TaleoApprovalDataMapper\n{\n    public Approval MapToApproval(TaleoApproval taleoApproval)\n    {\n        //requisitionNumber\n        string url = string.Format(taleoApproval.type == \"Requisition\" ? \"approveRequisition&contestNumber={0}\" : \"approveOffer&offerNumber={0}\", taleoApproval.approvalId);\n\n        return new Approval\n        {\n            id = taleoApproval.approvalId,\n            app = \"Velocity 5\",\n            appGroup = \"Taleo\",\n            subCategory = string.Concat(taleoApproval.type, \" Approval\"),\n            request = string.Concat(taleoApproval.request, \"###delimeter###\", taleoApproval.type),\n            details = taleoApproval.details!.Replace(\"#\", \"  \\r\\n\"),\n            requestedBy = taleoApproval.requestedBy,\n            createdDate = taleoApproval.createdDate,\n            link = new Uri(string.Format(\"https://virtusapolariss02.taleo.net/enterprise/publicurl/tasks?type={0}\", url)),\n            status = taleoApproval.status\n        };\n    }\n\n    public List<Approval> MapToApprovalList(List<TaleoApproval> taleoApprovalList)\n    {\n        List<Approval> approvalList = new List<Approval>();\n        foreach (TaleoApproval taleoApproval in taleoApprovalList)\n        {\n            try\n            {\n                approvalList.Add(MapToApproval(taleoApproval));\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n            }\n        }\n        return approvalList;\n    }\n}\n\npublic class OutlookApprovalDataMapper\n{\n    public Approval MapToApproval(OutlookApproval outlookApproval)\n    {\n        return new Approval\n        {\n            id = outlookApproval.singleValueExtendedProperties?.Find(x => x.id == \"Binary 0x31\")?.value,\n            app = \"Outlook\",\n            appGroup = \"Outlook\",\n            subCategory = \"Outlook Approval\",\n            request = string.Concat(outlookApproval.subject, \"###delimeter###\", outlookApproval.sender?.emailAddress?.address),\n            details = string.Concat(outlookApproval.bodyPreview?.Split(\"\\r\\n\\r\\n\\r\\n________________________________\\r\\n\\r\\n\")[0], \". Click \\\"More Info\\\" to view the details of this mail including the attachment/s (opens in new tab/window).\"),\n            requestedBy = outlookApproval.from?.emailAddress?.name,\n            createdDate = outlookApproval.createdDateTime,\n            link = new Uri(outlookApproval.webLink!),\n            status = \"requested\"\n        };\n    }\n\n    public List<Approval> MapToApprovalList(List<OutlookApproval> outlookApprovalList)\n    {\n        List<Approval> approvalList = new List<Approval>();\n        foreach (OutlookApproval outlookApproval in outlookApprovalList)\n        {\n            try\n            {\n                approvalList.Add(MapToApproval(outlookApproval));\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n            }\n        }\n        return approvalList;\n    }\n}\n\n\n// ----- Data Providers -----\n\npublic class NowApprovalDataProvider\n{\n    private readonly NowApprovalDataMapper _mapper;\n\n    private readonly HttpClient tokenClient;\n    private readonly HttpClient nowClient;\n    private readonly HttpClient nowPatchClient;\n\n    public NowApprovalDataProvider()\n    {\n        tokenClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/accesstokenapi/v1/token\")\n        };\n        tokenClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"d6f3f63f50854c0990cd61dbd7e64057\");\n\n        nowClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/now-approvals-read/v1/api/now/table/\")\n        };\n        nowClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"d6f3f63f50854c0990cd61dbd7e64057\");\n\n        nowPatchClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/now-approvals-crud/v1/api/now/table/\")\n        };\n        nowPatchClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"e173134d94d34ce8a12ebe02e69d5b3e\");\n\n        _mapper = new NowApprovalDataMapper();\n    }\n\n    public async Task<List<Approval>> GetNowApprovalsAsync(string email)\n    {\n        Console.WriteLine($\"starting approvals from ServiceNow\");\n        List<Approval> approvalListToSend = new List<Approval>();\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", \"81ed145c-3c8f-4116-b71c-56c137e8f173\", \"DG58Q~aBlrpchqfbTwRDRRUOXGHxPJw-hE0K~bov\"), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"sysapproval_approver?sysparm_query=approver.email={0}&state=requested&sysparm_display_value=true&sysparm_fields=sys_id,document_id.description,document_id.short_description,sys_created_by,sys_created_on,state,document_id,document_id.name,document_id.sys_class_name,source_table,document_id.requested_for.name,document_id.requested_for.email,document_id.author.name,document_id.author.email,document_id.requested_by.name,document_id.requested_by.email,document_id.assigned_to.name,document_id.assigned_to.email,document_id.opened_by.name,document_id.opened_by.email\", email));\n\n        try\n        {\n            HttpResponseMessage paGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n            if (!paGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                Console.WriteLine($\"Response status code does not indicate success. Response : {paGetTokenApiResponse.Content.ReadAsStringAsync().Result}\");\n            }\n\n            var tokenResponseJson = await paGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n            var jsonDoc = JsonDocument.Parse(tokenResponseJson);\n            var root = jsonDoc.RootElement;\n\n            string tokenType = root.GetProperty(\"token_type\").GetString()!;\n            string accessToken = root.GetProperty(\"access_token\").GetString()!;\n\n            nowClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n            // dynamic objects = JsonSerializer.Deserialize<dynamic>(paGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            // nowClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpResponseMessage nowGetUSerApiResponse = await nowClient.SendAsync(getUserRequest);\n            if (!nowGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                Console.WriteLine($\"Response status code does not indicate success. Response : {nowGetUSerApiResponse.Content.ReadAsStringAsync().Result}\");\n            }\n\n            NowApprovalList nowApprovalList = JsonSerializer.Deserialize<NowApprovalList>(nowGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            approvalListToSend.AddRange(_mapper.MapToApprovalList(nowApprovalList.Items!));\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error : {ex.Message}\");\n        }\n        Console.WriteLine($\"ending approvals from ServiceNow\");\n\n        return approvalListToSend;\n    }\n\n    public async Task PatchNowApprovalAsync(List<Approval> approvalList, string email)\n    {\n        Console.WriteLine($\"start sending approvals to ServiceNow\");\n        foreach (Approval approval in approvalList)\n        {\n            string status = approval.status!.ToLower();\n            string comment = approval.comment!;\n            if (string.IsNullOrEmpty(status) || (!string.IsNullOrEmpty(status) && status != \"approve\" && status != \"reject\") || (!string.IsNullOrEmpty(status) && status == \"reject\" && string.IsNullOrEmpty(comment)))\n            {\n                continue;\n            }\n\n            HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", \"81ed145c-3c8f-4116-b71c-56c137e8f173\", \"DG58Q~aBlrpchqfbTwRDRRUOXGHxPJw-hE0K~bov\"), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n            HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Patch, string.Format(\"sysapproval_approver/{0}\", approval.id));\n            Dictionary<string, string> data = new Dictionary<string, string> { { \"state\", status == \"approve\" ? \"approved\" : \"rejected\" }, { \"comments\", string.Concat(string.Format(\"{0} has performed action via Approvals App\", email), Environment.NewLine, string.IsNullOrEmpty(comment) ? comment : string.Format(\"User Comment :{0}\", comment)) } };\n            patchUserRequest.Content = new StringContent(JsonSerializer.Serialize(data), Encoding.UTF8, \"application/json\");\n            try\n            {\n                HttpResponseMessage paGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n                if (!paGetTokenApiResponse.IsSuccessStatusCode)\n                {\n                    Console.WriteLine($\"Response status code does not indicate success. Response : {paGetTokenApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                var tokenResponseJson = await paGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n                var jsonDoc = JsonDocument.Parse(tokenResponseJson);\n                var root = jsonDoc.RootElement;\n\n                string tokenType = root.GetProperty(\"token_type\").GetString()!;\n                string accessToken = root.GetProperty(\"access_token\").GetString()!;\n\n                nowClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n                // dynamic objects = JsonSerializer.Deserialize<dynamic>(paGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                // nowPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n                HttpResponseMessage nowPatchUserApiResponse = await nowPatchClient.SendAsync(patchUserRequest);\n                if (!nowPatchUserApiResponse.IsSuccessStatusCode)\n                {\n                    Console.WriteLine($\"Response status code does not indicate success. Response : {nowPatchUserApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                nowPatchUserApiResponse.EnsureSuccessStatusCode();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error : {ex.Message}\");\n                throw;\n            }\n        }\n        Console.WriteLine($\"end sending approvals to ServiceNow\");\n    }\n}\n\n\npublic class PAApprovalDataProvider\n{\n    private readonly HttpClient paClient;\n    private readonly HttpClient paNextClient;\n    private readonly PAApprovalDataMapper _paApprovalDataMapper;\n    \n    public PAApprovalDataProvider()\n    {\n        paClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://api.flow.microsoft.com/providers/Microsoft.ProcessSimple/environments/2a54112c-27fc-4d2d-bcd4-e607fc53e9d8/\")\n        };\n        paClient.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n\n        paNextClient = new HttpClient();\n\n        _paApprovalDataMapper = new PAApprovalDataMapper();\n    }\n\n    public async Task<List<Approval>> GetPAApprovalsAsync(String token)\n    {\n        // _logger.LogInformation(\"starting approvals from Power Automate\");\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, \"approvalViews?$filter=properties%2FuserRole+eq+%27Approver%27+and+properties%2FisActive+eq+%27true%27&api-version=2016-11-01\");\n        paClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<PAApproval> paApprovalList = new List<PAApproval>();\n\n        try\n        {\n            HttpResponseMessage paGetUSerApiResponse = await paClient.SendAsync(getUserRequest);\n            if (!paGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", paGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            PAApprovalList approvalList = JsonSerializer.Deserialize<PAApprovalList>(paGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            paApprovalList.AddRange(approvalList.items!);\n\n            while (!string.IsNullOrEmpty(approvalList.nextLink))\n            {\n                HttpRequestMessage getNextUserRequest = new HttpRequestMessage(HttpMethod.Get, approvalList.nextLink);\n                paNextClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                paGetUSerApiResponse = await paNextClient.SendAsync(getNextUserRequest);\n                if (!paGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", paGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                approvalList = JsonSerializer.Deserialize<PAApprovalList>(paGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                paApprovalList.AddRange(approvalList.items!);\n            }\n\n            approvalListToSend.AddRange(_paApprovalDataMapper.MapToApprovalList(paApprovalList, paClient.BaseAddress!.Segments[4]));\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n\n        }\n        // _logger.LogInformation(\"ending approvals from Power Automate\");\n        return approvalListToSend;\n    }\n\n    public async Task PatchPAApprovalAsync(List<Approval> approvalList, string token)\n    {\n        // _logger.LogInformation(\"start sending approvals to Power Automate\");\n        foreach (Approval approval in approvalList)\n        {\n            string status = approval.status!.ToLower();\n            string comment = approval.comment!;\n            if (string.IsNullOrEmpty(status) || (!string.IsNullOrEmpty(status) && status != \"approve\" && status != \"reject\") || (!string.IsNullOrEmpty(status) && status == \"reject\" && string.IsNullOrEmpty(comment)))\n            {\n                continue;\n            }\n\n            HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Post, string.Format(\"approvals/{0}/approvalResponses?api-version=2016-11-01\", approval.id));\n            Dictionary<string, Dictionary<string, string>> data = new Dictionary<string, Dictionary<string, string>> { { \"Properties\", new Dictionary<string, string> { { \"response\", status }, { \"comments\", comment } } } };\n\n            patchUserRequest.Content = new StringContent(JsonSerializer.Serialize(data), Encoding.UTF8, \"application/json\");\n\n            paClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n            try\n            {\n                HttpResponseMessage paPatchUserApiResponse = await paClient.SendAsync(patchUserRequest);\n                if (!paPatchUserApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", paPatchUserApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                paPatchUserApiResponse.EnsureSuccessStatusCode();\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n                throw;\n            }\n        }\n\n        // _logger.LogInformation(\"end sending approvals to Power Automate\");\n    }\n}\n\npublic class V5ApprovalDataProvider\n{\n    private readonly HttpClient v5Client = new HttpClient();\n    private readonly HttpClient v5PatchClient = new HttpClient();\n    private readonly V5ApprovalDataMapper _v5ApprovalDataMapper;\n\n    private readonly string V5BaseUrl = \"https://temp-v5-base-url/\";\n\n    public V5ApprovalDataProvider()\n    {\n        v5Client = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/v5-bpm-task-api/v1/\")\n        };\n        v5Client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"f6d6b160d1bc46edb19b0e00d468ebff\");\n\n        v5PatchClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/v5-bpm-task-crud-api/v1/\")\n        };\n        v5PatchClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"5ba22b06303d46ed9440bde8064aa4e6\");\n\n        _v5ApprovalDataMapper = new V5ApprovalDataMapper();\n    }\n\n    public async Task<List<Approval>> GetV5ApprovalsAsync(String token)\n    {\n        // _logger.LogInformation(\"starting approvals from Velocity5\");\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<V5Approval> v5ApprovalList = new List<V5Approval>();\n        int offset = 0;\n\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"tasks?limit=100&offset={0}&metadataFlag=true&showActionFlag=true&totalResults=false\", offset));\n\n        try\n        {\n            v5Client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n            HttpResponseMessage v5GetUSerApiResponse = await v5Client.SendAsync(getUserRequest);\n            if (!v5GetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", v5GetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            V5ApprovalList approvalList = JsonSerializer.Deserialize<V5ApprovalList>(v5GetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            v5ApprovalList.AddRange(approvalList.items!);\n\n            while (approvalList.hasMore)\n            {\n                offset += 100;\n                getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"tasks?limit=100&offset={0}&metadataFlag=true&showActionFlag=true&totalResults=false\", offset));\n                v5GetUSerApiResponse = await v5Client.SendAsync(getUserRequest);\n                if (!v5GetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", v5GetUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                approvalList = JsonSerializer.Deserialize<V5ApprovalList>(v5GetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                v5ApprovalList.AddRange(approvalList.items!);\n            }\n\n            approvalListToSend.AddRange(_v5ApprovalDataMapper.MapToApprovalList(v5ApprovalList));\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n        }\n\n        // _logger.LogInformation(\"ending approvals from Velocity5\");\n\n        return approvalListToSend;\n    }\n\n    public async Task PatchV5ApprovalAsync(List<Approval> approvalList, string token)\n    {\n        // _logger.LogInformation(\"start sending approvals to Velocity5\");\n\n        List<Approval> approveList = approvalList.FindAll(s => s.status?.ToLower() == \"approve\");\n        List<Approval> rejectList = approvalList.FindAll(s => s.status?.ToLower() == \"reject\");\n\n        string comment = string.Join(\"\", rejectList.Select(g => g.comment).Distinct());\n\n        var approveObject = new Dictionary<string, object>\n            {\n                [\"action\"] = new Dictionary<string, string>\n                {\n                    [\"id\"] = \"APPROVE\"\n                },\n                [\"tasks\"] = approveList.Select(c => c.id).ToList()\n            };\n\n        // JObject approveObject =\n        //         new JObject(\n        //             new JProperty(\"action\",\n        //                 new JObject(\n        //                     new JProperty(\"id\", \"APPROVE\"))),\n        //             new JProperty(\"tasks\",\n        //                     new JArray(\n        //                     from c in approveList\n        //                     select new JValue(c.id))));\n\n        // JObject rejectObject =\n        //         new JObject(\n        //             new JProperty(\"action\",\n        //                 new JObject(\n        //                     new JProperty(\"id\", \"REJECT\"))),\n        //             new JProperty(\"tasks\",\n        //                     new JArray(\n        //                     from c in rejectList\n        //                     select new JValue(c.id))),\n        //             new JProperty(\"comment\",\n        //                         new JObject(\n        //                     new JProperty(\"commentStr\", comment),\n        //                     new JProperty(\"commentScope\", \"TASK\"))));\n\n        var rejectObject = new Dictionary<string, object>\n            {\n                [\"action\"] = new Dictionary<string, string>\n                {\n                    [\"id\"] = \"REJECT\"\n                },\n                [\"tasks\"] = rejectList.Select(c => c.id).ToList(),\n                [\"comment\"] = new Dictionary<string, string>\n                {\n                    [\"commentStr\"] = comment,\n                    [\"commentScope\"] = \"TASK\"\n                }\n            };\n\n        HttpRequestMessage patchUserRequestApprove = new HttpRequestMessage(HttpMethod.Put, \"tasks\");\n        HttpRequestMessage patchUserRequestReject = new HttpRequestMessage(HttpMethod.Put, \"tasks\");\n\n        v5PatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n        try\n        {\n            if (approveList.Count > 0)\n            {\n                patchUserRequestApprove.Content = new StringContent(JsonSerializer.Serialize(approveObject), Encoding.UTF8, \"application/json\");\n                HttpResponseMessage v5PatchUserApiApproveResponse = await v5PatchClient.SendAsync(patchUserRequestApprove);\n                if (!v5PatchUserApiApproveResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", v5PatchUserApiApproveResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                v5PatchUserApiApproveResponse.EnsureSuccessStatusCode();\n            }\n\n            if (rejectList.Count > 0 && !string.IsNullOrEmpty(comment))\n            {\n                patchUserRequestReject.Content = new StringContent(JsonSerializer.Serialize(rejectObject), Encoding.UTF8, \"application/json\");\n                HttpResponseMessage v5PatchUserApiRejectResponse = await v5PatchClient.SendAsync(patchUserRequestReject);\n                if (!v5PatchUserApiRejectResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", v5PatchUserApiRejectResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                v5PatchUserApiRejectResponse.EnsureSuccessStatusCode();\n            }\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n            throw;\n        }\n        // _logger.LogInformation(\"end sending approvals to Velocity5\");\n    }\n}\n\npublic class V5PaaSApprovalDataProvider\n{\n    private readonly V5PaaSApprovalDataMapper _v5PaaSApprovalDataMapper;\n    private readonly HttpClient v5PaaSGetClient;\n    private readonly HttpClient v5PaaSPatchClient;\n\n    public V5PaaSApprovalDataProvider()\n    {\n        v5PaaSGetClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/billing-solution-approvals-read/v1/\")\n        };\n        v5PaaSGetClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"d6f3f63f50854c0990cd61dbd7e64057\");\n\n        v5PaaSPatchClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/billing-solution-approvals-crud/v1/\")\n        };\n        v5PaaSPatchClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"e173134d94d34ce8a12ebe02e69d5b3e\");\n\n        _v5PaaSApprovalDataMapper = new V5PaaSApprovalDataMapper();\n    }\n\n    public async Task<List<Approval>> GetV5PaaSApprovalsAsync(string token)\n    {\n        // _logger.LogInformation(\"starting approvals from Velocity5 PaaS\");\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<V5PaaSApproval> v5PaaSApprovalList = new List<V5PaaSApproval>();\n        int offset = 0;\n\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"tasks?limit=100&offset={0}&totalResults=false&process=BillingChangeWorkflow\", offset));\n\n        try\n        {\n            v5PaaSGetClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n            HttpResponseMessage getUserResponse = await v5PaaSGetClient.SendAsync(getUserRequest);\n            if (!getUserResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", getUserResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            V5PaaSApprovalList approvalList = JsonSerializer.Deserialize<V5PaaSApprovalList>(getUserResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            v5PaaSApprovalList.AddRange(approvalList.items!);\n\n            while (approvalList.hasMore)\n            {\n                offset += 100;\n                getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"tasks?limit=100&offset={0}&totalResults=false&process=BillingChangeWorkflow\", offset));\n                getUserResponse = await v5PaaSGetClient.SendAsync(getUserRequest);\n                if (!getUserResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", getUserResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                approvalList = JsonSerializer.Deserialize<V5PaaSApprovalList>(getUserResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                v5PaaSApprovalList.AddRange(approvalList.items!);\n            }\n\n            foreach (V5PaaSApproval v5ApprovalList in v5PaaSApprovalList)\n            {\n                HttpRequestMessage getPayloadRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"tasks/{0}/payload\", v5ApprovalList.number));\n                HttpResponseMessage getPayloadResponse = await v5PaaSGetClient.SendAsync(getPayloadRequest);\n                if (!getPayloadResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", getPayloadResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                var payloadJson = await getPayloadResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n                var payloadDoc = JsonDocument.Parse(payloadJson);\n                var payloadRoot = payloadDoc.RootElement;\n\n                approvalListToSend.Add(_v5PaaSApprovalDataMapper.MapToApproval(v5ApprovalList, payloadRoot));\n\n                // dynamic payload = JsonSerializer.Deserialize<dynamic>(getPayloadResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                // approvalListToSend.Add(_v5PaaSApprovalDataMapper.MapToApproval(v5ApprovalList, payload));\n            }\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n        }\n        // _logger.LogInformation(\"ending approvals from Velocity5 PaaS\");\n        return approvalListToSend;\n    }\n\n    public async Task PatchV5PaaSApprovalAsync(List<Approval> approvalList, string token)\n    {\n        // _logger.LogInformation(\"start sending approvals to Velocity5 PaaS\");\n\n        List<Approval> approveList = approvalList.FindAll(s => s.status?.ToLower() == \"approve\");\n        List<Approval> rejectList = approvalList.FindAll(s => s.status?.ToLower() == \"reject\");\n\n        string comment = string.Join(\"\", rejectList.Select(g => g.comment).Distinct());\n\n        var approveObject = new Dictionary<string, object>\n        {\n            [\"action\"] = new Dictionary<string, string>\n            {\n                [\"id\"] = \"APPROVE\",\n                [\"type\"] = \"CUSTOM\"\n            },\n            [\"tasks\"] = approveList.Select(c => c.id).ToList()\n        };\n\n        // JObject approveObject =\n        //         new JObject(\n        //             new JProperty(\"action\",\n        //             new JObject(\n        //                 new JProperty(\"id\", \"APPROVE\"),\n        //                 new JProperty(\"type\", \"CUSTOM\"))),\n        //                 new JProperty(\"tasks\",\n        //                 new JArray(\n        //                     from c in approveList\n        //                     select new JValue(c.id))));\n\n        // JObject rejectObject =\n        //         new JObject(\n        //             new JProperty(\"action\",\n        //             new JObject(\n        //                 new JProperty(\"id\", \"REJECT\"),\n        //                 new JProperty(\"type\", \"CUSTOM\"))),\n        //                 new JProperty(\"comment\",\n        //                 new JObject(\n        //                     new JProperty(\"commentStr\", comment),\n        //                     new JProperty(\"commentScope\", \"BPM\"))),\n        //                     new JProperty(\"tasks\",\n        //                     new JArray(\n        //                         from c in rejectList\n        //                         select new JValue(c.id))));\n\n        var rejectObject = new Dictionary<string, object>\n        {\n            [\"action\"] = new Dictionary<string, string>\n            {\n                [\"id\"] = \"REJECT\",\n                [\"type\"] = \"CUSTOM\"\n            },\n            [\"comment\"] = new Dictionary<string, string>\n            {\n                [\"commentStr\"] = comment,\n                [\"commentScope\"] = \"BPM\"\n            },\n            [\"tasks\"] = rejectList.Select(c => c.id).ToList()\n        };\n\n        HttpRequestMessage patchUserRequestApprove = new HttpRequestMessage(HttpMethod.Put, \"tasks\");\n        HttpRequestMessage patchUserRequestReject = new HttpRequestMessage(HttpMethod.Put, \"tasks\");\n\n        v5PaaSPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n        try\n        {\n            if (approveList.Count > 0)\n            {\n                patchUserRequestApprove.Content = new StringContent(JsonSerializer.Serialize(approveObject), Encoding.UTF8, \"application/json\");\n                HttpResponseMessage v5PaaSPatchUserApiApproveResponse = await v5PaaSPatchClient.SendAsync(patchUserRequestApprove);\n                if (!v5PaaSPatchUserApiApproveResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", v5PaaSPatchUserApiApproveResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                v5PaaSPatchUserApiApproveResponse.EnsureSuccessStatusCode();\n            }\n\n            if (rejectList.Count > 0 && !string.IsNullOrEmpty(comment))\n            {\n                patchUserRequestReject.Content = new StringContent(JsonSerializer.Serialize(rejectObject), Encoding.UTF8, \"application/json\");\n                HttpResponseMessage v5PaaSPatchUserApiRejectResponse = await v5PaaSPatchClient.SendAsync(patchUserRequestReject);\n                if (!v5PaaSPatchUserApiRejectResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", v5PaaSPatchUserApiRejectResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                v5PaaSPatchUserApiRejectResponse.EnsureSuccessStatusCode();\n            }\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n            throw;\n        }\n\n        // _logger.LogInformation(\"end sending approvals to Velocity5 PaaS\");\n    }\n}\n\npublic class SkillApprovalDataProvider\n{\n    private readonly HttpClient tokenClient;\n    private readonly HttpClient skillClient;\n    private readonly HttpClient skillPatchClient;\n    private readonly HttpClient employeeClient;\n\n    private readonly string clientId = \"81ed145c-3c8f-4116-b71c-56c137e8f173\";\n    private readonly string clientSecret = \"DG58Q~aBlrpchqfbTwRDRRUOXGHxPJw-hE0K~bov\";\n    private readonly string clientScope = \"dec4789f-9b46-42b8-9c6d-9cda0b0a4a7e\";\n\n    private readonly SkillApprovalDataMapper _skillApprovalDataMapper;\n\n    public SkillApprovalDataProvider()\n    {\n        tokenClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/accesstokenapi/v1/token\")\n        };\n        tokenClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"d6f3f63f50854c0990cd61dbd7e64057\");\n\n        skillClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/vplus-profile-f-test-readonly/v1/\")\n        };\n        skillClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"f6d6b160d1bc46edb19b0e00d468ebff\");\n\n        skillPatchClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/vplus-profile-f-test/v1/\")\n        };\n        skillPatchClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"f6d6b160d1bc46edb19b0e00d468ebff\");\n\n        employeeClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/v5-workers-api/v1/workers\")\n        };\n        employeeClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"f6d6b160d1bc46edb19b0e00d468ebff\");\n        employeeClient.DefaultRequestHeaders.Add(\"REST-Framework-Version\", \"4\");\n\n        _skillApprovalDataMapper = new SkillApprovalDataMapper();\n    }\n\n    public async Task<List<Approval>> GetSKillApprovalsAsync(string email)\n    {\n        // _logger.LogInformation(\"starting approvals from Skill\");\n        List<Approval> approvalListToSend = new List<Approval>();\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content =\n                                                                                                            new StringContent($\"client_id={clientId}&grant_type=client_credentials&client_secret={clientSecret}&resource={clientScope}\",\n                                                                                                            Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n        string userPart = email.Contains(\"@\") ? email.Split('@')[0] : email;\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"GetSkillsApprovalsPendingList?UserName={0}\", userPart));\n\n        try\n        {\n            HttpResponseMessage skillGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n            if (!skillGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", skillGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n            }\n            \n            var tokenResponseJson = await skillGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n            var jsonDoc = JsonDocument.Parse(tokenResponseJson);\n            var root = jsonDoc.RootElement;\n\n            string tokenType = root.GetProperty(\"token_type\").GetString()!;\n            string accessToken = root.GetProperty(\"access_token\").GetString()!;\n\n            skillClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n            // dynamic objects = JsonSerializer.Deserialize<dynamic>(skillGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            // skillClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpResponseMessage skillGetUSerApiResponse = await skillClient.SendAsync(getUserRequest);\n            if (!skillGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", skillGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            IList<SkillApproval> payload = JsonSerializer.Deserialize<IList<SkillApproval>>(skillGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            if (payload is not null)\n            {\n                approvalListToSend.AddRange(_skillApprovalDataMapper.MapToApprovalList(payload));\n            }\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n        }\n        // _logger.LogInformation(\"ending approvals from Skill\");\n        return approvalListToSend;\n    }\n\n    public async Task PatchSkillApprovalAsync(List<Approval> approvalList, string email, string token)\n    {\n        // _logger.LogInformation(\"start sending approvals to Skills\");\n\n        IEnumerable<IGrouping<string, Approval>>? groupByIdQuery = from approval in approvalList\n                                                                    group approval by approval.id into newGroup\n                                                                    select newGroup;\n\n        HttpRequestMessage getPersonNumberUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"?onlyData=true&q=upper(emails.EmailAddress)='{0}'\", email.ToUpper()));\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", clientId, clientSecret), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n        if (groupByIdQuery.Any())\n        {\n            try\n            {\n                HttpResponseMessage pnGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n                if (!pnGetTokenApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", pnGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                var tokenResponseJson = await pnGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n                var jsonDocToken = JsonDocument.Parse(tokenResponseJson);\n                var rootToken = jsonDocToken.RootElement;\n\n                string tokenTypeEmployee = rootToken.GetProperty(\"token_type\").GetString()!;\n                string accessTokenEmployee = rootToken.GetProperty(\"access_token\").GetString()!;\n\n                employeeClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenTypeEmployee, accessTokenEmployee);\n\n                // dynamic objectsForEmployee = JsonSerializer.Deserialize<dynamic>(pnGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                // employeeClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objectsForEmployee.token_type.ToString(), objectsForEmployee.access_token.ToString());\n\n                HttpResponseMessage skillGetPersonNumberApiResponse = await employeeClient.SendAsync(getPersonNumberUserRequest);\n                if (!skillGetPersonNumberApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", skillGetPersonNumberApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                var personNumberJson = await skillGetPersonNumberApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n                var jsonDocPerson = JsonDocument.Parse(personNumberJson);\n                var rootPerson = jsonDocPerson.RootElement;\n\n                var items = rootPerson.GetProperty(\"items\");\n\n                // dynamic personNumber = JsonSerializer.Deserialize<dynamic>(skillGetPersonNumberApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                if (items.GetArrayLength() == 1)\n                {\n                    var personNumberValue = items[0].GetProperty(\"PersonNumber\").GetString()!; \n\n                    HttpRequestMessage getTokenRequestForSkill = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(\n                                                                                                    $\"client_id={clientId}&grant_type=client_credentials&client_secret={clientSecret}&resource={clientScope}\",\n                                                                                                    Encoding.UTF8, \"application/x-www-form-urlencoded\"\n                                                                                                ) };\n\n                    HttpResponseMessage skillGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequestForSkill);\n                    if (!skillGetTokenApiResponse.IsSuccessStatusCode)\n                    {\n                        // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", skillGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n                    }\n\n                    var skillTokenJson = await skillGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n                    var jsonDocSkillToken = JsonDocument.Parse(skillTokenJson);\n                    var rootSkillToken = jsonDocSkillToken.RootElement;\n\n                    string tokenTypeSkill = rootSkillToken.GetProperty(\"token_type\").GetString()!;\n                    string accessTokenSkill = rootSkillToken.GetProperty(\"access_token\").GetString()!;\n\n                    skillPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenTypeSkill, accessTokenSkill);\n\n                    // dynamic objects = JsonSerializer.Deserialize<dynamic>(skillGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                    // skillPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n                    skillPatchClient.DefaultRequestHeaders.Add(\"approve-token\", token);\n\n                    foreach (IGrouping<string, Approval>? idGroup in groupByIdQuery)\n                    {\n                        // JObject jObject =\n                        //     new JObject(\n                        //         new JProperty(\"ApprovedBy\", personNumberValue),\n                        //         new JProperty(\"EmployeeNumber\", idGroup.Key),\n                        //         new JProperty(\"Data\",\n                        //         new JArray(\n                        //             from p in idGroup\n                        //             select new JObject(\n                        //                     new JProperty(\"Rating\", Convert.ToInt32(p.details)),\n                        //                     new JProperty(\"ReferenceNumber\", p.request!.Split(\"###delimeter###\")[1]),\n                        //                     new JProperty(\"Status\", p.status!.ToLower() == \"approve\" ? 1 : 2)\n                        //             ))));\n\n                        var payloadObj = new\n                            {\n                                ApprovedBy = personNumberValue,\n                                EmployeeNumber = idGroup.Key,\n                                Data = idGroup.Select(p => new\n                                {\n                                    Rating = Convert.ToInt32(p.details),\n                                    ReferenceNumber = p.request!.Split(\"###delimeter###\")[1],\n                                    Status = p.status!.ToLower() == \"approve\" ? 1 : 2\n                                }).ToArray()\n                            };\n\n                        try\n                        {\n                            HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Post, \"employee-skill-approvals\");\n                            patchUserRequest.Content = new StringContent(JsonSerializer.Serialize(payloadObj), Encoding.UTF8, \"application/json\");\n\n                            HttpResponseMessage skillPatchUserApiResponse = await skillPatchClient.SendAsync(patchUserRequest);\n                            if (!skillPatchUserApiResponse.IsSuccessStatusCode)\n                            {\n                                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", skillPatchUserApiResponse.Content.ReadAsStringAsync().Result);\n                            }\n\n                            skillPatchUserApiResponse.EnsureSuccessStatusCode();\n                        }\n                        catch (Exception ex)\n                        {\n                            // _logger.LogError(ex, ex.Message);\n                        }\n                    }\n                }\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n            }\n        }\n        // _logger.LogInformation(\"end sending approvals to Skills\");\n    }\n}\n\npublic class SfdcApprovalDataProvider \n{\n    private readonly HttpClient tokenClient;\n    private readonly HttpClient sfdcClient;\n    private readonly HttpClient sfdcPatchClient;\n\n    private readonly SfdcApprovalDataMapper _sfdcApprovalDataMapper;\n\n    private readonly string clientId = \"81ed145c-3c8f-4116-b71c-56c137e8f173\";\n    private readonly string clientSecret = \"DG58Q~aBlrpchqfbTwRDRRUOXGHxPJw-hE0K~bov\";\n\n    public SfdcApprovalDataProvider()\n    {\n        tokenClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/accesstokenapi/v1/token\")\n        };\n        tokenClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"d6f3f63f50854c0990cd61dbd7e64057\");\n\n        sfdcClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/sfdc-api/v1/\")\n        };\n        sfdcClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"df7787d3fdb0436fa14ddfec5326f3ac\");\n\n        sfdcPatchClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/sfdc-approval-crud-api/v1/\")\n        };\n        sfdcPatchClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"fe3584bb554246b09188ca661cdaf535\");\n\n        _sfdcApprovalDataMapper = new SfdcApprovalDataMapper();\n    }\n\n    public async Task<List<Approval>> GetSFDCApprovalsAsync(string email)\n    {\n        // _logger.LogInformation(\"starting approvals from SFDC\");\n        List<Approval> approvalListToSend = new List<Approval>();\n\n        SfdcApprovalList groupList = await GetUserGroupAsync(email);\n        approvalListToSend.AddRange(await GetCPQApprovalsAsync(email, groupList));\n        approvalListToSend.AddRange(await GetStandardApprovalsAsync(email, groupList));\n\n        // _logger.LogInformation(\"ending approvals from SFDC\");\n        return approvalListToSend;\n    }\n\n    private async Task<List<Approval>> GetCPQApprovalsAsync(string email, SfdcApprovalList groupList)\n    {\n        // _logger.LogInformation(\"starting CPQ approvals from SFDC\");\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<SfdcApproval> sfdcApprovalList = new List<SfdcApproval>();\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", clientId, clientSecret), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n        try\n        {\n            HttpResponseMessage sfdcGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n            if (!sfdcGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            var tokenResponseJson = await sfdcGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n            var jsonDoc = JsonDocument.Parse(tokenResponseJson);\n            var root = jsonDoc.RootElement;\n\n            string tokenType = root.GetProperty(\"token_type\").GetString()!;\n            string accessToken = root.GetProperty(\"access_token\").GetString()!;\n\n            sfdcClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n            // dynamic objects = JsonSerializer.Deserialize<dynamic>(sfdcGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            // sfdcClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"execute-query?q=SELECT+Id,Quote__r.Name,Owner.Name,CreatedDate,sbaa__Status__c,Quote__r.SBQQ__Opportunity2__r.Opportunity_ID__c,Quote__r.SBQQ__Opportunity2__r.Group_SBU__c,Quote__r.SBQQ__Account__r.Name,Quote__r.SBQQ__Opportunity2__r.Name,Quote__r.SBQQ__Opportunity2__r.CurrencyIsoCode,Quote__r.SBQQ__Opportunity2__r.Amount,Quote__r.SBQQ__Opportunity2__r.StageName,Quote__r.SBQQ__StartDate__c,Quote__r.SBQQ__EndDate__c,Quote__r.SBQQ__Opportunity2__r.Deal_Type__c,Quote__r.SBQQ__Opportunity2__r.Quote_Project_Type__c,Quote__r.Total_Contract_Value_excl_VD__c,Quote__r.Revenue_Net_of_Volume_Discount__c,Quote__r.AM_BCB__c,Quote__r.AM_ACB__c,sbaa__CommentsLong__c,Quote__r.Provider_and_Benchmark_Rates__c,Quote__r.TCV_Using_Market_Rate__c,Quote__r.AM_BCB_using_Market_Rates__c,Quote__r.Variance_of_TCV_and_TCV_using_Market_Rat__c,Quote__r.Margin_Variance__c,Quote__r.FTE_Overall__c,Quote__r.FTE_Onsite__c,Quote__r.FTE_Offshore__c,Quote__r.of_Resource_Mix_Overall__c,Quote__r.of_Resource_Mix_Onsite__c,Quote__r.of_Resource_Mix_Offshore__c,Quote__r.PHR_Overall__c,Quote__r.PHR_Onsite__c,Quote__r.PHR_Offshore__c,Quote__r.Pyramid__c,Quote__r.Pyramid_T0_Onsite__c,Quote__r.Pyramid_T0_Offshore__c,Quote__r.Pyramid_T1_Global__c,Quote__r.Pyramid_T1_onsite__c,Quote__r.Pyramid_T1_Offshore__c,Quote__r.Pyramid_T2_Global__c,Quote__r.Pyramid_T2_Onsite__c,Quote__r.Pyramid_T2_Offshore__c,Quote__r.Pyramid_T3_Global__c,Quote__r.Pyramid_T3_Onsite__c,Quote__r.Pyramid_T3_Offshore__c,Quote__r.Pyramid_T4_Global__c,Quote__r.Pyramid_T4_Onsite__c,Quote__r.Pyramid_T4_Offshore__c+FROM+sbaa__Approval__c+WHERE+sbaa__Status__c+=+'Requested'+AND+(sbaa__AssignedTo__r.Email+=+'{0}'{1})\", email, groupList.items != null && groupList.items.Count > 0 ? string.Format(\"+OR+sbaa__Approver__r.X18_Digit_Group_Id__c+IN+('{0}')\", string.Join(\"','\", groupList.items.Select(x => x.Group?.Id))) : string.Empty));\n\n            HttpResponseMessage sfdcGetUSerApiResponse = await sfdcClient.SendAsync(getUserRequest);\n            if (!sfdcGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            SfdcApprovalList approvalList = JsonSerializer.Deserialize<SfdcApprovalList>(sfdcGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            sfdcApprovalList.AddRange(approvalList.items!);\n\n            while (!string.IsNullOrEmpty(approvalList.nextRecordsUrl))\n            {\n                getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"get-remaining-records/{0}\", approvalList.nextRecordsUrl));\n                sfdcGetUSerApiResponse = await sfdcClient.SendAsync(getUserRequest);\n                if (!sfdcGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                approvalList = JsonSerializer.Deserialize<SfdcApprovalList>(sfdcGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                sfdcApprovalList.AddRange(approvalList.items!);\n            }\n\n            approvalListToSend.AddRange(_sfdcApprovalDataMapper.MapToApprovalList(sfdcApprovalList));\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n        }\n\n        // _logger.LogInformation(\"ending CPQ approvals from SFDC\");\n        return approvalListToSend;\n    }\n\n    private async Task<List<Approval>> GetStandardApprovalsAsync(string email, SfdcApprovalList groupList)\n    {\n        // _logger.LogInformation(\"starting standard approvals from SFDC\");\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<SfdcApproval> sfdcApprovalList = new List<SfdcApproval>();\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", clientId, clientSecret), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"execute-query?q=SELECT+Id,TYPEOF+ProcessInstance.TargetObject+WHEN+SIMP_Project__c+THEN+Id,Name,Project_Name__c,Project_Start_Date__c,Customers__c,VRTU_Business_Unit__c,Engagement_Type__c,Project_Currency__c+ELSE+Name+END,CreatedBy.Name,CreatedDate,ProcessInstance.Status+FROM+ProcessInstanceWorkitem+WHERE+Actor.Email+=+'{0}'{1}\", email, groupList.items != null && groupList.items.Count > 0 ? string.Format(\"+OR+ActorId+IN+('{0}')\", string.Join(\"','\", groupList.items.Select(x => x.Group?.Id))) : string.Empty));\n\n        try\n        {\n            HttpResponseMessage sfdcGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n            if (!sfdcGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            var tokenResponseJson = await sfdcGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n            var jsonDoc = JsonDocument.Parse(tokenResponseJson);\n            var root = jsonDoc.RootElement;\n\n            string tokenType = root.GetProperty(\"token_type\").GetString()!;\n            string accessToken = root.GetProperty(\"access_token\").GetString()!;\n\n            sfdcClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n            // dynamic objects = JsonSerializer.Deserialize<dynamic>(sfdcGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            // sfdcClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpResponseMessage sfdcGetUSerApiResponse = await sfdcClient.SendAsync(getUserRequest);\n            if (!sfdcGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            SfdcApprovalList approvalList = JsonSerializer.Deserialize<SfdcApprovalList>(sfdcGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            sfdcApprovalList.AddRange(approvalList.items!);\n\n            while (!string.IsNullOrEmpty(approvalList.nextRecordsUrl))\n            {\n                getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"get-remaining-records/{0}\", approvalList.nextRecordsUrl));\n                sfdcGetUSerApiResponse = await sfdcClient.SendAsync(getUserRequest);\n                if (!sfdcGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                approvalList = JsonSerializer.Deserialize<SfdcApprovalList>(sfdcGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                sfdcApprovalList.AddRange(approvalList.items!);\n            }\n\n            approvalListToSend.AddRange(_sfdcApprovalDataMapper.MapToApprovalList(sfdcApprovalList));\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n        }\n\n        // _logger.LogInformation(\"ending standard approvals from SFDC\");\n        return approvalListToSend;\n    }\n\n    private async Task<SfdcApprovalList> GetUserGroupAsync(string email)\n    {\n        // _logger.LogInformation(\"starting user group from SFDC\");\n        SfdcApprovalList groupList = new SfdcApprovalList();\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", clientId, clientSecret), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n        HttpRequestMessage getGroupRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"execute-query?q=SELECT+Group.Id+FROM+GroupMember+WHERE+UserOrGroupId+IN+(SELECT+Id+FROM+User+where+Email+=+'{0}')\", email));\n\n        try\n        {\n            HttpResponseMessage sfdcGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n            if (!sfdcGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            var tokenResponseJson = await sfdcGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n            var jsonDoc = JsonDocument.Parse(tokenResponseJson);\n            var root = jsonDoc.RootElement;\n\n            string tokenType = root.GetProperty(\"token_type\").GetString()!;\n            string accessToken = root.GetProperty(\"access_token\").GetString()!;\n\n            sfdcClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n            // dynamic objects = JsonSerializer.Deserialize<dynamic>(sfdcGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            // sfdcClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpResponseMessage sfdcGetGroupApiResponse = await sfdcClient.SendAsync(getGroupRequest);\n            if (!sfdcGetGroupApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcGetGroupApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            groupList = JsonSerializer.Deserialize<SfdcApprovalList>(sfdcGetGroupApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n        }\n\n        // _logger.LogInformation(\"ending user group from SFDC\");\n        return groupList;\n    }\n\n    public async Task PatchSFDCApprovalAsync(List<Approval> approvalList, string token)\n    {\n        // _logger.LogInformation(\"start sending approvals to SFDC\");\n\n        await PatchCPQApprovals(approvalList.FindAll(s => s.appGroup == \"Salesforce CPQ\"), token);\n        await PatchStandardApprovals(approvalList.FindAll(s => s.appGroup == \"Salesforce\"), token);\n\n        // _logger.LogInformation(\"end sending approvals to SFDC\");\n    }\n\n    private async Task PatchCPQApprovals(List<Approval> approvalList, string token)\n    {\n        // _logger.LogInformation(\"start sending CPQ approvals to SFDC\");\n\n        foreach (Approval approval in approvalList)\n        {\n            string status = approval.status!.ToLower();\n            string comment = approval.comment!;\n\n            if (string.IsNullOrEmpty(status) || (!string.IsNullOrEmpty(status) && status != \"approve\" && status != \"reject\") || (!string.IsNullOrEmpty(status) && status == \"reject\" && string.IsNullOrEmpty(comment)))\n            {\n                continue;\n            }\n\n            // JObject jObject =\n            //     new JObject(\n            //         new JProperty(\"model\",\n            //             new JObject(\n            //                 new JProperty(\"approvalId\", approval.id),\n            //                 new JProperty(\"comments\", comment)).ToString()),\n            //         new JProperty(\"saver\", status == \"approve\" ? \"SBAA.ApprovalRestApiProvider.Approve\" : \"SBAA.ApprovalRestApiProvider.Reject\"));\n\n            var payload = new Dictionary<string, object>\n                {\n                    [\"model\"] = new Dictionary<string, string>\n                    {\n                        [\"approvalId\"] = approval.id,\n                        [\"comments\"] = comment\n                    },\n                    [\"saver\"] = status == \"approve\" \n                                ? \"SBAA.ApprovalRestApiProvider.Approve\" \n                                : \"SBAA.ApprovalRestApiProvider.Reject\"\n                };\n\n            sfdcPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n            HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Post, \"apexrest/sbaa/ServiceRouter\");\n\n            try\n            {\n                patchUserRequest.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n                HttpResponseMessage sfdcPatchUserApiResponse = await sfdcPatchClient.SendAsync(patchUserRequest);\n                if (!sfdcPatchUserApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcPatchUserApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                sfdcPatchUserApiResponse.EnsureSuccessStatusCode();\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n                throw;\n            }\n        }\n\n        // _logger.LogInformation(\"end sending CPQ approvals to SFDC\");\n    }\n\n    private async Task PatchStandardApprovals(List<Approval> approvalList, string token)\n    {\n        // _logger.LogInformation(\"start sending standard approvals to SFDC\");\n\n        List<Approval> approveList = approvalList.FindAll(s => s.status?.ToLower() == \"approve\");\n        List<Approval> rejectList = approvalList.FindAll(s => s.status?.ToLower() == \"reject\");\n\n        string comment = string.Join(\"\", rejectList.Select(g => g.comment).Distinct());\n\n        var approveRequests = approveList.Select(c => new Dictionary<string, object>\n            {\n                [\"actionType\"] = \"Approve\",\n                [\"contextId\"] = c.id,\n                [\"comments\"] = comment\n            }).ToList();\n        var approveObject = new Dictionary<string, object>\n            {\n                [\"requests\"] = approveRequests\n            };\n\n        // JObject approveObject =\n        //     new JObject(\n        //         new JProperty(\"requests\",\n        //             new JArray(\n        //                 from c in approveList\n        //                 select new JObject(\n        //                     new JProperty(\"actionType\", \"Approve\"),\n        //                     new JProperty(\"contextId\", c.id),\n        //                     new JProperty(\"comments\", comment)))));\n\n        var rejectRequests = rejectList.Select(c => new Dictionary<string, object>\n            {\n                [\"actionType\"] = \"Reject\",\n                [\"contextId\"] = c.id,\n                [\"comments\"] = comment\n            }).ToList();\n        var rejectObject = new Dictionary<string, object>\n            {\n                [\"requests\"] = rejectRequests\n            };\n\n        // JObject rejectObject =\n        //     new JObject(\n        //         new JProperty(\"requests\",\n        //             new JArray(\n        //                 from c in rejectList\n        //                 select new JObject(\n        //                     new JProperty(\"actionType\", \"Reject\"),\n        //                     new JProperty(\"contextId\", c.id),\n        //                     new JProperty(\"comments\", comment)))));\n\n        HttpRequestMessage patchUserRequestApprove = new HttpRequestMessage(HttpMethod.Post, \"bulk-approvals\");\n        HttpRequestMessage patchUserRequestReject = new HttpRequestMessage(HttpMethod.Post, \"bulk-approvals\");\n\n        sfdcPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n        try\n        {\n            if (approveList.Count > 0)\n            {\n                patchUserRequestApprove.Content = new StringContent(JsonSerializer.Serialize(approveObject), Encoding.UTF8, \"application/json\");\n\n                HttpResponseMessage sfdcPatchUserApiApproveResponse = await sfdcPatchClient.SendAsync(patchUserRequestApprove);\n                if (!sfdcPatchUserApiApproveResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcPatchUserApiApproveResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                sfdcPatchUserApiApproveResponse.EnsureSuccessStatusCode();\n            }\n\n            if (rejectList.Count > 0 && !string.IsNullOrEmpty(comment))\n            {\n                patchUserRequestReject.Content = new StringContent(JsonSerializer.Serialize(rejectObject), Encoding.UTF8, \"application/json\");\n\n                HttpResponseMessage sfdcPatchUserApiRejectResponse = await sfdcPatchClient.SendAsync(patchUserRequestReject);\n                if (!sfdcPatchUserApiRejectResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", sfdcPatchUserApiRejectResponse.Content.ReadAsStringAsync().Result);\n                }\n                sfdcPatchUserApiRejectResponse.EnsureSuccessStatusCode();\n            }\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n            throw;\n        }\n\n        // _logger.LogInformation(\"end sending standard approvals to SFDC\");\n    }\n\n}\n\npublic class TaleoApprovalDataProvider\n{\n    private readonly HttpClient tokenClient;\n    private readonly HttpClient taleoClient;\n    private readonly HttpClient taleoPatchClient;\n\n    private readonly TaleoApprovalDataMapper _taleoApprovalDataMapper;\n\n    private readonly string clientId = \"81ed145c-3c8f-4116-b71c-56c137e8f173\";\n    private readonly string clientSecret = \"DG58Q~aBlrpchqfbTwRDRRUOXGHxPJw-hE0K~bov\";\n\n    public TaleoApprovalDataProvider()\n    {\n        tokenClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/accesstokenapi/v1/token\")\n        };\n        tokenClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"d6f3f63f50854c0990cd61dbd7e64057\");\n\n        taleoClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/taleo-approval-api/v1/\")\n        };\n        taleoClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"f6d6b160d1bc46edb19b0e00d468ebff\");\n\n        taleoPatchClient = new HttpClient\n        {\n            BaseAddress = new Uri(\"https://virtueagintegrationsapim-dev2.azure-api.net/taleo-approval-crud-api/v1/\")\n        };\n        taleoPatchClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"5ba22b06303d46ed9440bde8064aa4e6\");\n\n        _taleoApprovalDataMapper = new TaleoApprovalDataMapper();\n    }\n\n    public async Task<List<Approval>> GetTaleoApprovalsAsync(string email)\n    {\n        // _logger.LogInformation(\"starting approvals from Taleo\");\n        List<Approval> approvalListToSend = new List<Approval>();\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content =\n                                                    new StringContent(\n                                                        $\"client_id={clientId}&grant_type=client_credentials&client_secret={clientSecret}\",\n                                                        Encoding.UTF8, \"application/x-www-form-urlencoded\"\n                                                    ) };\n\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"approval/{0}?status=Pending\", email));\n        try\n        {\n            HttpResponseMessage taleoGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n            if (!taleoGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", taleoGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            var tokenResponseJson = await taleoGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n            var jsonDoc = JsonDocument.Parse(tokenResponseJson);\n            var root = jsonDoc.RootElement;\n\n            string tokenType = root.GetProperty(\"token_type\").GetString()!;\n            string accessToken = root.GetProperty(\"access_token\").GetString()!;\n\n            taleoClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n            // dynamic objects = JsonSerializer.Deserialize<dynamic>(taleoGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            // taleoClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpResponseMessage taleoGetUSerApiResponse = await taleoClient.SendAsync(getUserRequest);\n            if (!taleoGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", taleoGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            List<TaleoApproval> approvalList = JsonSerializer.Deserialize<List<TaleoApproval>>(taleoGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            approvalListToSend.AddRange(_taleoApprovalDataMapper.MapToApprovalList(approvalList));\n        }\n\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n        }\n\n        // _logger.LogInformation(\"ending approvals from Taleo\");\n        return approvalListToSend;\n    }\n\n    public async Task PatchTaleoApprovalAsync(List<Approval> approvalList)\n    {\n        // _logger.LogInformation(\"start sending approvals to Taleo\");\n\n        List<Approval> approveList = approvalList.FindAll(s => s.status?.ToLower() == \"approve\");\n        List<Approval> rejectList = approvalList.FindAll(s => s.status?.ToLower() == \"reject\");\n\n        string comment = string.Join(\"\", rejectList.Select(g => g.comment).Distinct());\n\n        // JArray approveArray =\n        //             new JArray(\n        //                 from c in approveList\n        //                 select new JObject(\n        //                     new JProperty(\"approvalId\", c.id),\n        //                     new JProperty(\"status\", c.status),\n        //                     new JProperty(\"comment\", comment),\n        //                     new JProperty(\"type\", c.request?.Split(\"###delimeter###\")[1])));\n\n        var approveArray = approveList.Select(c => new Dictionary<string, object>\n            {\n                [\"approvalId\"] = c.id,\n                [\"status\"] = c.status,\n                [\"comment\"] = comment,\n                [\"type\"] = c.request?.Split(\"###delimeter###\")[1]\n            }).ToList();\n\n        // JArray rejectArray =\n        //             new JArray(\n        //                 from c in rejectList\n        //                 select new JObject(\n        //                     new JProperty(\"approvalId\", c.id),\n        //                     new JProperty(\"status\", c.status),\n        //                     new JProperty(\"comment\", comment),\n        //                     new JProperty(\"type\", c.request?.Split(\"###delimeter###\")[1])));\n        \n        var rejectArray = rejectList.Select(c => new Dictionary<string, object>\n            {\n                [\"approvalId\"] = c.id,\n                [\"status\"] = c.status,\n                [\"comment\"] = comment,\n                [\"type\"] = c.request?.Split(\"###delimeter###\")[1]\n            }).ToList();\n\n        HttpRequestMessage getTokenApproveRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content =\n                                                    new StringContent(\n                                                        $\"client_id={clientId}&grant_type=client_credentials&client_secret={clientSecret}\",\n                                                        Encoding.UTF8, \"application/x-www-form-urlencoded\"\n                                                    ) };\n\n        HttpRequestMessage getTokenRejectRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content =\n                                                    new StringContent(\n                                                        $\"client_id={clientId}&grant_type=client_credentials&client_secret={clientSecret}\",\n                                                        Encoding.UTF8, \"application/x-www-form-urlencoded\"\n                                                    ) };\n\n        HttpRequestMessage patchUserRequestApprove = new HttpRequestMessage(HttpMethod.Put, \"approval\");\n        HttpRequestMessage patchUserRequestReject = new HttpRequestMessage(HttpMethod.Put, \"approval\");\n\n        try\n        {\n            if (approveList.Count > 0)\n            {\n                HttpResponseMessage taleoGetTokenApiApproveResponse = await tokenClient.SendAsync(getTokenApproveRequest);\n                if (!taleoGetTokenApiApproveResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", taleoGetTokenApiApproveResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                var tokenJson = await taleoGetTokenApiApproveResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n                var jsonDoc = JsonDocument.Parse(tokenJson);\n                var root = jsonDoc.RootElement;\n\n                string tokenType = root.GetProperty(\"token_type\").GetString()!;\n                string accessToken = root.GetProperty(\"access_token\").GetString()!;\n                \n                taleoPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n                // dynamic objects = JsonSerializer.Deserialize<dynamic>(taleoGetTokenApiApproveResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                // taleoPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n                patchUserRequestApprove.Content = new StringContent(JsonSerializer.Serialize(approveArray), Encoding.UTF8, \"application/json\");\n                HttpResponseMessage taleoPatchUserApiApproveResponse = await taleoPatchClient.SendAsync(patchUserRequestApprove);\n                if (!taleoPatchUserApiApproveResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", taleoPatchUserApiApproveResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                taleoPatchUserApiApproveResponse.EnsureSuccessStatusCode();\n            }\n\n            if (rejectList.Count > 0 && !string.IsNullOrEmpty(comment))\n            {\n                HttpResponseMessage taleoGetTokenApiRejectResponse = await tokenClient.SendAsync(getTokenRejectRequest);\n                if (!taleoGetTokenApiRejectResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", taleoGetTokenApiRejectResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                var tokenJson = await taleoGetTokenApiRejectResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync();\n                var jsonDoc = JsonDocument.Parse(tokenJson);\n                var root = jsonDoc.RootElement;\n\n                string tokenType = root.GetProperty(\"token_type\").GetString()!;\n                string accessToken = root.GetProperty(\"access_token\").GetString()!;\n                \n                taleoPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(tokenType, accessToken);\n\n                // dynamic objects = JsonSerializer.Deserialize<dynamic>(taleoGetTokenApiRejectResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                // taleoPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n                patchUserRequestReject.Content = new StringContent(JsonSerializer.Serialize(rejectArray), Encoding.UTF8, \"application/json\");\n                HttpResponseMessage taleoPatchUserApiRejectResponse = await taleoPatchClient.SendAsync(patchUserRequestReject);\n                if (!taleoPatchUserApiRejectResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", taleoPatchUserApiRejectResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                taleoPatchUserApiRejectResponse.EnsureSuccessStatusCode();\n            }\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n            throw;\n        }\n\n        // _logger.LogInformation(\"end sending approvals to Taleo\");\n    }\n}\n\npublic class OutlookApprovalDataProvider\n{\n    private readonly HttpClient outlookClient;\n    private readonly OutlookApprovalDataMapper _outlookApprovalDataMapper;\n\n    public OutlookApprovalDataProvider()\n    {\n        outlookClient = new HttpClient();\n        _outlookApprovalDataMapper = new OutlookApprovalDataMapper();\n    }\n\n    public async Task<List<Approval>> GetOutlookApprovalsAsync(string token)\n    {\n        // _logger.LogInformation(\"starting approvals from Outlook\");\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, \"https://graph.microsoft.com/v1.0/me/MailFolders('Inbox')/messages?$top=1000&$select=createdDateTime,subject,bodyPreview,webLink,sender,from&$filter=singleValueExtendedProperties/any(ep:ep/id+eq+'String+0x001a'+and+ep/value+eq+'IPM.Note.Microsoft.Approval.Request')&$expand=singleValueExtendedProperties($filter%3D(Id+eq+'Binary+0x0031')+or+(Id+eq+'String+0x0E1D'))\");\n        outlookClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<OutlookApproval> outlookApprovalList = new List<OutlookApproval>();\n\n        try\n        {\n            HttpResponseMessage outlookGetUSerApiResponse = await outlookClient.SendAsync(getUserRequest);\n            if (!outlookGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", outlookGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            OutlookApprovalList approvalList = JsonSerializer.Deserialize<OutlookApprovalList>(outlookGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            outlookApprovalList.AddRange(approvalList.value!);\n\n            while (!string.IsNullOrEmpty(approvalList.odatanextLink))\n            {\n                getUserRequest = new HttpRequestMessage(HttpMethod.Get, approvalList.odatanextLink);\n                outlookClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                outlookGetUSerApiResponse = await outlookClient.SendAsync(getUserRequest);\n                if (!outlookGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", outlookGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                approvalList = JsonSerializer.Deserialize<OutlookApprovalList>(outlookGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                outlookApprovalList.AddRange(approvalList.value!);\n            }\n\n            approvalListToSend.AddRange(_outlookApprovalDataMapper.MapToApprovalList(outlookApprovalList));\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n\n        }\n        // _logger.LogInformation(\"ending approvals from Outlook\");\n        return approvalListToSend;\n    }\n\n    public async Task PatchOutlookApprovalAsync(List<Approval> approvalList, string token)\n    {\n        // _logger.LogInformation(\"start sending approvals to Outlook\");\n\n        foreach (Approval approval in approvalList)\n        {\n            string status = approval.status!.ToLower();\n            string? comment = approval.comment;\n\n            if (string.IsNullOrEmpty(status) || (!string.IsNullOrEmpty(status) && status != \"approve\" && status != \"reject\") || (!string.IsNullOrEmpty(status) && status == \"reject\" && string.IsNullOrEmpty(comment)))\n            {\n                continue;\n            }\n\n            // JObject jObject =\n            //         new JObject(\n            //                 new JProperty(\"message\", new JObject(\n            //                         new JProperty(\"subject\", string.Format(\"{0}: {1}\", status == \"approve\" ? \"Approve\" : \"Reject\", approval.request?.Split(\"###delimeter###\")[0].Split(\"Approval requested:\")[1])),\n            //                         new JProperty(\"toRecipients\", new JArray(\n            //                             new JObject(\n            //                                 new JProperty(\"emailAddress\", new JObject(\n            //                                     new JProperty(\"address\", approval.request?.Split(\"###delimeter###\")[1])\n            //                                 ))\n            //                             )\n            //                         )),\n            //                         new JProperty(\"singleValueExtendedProperties\", new JArray(\n            //                             new JObject(\n            //                                 new JProperty(\"id\", \"Binary 0x31\"),\n            //                                 new JProperty(\"value\", approval.id)\n            //                             ),\n            //                             new JObject(\n            //                                 new JProperty(\"id\", \"String 0x001A\"),\n            //                                 new JProperty(\"value\", status == \"approve\" ? \"IPM.Note.Microsoft.Approval.Reply.Approve\" : \"IPM.Note.Microsoft.Approval.Reply.Reject\")\n            //                             ),\n            //                             new JObject(\n            //                                 new JProperty(\"id\", \"String {00062008-0000-0000-C000-000000000046} Id 0x8524\"),\n            //                                 new JProperty(\"value\", status == \"approve\" ? \"Approve\" : \"Reject\")\n            //                             )\n            //                         ))\n            //                     )));\n                                \n            var message = new Dictionary<string, object>\n                {\n                    [\"subject\"] = string.Format(\"{0}: {1}\", status == \"approve\" ? \"Approve\" : \"Reject\", approval.request?.Split(\"###delimeter###\")[0].Split(\"Approval requested:\")[1]),\n                    [\"toRecipients\"] = new List<Dictionary<string, object>>\n                    {\n                        new Dictionary<string, object>\n                        {\n                            [\"emailAddress\"] = new Dictionary<string, string>\n                            {\n                                [\"address\"] = approval.request?.Split(\"###delimeter###\")[1] ?? string.Empty\n                            }\n                        }\n                    },\n                    [\"singleValueExtendedProperties\"] = new List<Dictionary<string, string>>\n                    {\n                        new Dictionary<string, string> { [\"id\"] = \"Binary 0x31\", [\"value\"] = approval.id },\n                        new Dictionary<string, string> { [\"id\"] = \"String 0x001A\", [\"value\"] = status == \"approve\" ? \"IPM.Note.Microsoft.Approval.Reply.Approve\" : \"IPM.Note.Microsoft.Approval.Reply.Reject\" },\n                        new Dictionary<string, string> { [\"id\"] = \"String {00062008-0000-0000-C000-000000000046} Id 0x8524\", [\"value\"] = status == \"approve\" ? \"Approve\" : \"Reject\" }\n                    }\n                };\n\n            if (!string.IsNullOrEmpty(comment))\n            {\n                message[\"body\"] = new Dictionary<string, string>\n                    {\n                        [\"contentType\"] = \"HTML\",\n                        [\"content\"] = comment\n                    };\n                // jObject[\"message\"]![\"body\"] = new JObject(\n                //                         new JProperty(\"contentType\", \"HTML\"),\n                //                         new JProperty(\"content\", comment)\n                //                     );\n            }\n\n            var payload = new Dictionary<string, object> { [\"message\"] = message };\n\n            HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Post, \"https://graph.microsoft.com/v1.0/me/SendMail\");\n            outlookClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n            try\n            {\n                patchUserRequest.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n                HttpResponseMessage patchUserApiApproveResponse = await outlookClient.SendAsync(patchUserRequest);\n                if (!patchUserApiApproveResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", patchUserApiApproveResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                patchUserApiApproveResponse.EnsureSuccessStatusCode();\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n                throw;\n            }\n        }\n        // _logger.LogInformation(\"end sending approvals to Outlook\");\n    }\n}\n\n// ----- Azure UpdateApproval Function -----\n\npublic async Task<IDictionary<string, object>> mainFunction(string email, string requestBody, string? paToken = null, string? authorizationToken = null)\n{\n    var response = new Dictionary<string, object>();\n    if (!Regex.IsMatch(email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))\n    {\n        response[\"statusCode\"] = 400;\n        response[\"body\"] = $\"path parameter {email} is not valid. Please provide valid email\";\n        return response;\n    }\n\n    var _nowApprovalDataProvider = new NowApprovalDataProvider();\n    var _paApprovalDataProvider = new PAApprovalDataProvider();\n    var _v5ApprovalDataProvider = new V5ApprovalDataProvider();\n    var _v5PaaSApprovalDataProvider = new V5PaaSApprovalDataProvider();\n    var _skillApprovalDataProvider = new SkillApprovalDataProvider();\n    var _sfdcApprovalDataProvider = new SfdcApprovalDataProvider();\n    var _taleoApprovalDataProvider = new TaleoApprovalDataProvider();\n    var _outlookApprovalDataProvider = new OutlookApprovalDataProvider();\n\n    try\n    {\n        ApprovalList input = JsonSerializer.Deserialize<ApprovalList>(requestBody)!;\n\n        if (input.items != null)\n        {\n            List<Approval> approvalNow = input.items.FindAll(s => s.appGroup == \"Anytime\");\n            await _nowApprovalDataProvider.PatchNowApprovalAsync(approvalNow, email);\n\n            List<Approval> approvalPA = input.items.FindAll(s => s.appGroup == \"Power Automate\");\n            List<Approval> approvalV5PaaS = input.items.FindAll(s => s.appGroup == \"Velocity5 PaaS\");\n            List<Approval> approvalV5 = input.items.FindAll(s => s.appGroup == \"Velocity5\");\n            List<Approval> approvalSkill = input.items.FindAll(s => s.appGroup == \"Skills\");\n\n            List<string> apps = new List<string>() { \"Salesforce CPQ\", \"Salesforce\" };\n            List<Approval> approvalSFDC = input.items.FindAll(s => apps.Contains(s.appGroup!));\n\n            List<Approval> approvalTaleo = input.items.FindAll(s => s.appGroup == \"Taleo\");\n            await _taleoApprovalDataProvider.PatchTaleoApprovalAsync(approvalTaleo);\n\n            List<Approval> approvalOutlook = input.items.FindAll(s => s.appGroup == \"Outlook\");\n\n            if (approvalPA.Count > 0 || approvalV5.Count > 0 || approvalV5PaaS.Count > 0 || approvalSkill.Count > 0 || approvalSFDC.Count > 0)\n            {\n                if (string.IsNullOrEmpty(paToken))\n                    throw new InvalidOperationException(\"Power Automate/Velocity5/Velocity5 PaaS/Skill/Salesforce approval list is available but vrtu-approvals-pa-token is not provided.\");\n\n                await _paApprovalDataProvider.PatchPAApprovalAsync(approvalPA, paToken);\n                await _v5ApprovalDataProvider.PatchV5ApprovalAsync(approvalV5, paToken);\n                await _skillApprovalDataProvider.PatchSkillApprovalAsync(approvalSkill, email, paToken);\n                await _v5PaaSApprovalDataProvider.PatchV5PaaSApprovalAsync(approvalV5PaaS, paToken);\n                await _sfdcApprovalDataProvider.PatchSFDCApprovalAsync(approvalSFDC, paToken);\n            }\n\n            if (approvalOutlook.Count > 0)\n            {\n                if (string.IsNullOrEmpty(authorizationToken))\n                    throw new InvalidOperationException(\"Outlook approval list is available but Authorization token is not provided.\");\n\n                await _outlookApprovalDataProvider.PatchOutlookApprovalAsync(approvalOutlook, authorizationToken.Split(\" \").Last());\n            }\n        }\n\n        response[\"statusCode\"] = 200;\n        response[\"headers\"] = new Dictionary<string, string>{\n                    { \"Content-Type\", \"application/json; charset=utf-8\" }\n                };\n        response[\"body\"] = JsonSerializer.Serialize(new { response = \"PATCH request processed\" });\n    }\n    catch (Exception ex)\n    {\n        response[\"statusCode\"] = 400;\n        response[\"body\"] = JsonSerializer.Serialize(new { response = $\"request (body/header) is not valid: {ex.Message}\" });\n    }\n\n    return response;\n}\n\n// Example input\nstring email = \"jay@example.com\";\nstring requestBody = @\"{\n    \"\"items\"\": [\n        {\"\"id\"\":\"\"1\"\",\"\"appGroup\"\":\"\"Anytime\"\",\"\"status\"\":\"\"approve\"\",\"\"comment\"\":\"\"Approved\"\"},\n        {\"\"id\"\":\"\"2\"\",\"\"appGroup\"\":\"\"Power Automate\"\",\"\"status\"\":\"\"reject\"\",\"\"comment\"\":\"\"Not needed\"\"}\n    ]\n}\";      \nstring paToken = \"eyJ0eXAiOiJKV1QiLCJhbGciOi...\";\nstring authorizationToken = \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOi...\"; \n\n\nvar result = await mainFunction( email, requestBody, paToken, authorizationToken);\nresult",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_jH3B7",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":46217,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":6
}