{
	"appsUsed":[
		
	],
	"createdTime":1761802977017,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_hgdTM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rh0oF",
			"type":"next"
		},
		{
			"fromNodeId":"n_rh0oF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_b3ShU",
			"type":"next"
		}
	],
	"id":"6902fae14cdbea660eb2a8a8",
	"lastModifiedBy":45518,
	"lcName":"[virtu-empowerrepsschedulerfn]syncaccounthttptrigger (copy)",
	"modifiedTime":1761892978929,
	"name":"[virtu-emPowerRepsSchedulerFN]SyncaccountHttpTrigger (copy)",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_hgdTM",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"200",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_rh0oF",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Net.Http;\nusing System.Text;\n\n// --- Base Models ---\n\npublic abstract class BaseEntity<T>\n{\n    public T Id { get; set; }\n}\n\npublic class Account : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeAccount> EmployeeAccounts { get; set; }\n}\n\npublic class EmployeeAccount : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int AccountId { get; set; }\n    public Account Account { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Employee : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public string FullName { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string Email { get; set; }\n    public bool IsActive { get; set; }\n    public string Status { get; set; }\n    public Employee Manager { get; set; }\n    public string ManagerEmployeeNumber { get; set; }\n    public long? ManagerId { get; set; }\n    public EmployeeAccount EmployeeAccount { get; set; }\n\n    private readonly List<EmployeeRepsActivity> _employeeRepsActivities = new List<EmployeeRepsActivity>();\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities => _employeeRepsActivities.AsReadOnly();\n\n    public void AddRepsActivity(EmployeeRepsActivity employeeRepsActivity)\n    {\n        _employeeRepsActivities.Add(employeeRepsActivity);\n    }\n}\n\npublic class EmployeeRepsActivity : BaseEntity<long>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public int RepsActivityId { get; set; }\n    public int Points { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public string ReferenceNumber { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public Employee Employee { get; set; }\n    public bool IsAggregated { get; set; }\n}\n\npublic class RepsActivity : BaseEntity<int>\n{\n    public string ActivityName { get; set; }\n    public string Description { get; set; }\n    public int Points { get; set; }\n    public bool IsActive { get; set; }\n    public string FocusArea { get; set; }\n    public string RepsSize { get; set; }\n    public int? CapLimitId { get; set; }\n    public CapLimit CapLimit { get; set; }\n    public CalculationStrategy CalculationStrategy { get; set; }\n    public EvaluationCategory EvaluationCategory { get; set; }\n    public int EvaluationCategoryId { get; set; }\n    public bool ShouldAggregate { get; set; }\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities { get; set; }\n}\n\npublic enum CalculationStrategy\n{\n    None = 0,\n    IndividualMetric = 1,\n    DeliveryProjectMetric = 2\n}\n\npublic class CapLimit : BaseEntity<int>\n{\n    public int RepsActivityId { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public short Limit { get; set; }\n    public short Frequency { get; set; }\n    public CappingStrategy CappingStrategy { get; set; }\n}\n\npublic enum CappingStrategy : short\n{\n    None = 0,\n    ActivityCountBased = 1,\n    AverageBased = 2,\n    RevisedScoreBased = 3,\n    ScoreBased = 4\n}\n\npublic class EvaluationCategory : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public int Weightage { get; set; }\n    public string ImageName { get; set; }\n    public short DefaultRating { get; set; }\n    public ComparisonGroups ComparisonGroups { get; set; }\n    public IReadOnlyCollection<RepsActivity> RepsActivities { get; set; }\n}\n\npublic enum ComparisonGroups : short\n{\n    None = 0,\n    Tier = 1 << 0,\n    Designation = 1 << 1,\n    Location = 1 << 2,\n    BusinessUnit = 1 << 3\n}\n\n// --- Logic Class ---\n\npublic class AccountProcessor\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/AccountEndpoint\";\n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    };\n\n\n\n    // --- DB Interaction Method ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\";\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n\n            throw;\n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n\n                response.EnsureSuccessStatusCode();\n            }\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\")\n            {\n                return default;\n            }\n\n            try\n            {\n                using (JsonDocument document = JsonDocument.Parse(responseContent))\n                {\n                    JsonElement root = document.RootElement;\n                    if (root.ValueKind == JsonValueKind.Object &&\n                        (root.TryGetProperty(\"result\", out JsonElement resultElement) ||\n                         root.TryGetProperty(\"data\", out resultElement)))\n                    {\n                        if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                        return resultElement.Deserialize<TResponse>(jsonOptions);\n                    }\n                    else if (root.ValueKind != JsonValueKind.Null)\n                    {\n                        return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                    }\n                    else\n                    {\n                        return default;\n                    }\n                }\n            }\n            catch (JsonException jsonEx)\n            {\n\n                return default;\n            }\n        }\n        catch (HttpRequestException e)\n        {\n\n            throw;\n        }\n        catch (Exception e)\n        {\n\n            throw;\n        }\n    }\n\n    // --- Account Service Logic ---\n\n    public async Task AddOrUpdateAsync(Account account)\n    {\n        ValidateAccount(account);\n        await ProcessAccountAsync(account);\n    }\n\n    private void ValidateAccount(Account account)\n    {\n        if (string.IsNullOrEmpty(account.Name))\n        {\n            throw new ArgumentException(\"Value cannot be null\", nameof(account.Name));\n        }\n\n        if (string.IsNullOrEmpty(account.ReferenceNumber))\n        {\n            throw new ArgumentException(\"Value cannot be empty\", nameof(account.ReferenceNumber));\n        }\n    }\n\n    private async Task ProcessAccountAsync(Account account)\n    {\n        var existingAccount = await GetAccountByReferenceNumberAsync(account.ReferenceNumber);\n\n        if (existingAccount == null)\n        {\n            await AddAccountAsync(account);\n        }\n        else\n        {\n            existingAccount.Name = account.Name;\n            await UpdateAccountAsync(existingAccount);\n        }\n    }\n\n    private async Task<Account?> GetAccountByReferenceNumberAsync(string referenceNumber)\n    {\n        var payload = new Dictionary<string, object>\n        {\n            { \"ReferenceNumber\", referenceNumber }\n        };\n        return await CallDb<Account>(\"FirstOrDefaultAsync\", payload);\n    }\n\n    private async Task AddAccountAsync(Account account)\n    {\n        await CallDb<Account>(\"AddAsync\", account);\n    }\n\n    private async Task UpdateAccountAsync(Account account)\n    {\n        await CallDb<object>(\"UpdateAsync\", account);\n    }\n\n    // --- Main Script Function ---\n    public async Task<IDictionary<string, object>> mainFunction(string requestBody)\n    {\n\n\n        try\n        {\n            var account = JsonSerializer.Deserialize<Account>(requestBody, jsonOptions);\n\n            if (account == null)\n            {\n                return new Dictionary<string, object> {\n                    { \"statusCode\", 400 },\n                    { \"body\", new { message = \"Invalid values\" } }\n                };\n            }\n\n            await AddOrUpdateAsync(account);\n\n            return new Dictionary<string, object> {\n                { \"statusCode\", 200 },\n                { \"body\", new { message = $\"Successfully processed for {account.Name}\" } }\n            };\n        }\n        catch (ArgumentException ex)\n        {\n\n            return new Dictionary<string, object> {\n                { \"statusCode\", 400 },\n                { \"body\", new { message = $\"Invalid data - {ex.ParamName}\" } }\n            };\n        }\n        catch (JsonException ex)\n        {\n\n            return new Dictionary<string, object> {\n                { \"statusCode\", 400 },\n                { \"body\", new { message = \"Please enter valid details\" } }\n            };\n        }\n        catch (HttpRequestException ex)\n        {\n\n            return new Dictionary<string, object> {\n                { \"statusCode\", 502 },\n                { \"body\", new { message = \"Service unavailable\" } }\n            };\n        }\n        catch (Exception ex)\n        {\n\n            return new Dictionary<string, object> {\n                { \"statusCode\", 500 },\n                { \"body\", new { message = \"Internal server error\" } }\n            };\n        }\n    }\n}\n\n// --- Script Execution ---\n\nstring requestBody = @\"{\n    \"\"Name\"\": \"\"swetanktest\"\",\n    \"\"ReferenceNumber\"\": \"\"ACC001\"\"\n}\";\n\nvar processor = new AccountProcessor();\nvar resultObject = await processor.mainFunction(requestBody);\n\nresultObject",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_b3ShU",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45518,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":3
}