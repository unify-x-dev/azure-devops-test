{
	"appsUsed":[
		
	],
	"createdTime":1761802977017,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_hgdTM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rh0oF",
			"type":"next"
		},
		{
			"fromNodeId":"n_rh0oF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_b3ShU",
			"type":"next"
		}
	],
	"id":"6902fae14cdbea660eb2a8a8",
	"lastModifiedBy":45518,
	"lcName":"[virtu-empowerrepsschedulerfn]syncaccounthttptrigger (copy)",
	"modifiedTime":1761802977017,
	"name":"[virtu-emPowerRepsSchedulerFN]SyncaccountHttpTrigger (copy)",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_hgdTM",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"200",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_rh0oF",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Net.Http;\nusing System.Text;\n\npublic enum ComparisonGroups : short\n{\n    None = 0,\n    Tier = 1 << 0,\n    Designation = 1 << 1,\n    Location = 1 << 2,\n    BusinessUnit = 1 << 3\n}\n\npublic class EvaluationCategory : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public int Weightage { get; set; }\n    public string ImageName { get; set; }\n    public short DefaultRating { get; set; }\n    public ComparisonGroups ComparisonGroups { get; set; }\n    public IReadOnlyCollection<RepsActivity> RepsActivities { get; set; }\n}\n\npublic enum CalculationStrategy\n{\n    None = 0,\n    IndividualMetric = 1,\n    DeliveryProjectMetric = 2\n}\n\npublic enum CappingStrategy : short\n{\n    None = 0,\n    ActivityCountBased = 1,\n    AverageBased = 2,\n    RevisedScoreBased = 3,\n    ScoreBased = 4\n}\n\npublic class CapLimit : BaseEntity<int>\n{\n    public int RepsActivityId { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public short Limit { get; set; }\n    public short Frequency { get; set; }\n    public CappingStrategy CappingStrategy { get; set; }\n}\n\npublic class RepsActivity : BaseEntity<int>\n{\n    public string ActivityName { get; set; }\n    public string Description { get; set; }\n    public int Points { get; set; }\n    public bool IsActive { get; set; }\n    public string FocusArea { get; set; }\n    public string RepsSize { get; set; }\n    public int? CapLimitId { get; set; }\n    public CapLimit CapLimit { get; set; }\n    public CalculationStrategy CalculationStrategy { get; set; }\n    public EvaluationCategory EvaluationCategory { get; set; }\n    public int EvaluationCategoryId { get; set; }\n    public bool ShouldAggregate { get; set; }\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities { get; set; }\n}\n\npublic class EmployeeRepsActivity : BaseEntity<long>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public int RepsActivityId { get; set; }\n    public int Points { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public string ReferenceNumber { get; set; } // need to revisit\n    public RepsActivity RepsActivity { get; set; }\n    public Employee Employee { get; set; }\n    public bool IsAggregated { get; set; }\n}\n\npublic class Tier : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeTier> EmployeeTiers { get; set; }\n}\n\npublic abstract class BaseEntity<T>\n{\n    public T Id { get; set; }\n}\n\npublic class Account : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeAccount> EmployeeAccounts { get; set; }\n}\n\npublic class EmployeeAccount : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int AccountId { get; set; }\n    public Account Account { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Designation : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeDesignation> EmployeeDesignations { get; set; }\n}\n\npublic class EmployeeDesignation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int DesignationId { get; set; }\n    public Designation Designation { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class BusinessUnit : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeBusinessUnit> EmployeeBusinessUnits { get; set; }\n}\n\npublic class EmployeeBusinessUnit : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int BusinessUnitId { get; set; }\n    public BusinessUnit BusinessUnit { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class EmployeeTier : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int TierId { get; set; }\n    public Tier Tier { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Location : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeLocation> EmployeeLocations { get; set; }\n}\n\npublic class EmployeeLocation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int LocationId { get; set; }\n    public Location Location { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Employee : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string? UserName { get; set; } // Nullable if it can be missing\n    public string? FullName { get; set; } // Nullable if it can be missing\n    public string EmployeeNumber { get; set; } // Assuming this is non-nullable key\n    public string? Email { get; set; } // Nullable if it can be missing\n    public bool IsActive { get; set; }\n    public string? Status { get; set; } // Nullable if it can be missing\n    public Employee? Manager { get; set; } // Nullable for top-level managers\n    public string? ManagerEmployeeNumber { get; set; } // Nullable for top-level managers\n    public long? ManagerId { get; set; } // Nullable for top-level managers\n    public EmployeeDesignation? EmployeeDesignation { get; set; } // Nullable if optional\n    public EmployeeAccount? EmployeeAccount { get; set; } // Nullable if optional\n    public EmployeeBusinessUnit? EmployeeBusinessUnit { get; set; } // Nullable if optional\n    public EmployeeLocation? EmployeeLocation { get; set; } // Nullable if optional\n    public EmployeeTier? EmployeeTier { get; set; } // Nullable if optional\n\n    // Note: Deserializing into a readonly List field might require adjustments\n    // Making it a property with a private setter is often safer.\n    private List<EmployeeRepsActivity> _employeeRepsActivities = new List<EmployeeRepsActivity>();\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities => _employeeRepsActivities.AsReadOnly();\n\n    // Internal method to allow adding if needed, potentially called during processing logic\n    internal void AddActivity(EmployeeRepsActivity activity)\n    {\n         if (_employeeRepsActivities == null)\n         {\n             _employeeRepsActivities = new List<EmployeeRepsActivity>();\n         }\n        _employeeRepsActivities.Add(activity);\n    }\n}\n\n\n// --- Logic Class ---\n\npublic class SyncEmployeeLocationHttpTrigger\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string EmployeeRepoUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/EmployeeRepoUrl\";\n    private const string LocationRepoUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/LocationRepoUrl\";\n    private const string EmployeeLocationRepoUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/EmployeeLocationRepoUrl\";\n    private const string DomainName = \"virtusa.com\";\n\n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n        // Consider adding other options like handling null values if needed\n        // DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull\n    };\n\n    // --- DB Interaction Method ---\n    private async Task<TResponse?> CallDbForEmployeeRepository<TResponse>(string operationName, object payload, String apiUrl)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\"; // Default to empty object\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n             Console.WriteLine($\"JSON Serialization Error (Request - {operationName}): {e.Message} | Payload: {payload}\");\n             throw; // Re-throw serialization errors immediately\n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            // Console.WriteLine($\"DEBUG: Sending {operationName} with payload: {jsonRequestBody}\"); // Optional debug log\n            HttpResponseMessage response = await httpClient.PostAsync(apiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n            // Console.WriteLine($\"DEBUG: Received status {response.StatusCode}, content: {responseContent}\"); // Optional debug log\n\n            // Check for non-success status codes specifically\n            if (!response.IsSuccessStatusCode)\n            {\n                 Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n                 // Consider how to handle specific non-success codes (e.g., 404 Not Found might return default)\n                 // For now, throw an exception for any non-success to indicate failure clearly.\n                 response.EnsureSuccessStatusCode(); // This will throw HttpRequestException\n            }\n\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") // Treat empty JSON object as null/default\n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         // Check if the target type is primitive (like int, bool, long) and the JSON element reflects that\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             // Attempt direct deserialization for primitives/string from the element\n                             try {\n                                return resultElement.Deserialize<TResponse>(jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                                return default;\n                             }\n                         }\n                         else // Assume complex object\n                         {\n                            return resultElement.Deserialize<TResponse>(jsonOptions);\n                         }\n                     }\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                        // Check for primitives at the root as well\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             try {\n                                return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                                return default;\n                             }\n                         }\n                         else\n                         {\n                            return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                         }\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n                return default; // Return default on deserialization failure\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n            // Depending on the operation, maybe return default or false instead of throwing\n            // For now, re-throwing signals a clear failure.\n            throw;\n        }\n        // Removed redundant JsonException catch here, handled in request serialization try-catch\n        catch (Exception e) // Catch unexpected errors\n        {\n             Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n             throw;\n        }\n    }\n    \n\n\n\n     public async Task AddOrUpdateAsync(EmployeeLocation employeeLocation)\n        {\n            ValidateParameters(employeeLocation);\n\n            var employeeSpecification = new EmployeeByEmployeeNumberSpecification(employeeLocation.EmployeeNumber);\n            var employee = await _employeeRepository.FirstOrDefaultAsync(employeeSpecification).ConfigureAwait(false);\n            if (employee == null)\n            {\n                throw new EmployeeNotFoundException($\"No employee found with EmployeeNumber= {employeeLocation.EmployeeNumber}\");\n            }\n\n            var specification = new LocationByReferenceNumberSpecification(employeeLocation.ReferenceNumber);\n            var location = await _locationRepository.FirstOrDefaultAsync(specification).ConfigureAwait(false);\n            if (location == null)\n            {\n                throw new LocationNotFoundException($\"No location found with referencenumber= {employeeLocation.ReferenceNumber}\");\n            }\n\n            var employeeLocationByUserNameSpecification = new EmployeeLocationByEmployeeIdSpecification(employee.EmployeeId);\n            var currentEmployeeLocation = await _employeeLocationRepository.FirstOrDefaultAsync(employeeLocationByUserNameSpecification).ConfigureAwait(false);\n            if (currentEmployeeLocation == null)\n            {\n                employeeLocation.LocationId = location.Id;\n                employeeLocation.EmployeeId = employee.EmployeeId;\n                await _employeeLocationRepository.AddAsync(employeeLocation).ConfigureAwait(false);\n            }\n            else\n            {\n                currentEmployeeLocation.LocationId = location.Id;\n                await _employeeLocationRepository.UpdateAsync(currentEmployeeLocation).ConfigureAwait(false);\n            }\n        }\n\n        private void ValidateParameters(EmployeeLocation employeeLocation)\n        {\n            if (string.IsNullOrEmpty(employeeLocation.EmployeeNumber))\n            {\n                throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeLocation.EmployeeNumber));\n            }\n            if (string.IsNullOrEmpty(employeeLocation.ReferenceNumber))\n            {\n                throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeLocation.ReferenceNumber));\n            }\n        }\n\n    // --- Main Script Function ---\n    public async Task<IDictionary<string, object>> mainFunction(string requestBody)\n    {\n        var employeeLocation = JsonConvert.DeserializeObject<EmployeeLocation>(requestBody);\n                    if (employeeLocation == null)\n                    {\n                        return new BadRequestObjectResult(\"Invalid input values\");\n                    }\n\n                    await _employeeLocationService.AddOrUpdateAsync(employeeLocation).ConfigureAwait(false);\n                    return new OkObjectResult(\"Successfully processed\");\n    }\n}\n\nstring requestBody = @\"\n{\n  \"\"EmployeeNumber\"\": \"\"8026400\"\",\n  \"\"ReferenceNumber\"\": \"\"GB\"\"\n}\";\n\nvar processor = new SyncEmployeeLocationHttpTrigger();\nvar resultObject = await processor.mainFunction(requestBody);\n\nresultObject \n\n",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_b3ShU",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45518,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":0
}