{
	"appsUsed":[
		
	],
	"createdTime":1761888812681,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761894813009,
		"deployedBy":39713,
		"deployedDefinitionId":"6904619cffd2512f2177f104",
		"status":"DEPLOYED",
		"version":1,
		"workflowVersion":2
	},
	"edges":[
		{
			"fromNodeId":"n_boYX1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_uiCF2",
			"type":"next"
		},
		{
			"fromNodeId":"n_uiCF2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_0H2GY",
			"type":"next"
		}
	],
	"id":"69044a2cffd2512f2177cbc8",
	"lastModifiedBy":39713,
	"lcName":"[virtu-empowerrepsschedulerfn]syncbusinessunithttptrigger",
	"modifiedTime":1761920375811,
	"name":"[virtu-emPowerRepsSchedulerFN]SyncBusinessUnitHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1163,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_RyPoF-1",
			"id":"n_boYX1",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"200",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"response":{
									"type":"object",
									"properties":{},
									"additionalProperties":false,
									"title":"Response"
								}
							},
							"additionalProperties":false,
							"required":[]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":233,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_RyPoF-1",
			"id":"n_uiCF2",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"statusCode":{
							"type":"integer",
							"title":"Status Code"
						},
						"body":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Body"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"requestBody":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Request Body"
						}
					}
				},
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Text.Json; \nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Net.Http;\nusing System.Text;\n\nusing Microsoft.Extensions.Logging; \n\n// --- Base\npublic enum ComparisonGroups : short\n{\n    None = 0,\n    Tier = 1 << 0,\n    Designation = 1 << 1,\n    Location = 1 << 2,\n    BusinessUnit = 1 << 3\n}\n\npublic class EvaluationCategory : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public int Weightage { get; set; }\n    public string ImageName { get; set; }\n    public short DefaultRating { get; set; }\n    public ComparisonGroups ComparisonGroups { get; set; }\n    public IReadOnlyCollection<RepsActivity> RepsActivities { get; set; }\n}\n\npublic enum CalculationStrategy\n{\n    None = 0,\n    IndividualMetric = 1,\n    DeliveryProjectMetric = 2\n}\n\npublic enum CappingStrategy : short\n{\n    None = 0,\n    ActivityCountBased = 1,\n    AverageBased = 2,\n    RevisedScoreBased = 3,\n    ScoreBased = 4\n}\n\npublic class CapLimit : BaseEntity<int>\n{\n    public int RepsActivityId { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public short Limit { get; set; }\n    public short Frequency { get; set; }\n    public CappingStrategy CappingStrategy { get; set; }\n}\n\npublic class RepsActivity : BaseEntity<int>\n{\n    public string ActivityName { get; set; }\n    public string Description { get; set; }\n    public int Points { get; set; }\n    public bool IsActive { get; set; }\n    public string FocusArea { get; set; }\n    public string RepsSize { get; set; }\n    public int? CapLimitId { get; set; }\n    public CapLimit CapLimit { get; set; }\n    public CalculationStrategy CalculationStrategy { get; set; }\n    public EvaluationCategory EvaluationCategory { get; set; }\n    public int EvaluationCategoryId { get; set; }\n    public bool ShouldAggregate { get; set; }\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities { get; set; }\n}\n\npublic class EmployeeRepsActivity : BaseEntity<long>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public int RepsActivityId { get; set; }\n    public int Points { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public string ReferenceNumber { get; set; } // need to revisit\n    public RepsActivity RepsActivity { get; set; }\n    public Employee Employee { get; set; }\n    public bool IsAggregated { get; set; }\n}\n\npublic class Tier : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeTier> EmployeeTiers { get; set; }\n}\n\npublic abstract class BaseEntity<T>\n{\n    public T Id { get; set; }\n}\n\npublic class Account : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeAccount> EmployeeAccounts { get; set; }\n}\n\npublic class EmployeeAccount : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int AccountId { get; set; }\n    public Account Account { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Designation : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeDesignation> EmployeeDesignations { get; set; }\n}\n\npublic class EmployeeDesignation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int DesignationId { get; set; }\n    public Designation Designation { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class BusinessUnit : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeBusinessUnit> EmployeeBusinessUnits { get; set; }\n}\n\npublic class EmployeeBusinessUnit : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int BusinessUnitId { get; set; }\n    public BusinessUnit BusinessUnit { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class EmployeeTier : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int TierId { get; set; }\n    public Tier Tier { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Location : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeLocation> EmployeeLocations { get; set; }\n}\n\npublic class EmployeeLocation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int LocationId { get; set; }\n    public Location Location { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Employee : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string? UserName { get; set; } // Nullable if it can be missing\n    public string? FullName { get; set; } // Nullable if it can be missing\n    public string EmployeeNumber { get; set; } // Assuming this is non-nullable key\n    public string? Email { get; set; } // Nullable if it can be missing\n    public bool IsActive { get; set; }\n    public string? Status { get; set; } // Nullable if it can be missing\n    public Employee? Manager { get; set; } // Nullable for top-level managers\n    public string? ManagerEmployeeNumber { get; set; } // Nullable for top-level managers\n    public long? ManagerId { get; set; } // Nullable for top-level managers\n    public EmployeeDesignation? EmployeeDesignation { get; set; } // Nullable if optional\n    public EmployeeAccount? EmployeeAccount { get; set; } // Nullable if optional\n    public EmployeeBusinessUnit? EmployeeBusinessUnit { get; set; } // Nullable if optional\n    public EmployeeLocation? EmployeeLocation { get; set; } // Nullable if optional\n    public EmployeeTier? EmployeeTier { get; set; } // Nullable if optional\n\n    // Note: Deserializing into a readonly List field might require adjustments\n    // Making it a property with a private setter is often safer.\n    private List<EmployeeRepsActivity> _employeeRepsActivities = new List<EmployeeRepsActivity>();\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities => _employeeRepsActivities.AsReadOnly();\n\n    // Internal method to allow adding if needed, potentially called during processing logic\n    internal void AddActivity(EmployeeRepsActivity activity)\n    {\n         if (_employeeRepsActivities == null)\n         {\n             _employeeRepsActivities = new List<EmployeeRepsActivity>();\n         }\n        _employeeRepsActivities.Add(activity);\n    }\n}\n\n// --- Logic Class ---\n\npublic class SyncBusinessUnitHttpTrigger\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string BusinessRepoUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/BusinessRepoUrl\";\n    private const string DomainName = \"virtusa.com\";\n\n     private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    };\n\n    private ILogger? _log;\n\n    // --- DB Interaction Method (Using Newtonsoft.Json) ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload, string apiUrl)\n    {\n        var requestBody = new { payload, operationName };\n        string jsonRequestBody = \"{}\";\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n             _log?.LogError(e, \"JSON Serialization Error (Request - {OperationName})\", operationName);\n             throw; \n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            HttpResponseMessage response = await httpClient.PostAsync(apiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                 _log?.LogWarning(\"HTTP Request Error ({OperationName}) to {ApiUrl}: {StatusCode} | Response: {ResponseContent}\", operationName, apiUrl, response.StatusCode, responseContent);\n                 response.EnsureSuccessStatusCode(); // Will throw HttpRequestException\n            }\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\")\n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     // Check for a nested result, common in API responses\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement) || root.TryGetProperty(\"response\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         return resultElement.Deserialize<TResponse>(jsonOptions);\n                     }\n                     // Otherwise, try to deserialize the entire response\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                        return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                _log?.LogError(jsonEx, \"JSON Deserialization Error ({OperationName}) | Response: {ResponseContent}\", operationName, responseContent);\n                return default;\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            _log?.LogError(e, \"HTTP Request Error ({OperationName}) to {ApiUrl}\", operationName, apiUrl);\n            throw;\n        }\n        catch (Exception e)\n        {\n             _log?.LogError(e, \"An unexpected error occurred in CallDb ({OperationName}) to {ApiUrl}\", operationName, apiUrl);\n             throw;\n        }\n    }\n    \n     public async Task AddOrUpdateAsync(BusinessUnit businessUnit)\n        {\n            ValidateBusinessUnitData(businessUnit);\n            await ProcessBusinessUnitDataAsync(businessUnit).ConfigureAwait(false);\n        }\n\n        private void ValidateBusinessUnitData(BusinessUnit businessUnit)\n        {\n            if (string.IsNullOrEmpty(businessUnit.Name))\n            {\n                throw new ArgumentException(\"The value cannot be null\", nameof(businessUnit.Name));\n            }\n            if (string.IsNullOrEmpty(businessUnit.ReferenceNumber))\n            {\n                throw new ArgumentException(\"The value cannot be null\", nameof(businessUnit.ReferenceNumber));\n            }\n        }\n\n        private async Task ProcessBusinessUnitDataAsync(BusinessUnit businessUnit)\n        {\n            // ⭐ REPO -> CallDb\n            var payload = new Dictionary<string, object> { { \"ReferenceNumber\", businessUnit.ReferenceNumber } };\n            \n            int? businessUnitCount = await CallDb<int>(\"CountAsync\", payload, BusinessRepoUrl).ConfigureAwait(false);\n            \n            if (businessUnitCount.HasValue && businessUnitCount.Value == 0)\n            {\n                // ⭐ REPO -> CallDb\n                await CallDb<BusinessUnit>(\"AddAsync\", businessUnit, BusinessRepoUrl).ConfigureAwait(false);\n            }\n            else\n            {\n                // ⭐ REPO -> CallDb\n                var existingBusinessUnit = await CallDb<BusinessUnit>(\"FirstOrDefaultAsync\", payload, BusinessRepoUrl).ConfigureAwait(false);\n                \n                // if (existingBusinessUnit != null)\n                // {\n                    existingBusinessUnit.Name = businessUnit.Name;\n                    // ⭐ REPO -> CallDb\n                    await CallDb<object>(\"UpdateAsync\", existingBusinessUnit, BusinessRepoUrl).ConfigureAwait(false);\n                // }\n                // else\n                // {\n                //      _log?.LogWarning(\"BusinessUnit with Ref {ReferenceNumber} reported count > 0 but was not found.\", businessUnit.ReferenceNumber);\n                //      // Fallback: Add it if it wasn't found\n                //      await CallDb<BusinessUnit>(\"AddAsync\", businessUnit, BusinessRepoUrl).ConfigureAwait(false);\n                // }\n            }\n        }\n        // --- Main Script Function (Refactored) ---\n    public async Task<IDictionary<string, object>> mainFunction(string requestBody, ILogger? log = null)\n    {\n        this._log = log; // Set logger\n        try\n        {                           \n            var businessUnit = System.Text.Json.JsonSerializer.Deserialize<BusinessUnit>(requestBody, jsonOptions);\n            if (businessUnit == null)\n            {\n                // ⭐ Return map\n                return new Dictionary<string, object> {\n                    { \"statusCode\", 400 },\n                    { \"body\", new { message = \"Invalid input values\" } }\n                };\n            }\n\n            // ⭐ Call this.AddOrUpdateAsync\n            await this.AddOrUpdateAsync(businessUnit).ConfigureAwait(false);\n            \n            // ⭐ Return map\n            return new Dictionary<string, object> {\n                { \"statusCode\", 200 },\n                { \"body\", new { message = $\"Successfully processed for {businessUnit.Name}\" } }\n            };\n        }\n        catch (ArgumentException e)\n        {\n            _log?.LogError(e, \"Validation error: {Message}\", e.Message);\n            return new Dictionary<string, object> {\n                { \"statusCode\", 400 },\n                { \"body\", new { message = $\"Invalid input: {e.Message}\" } }\n            };\n        }\n        catch (Exception e)\n        {\n            _log?.LogError(e, \"An unhandled exception occurred: {Message}\", e.Message);\n            return new Dictionary<string, object> {\n                { \"statusCode\", 500 },\n                { \"body\", new { message = $\"Internal server error: {e.Message}\" } }\n            };\n        }\n    }\n}\n\n// --- Script Execution ---\n\n// string requestBody = @\"{\n//   \"\"Name\"\": \"\"ETDS-E2E BIZ SVCS SUPPORT DEPTS\"\",\n//   \"\"ReferenceNumber\"\": \"\"300001969311117\"\"\n// }\";\n\nstring reqBody = JsonSerializer.Serialize(requestBody);\nvar processor = new SyncBusinessUnitHttpTrigger();\nvar resultObject = await processor.mainFunction(reqBody, null); // Pass null for logger\n\nresultObject // Return value for the script\n",
				"isAsync":false,
				"parameters":{
					"requestBody":"{{ n_boYX1.outputs.body }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1132,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_RyPoF-1",
			"id":"n_0H2GY",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200",
				"body":{
					"response":"{{ n_uiCF2.outputs.result }}"
				},
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39713,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":8
}