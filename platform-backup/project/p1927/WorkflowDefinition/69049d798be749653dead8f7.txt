{
	"appsUsed":[
		
	],
	"createdTime":1761910137631,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761926453431,
		"deployedBy":46217,
		"deployedDefinitionId":"6904dd3572b41f1520887b12",
		"status":"DEPLOYED",
		"version":2,
		"workflowVersion":4
	},
	"edges":[
		{
			"fromNodeId":"n_WmBtH",
			"priority":0,
			"skip":false,
			"toNodeId":"n_LpIth",
			"type":"next"
		},
		{
			"fromNodeId":"n_LpIth",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nXgwV",
			"type":"next"
		}
	],
	"id":"69049d798be749653dead8f7",
	"lastModifiedBy":46217,
	"lcName":"[virtu-approvalsfunctionappfn]updatecheckinapproval",
	"modifiedTime":1761926558318,
	"name":"[virtu-ApprovalsFunctionAppFN]UpdateCheckInApproval",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":965,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_WmBtH",
			"index":1,
			"inputs":{
				"request":{
					"headers":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"Authorization":{
								"type":"string",
								"title":"Authorization"
							}
						}
					},
					"queryParams":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"employeeNumber":{
								"type":"string",
								"title":"Employee Number"
							},
							"startDate":{
								"type":"string",
								"title":"Start Date"
							},
							"endDate":{
								"type":"string",
								"title":"End Date"
							}
						}
					},
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_LpIth",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.Json;\nusing System.Globalization;\n\n// ----- Models -----\n\npublic class CheckInApproval\n{\n    public string? id { get; set; }\n    public int gteEmployeeNo { get; set; }\n    public int year { get; set; }\n    public int week { get; set; }\n    public int gteProjectId { get; set; }\n    public string? projectName { get; set; }\n    public string? name { get; set; }\n    public int teamMembersGteEmployeeNo { get; set; }\n    public double time { get; set; }\n    public string? status { get; set; }\n    public string? app { get; set; }\n    public string? subCategory { get; set; }\n}\n\npublic class CheckInApprovalList\n{\n    public List<CheckInApproval>? items { get; set; }\n}\n\npublic class CheckInApprovalData\n{\n    public string? user { get; set; }\n    public int gteEmployeeNo { get; set; }\n    public int year { get; set; }\n    public int week { get; set; }\n    public IList<ApprovalData>? approvalData { get; set; }\n}\n\npublic class ApprovalData\n{\n    public int gteProjectId { get; set; }\n    public string? projectName { get; set; }\n    public IList<TeamMembers>? teamMembers { get; set; }\n}\n\npublic class TeamMembers\n{\n    public string? name { get; set; }\n    public string? email { get; set; }\n    public int gteEmployeeNo { get; set; }\n    public double time { get; set; }\n}\n\n\n// ----- Data Mappers -----\n\npublic class CheckInApprovalDataMapper \n{\n    public List<CheckInApproval> MapToApprovalList(CheckInApprovalData checkinApprovalList)\n    {\n        List<CheckInApproval> approvalList = new List<CheckInApproval>();\n\n        foreach (ApprovalData approvalData in checkinApprovalList.approvalData!)\n        {\n            foreach (TeamMembers teamMembers in approvalData.teamMembers!)\n            {\n                try\n                {\n                    CheckInApproval checkInApproval = new CheckInApproval()\n                    {\n                        id = string.Concat(approvalData.gteProjectId, checkinApprovalList.year, checkinApprovalList.week),\n                        gteEmployeeNo = checkinApprovalList.gteEmployeeNo,\n                        year = checkinApprovalList.year,\n                        week = checkinApprovalList.week,\n                        gteProjectId = approvalData.gteProjectId,\n                        projectName = approvalData.projectName,\n                        name = teamMembers.name,\n                        teamMembersGteEmployeeNo = teamMembers.gteEmployeeNo,\n                        time = teamMembers.time,\n                        app = \"CheckIn\",\n                        subCategory = \"Time Approval\"\n\n                    };\n\n                    approvalList.Add(checkInApproval);\n                }\n                catch (Exception ex)\n                {\n                    // _logger.LogError(ex, ex.Message);\n                }\n            }\n        }\n\n        return approvalList;\n    }\n}\n\n\n// ----- Data Providers -----\n\npublic class CheckInApprovalDataProvider\n{\n    private readonly HttpClient checkinClient;\n    private readonly HttpClient checkinPatchClient;\n    private readonly CheckInApprovalDataMapper _checkinApprovalDataMapper;\n\n    public CheckInApprovalDataProvider()\n    {\n        checkinClient = new HttpClient();\n        checkinPatchClient = new HttpClient();\n        _checkinApprovalDataMapper = new CheckInApprovalDataMapper();\n\n        string checkinClientUrl = \"https://virtueagintegrationsapim-dev2.azure-api.net/checkin-api/v1/generic/\";\n        checkinClient.BaseAddress = new Uri(checkinClientUrl);\n        checkinClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"e173134d94d34ce8a12ebe02e69d5b3e\");\n\n        string checkinPatchClientUrl = \"https://virtueagintegrationsapim-dev2.azure-api.net/checkin-crud-api/v1/generic/\";\n        checkinPatchClient.BaseAddress = new Uri(checkinPatchClientUrl);\n        checkinPatchClient.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-Key\", \"d6f3f63f50854c0990cd61dbd7e64057\");\n    }\n\n    public async Task<CheckInApprovalList> GetCheckInTimeApprovalsAsync(string email, String token)\n    {\n        // _logger.LogInformation(\"starting time approvals from CheckIn\");\n\n        CheckInApprovalList approvalList = new CheckInApprovalList() { items = new List<CheckInApproval>() };\n        checkinClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n        DateTime now = DateTime.Now;\n        DateTime startDate = now.AddDays(-90);\n        DateTime endDate = now.AddDays(30);\n        Calendar cal = new CultureInfo(\"en-US\").Calendar;\n        try\n        {\n            while (startDate <= endDate)\n            {\n                HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"approval?user-name={0}&year={1}&week-no={2}\", email, startDate.Year, cal.GetWeekOfYear(startDate, CalendarWeekRule.FirstFullWeek, DayOfWeek.Monday)));\n                getUserRequest.Content = new StringContent(\"\", Encoding.ASCII, \"application/json\");\n\n                startDate = startDate.AddDays(7);\n\n                HttpResponseMessage checkinGetUSerApiResponse = await checkinClient.SendAsync(getUserRequest);\n\n                if (!checkinGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // dynamic result = JsonSerializer.Deserialize<dynamic>(checkinGetUSerApiResponse.Content.ReadAsStringAsync().Result)!;\n                    // string message = result.message.ToString();\n                    // string content = result.ToString();\n                        \n                    var responseContent = await checkinGetUSerApiResponse.Content.ReadAsStringAsync();\n                    var jsonDoc = JsonDocument.Parse(responseContent);\n                    var root = jsonDoc.RootElement;\n\n                    string message = root.TryGetProperty(\"message\", out var messageProp)\n                        ? messageProp.GetString() ?? string.Empty\n                        : string.Empty;\n\n                    string content = root.GetRawText();\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", content);\n\n                    if (checkinGetUSerApiResponse.StatusCode == System.Net.HttpStatusCode.NotFound &&\n                        (message == \"No Pending Approvals\" || message == \"No Data Found\" || message.StartsWith(\"Value not found!\")))\n                    {\n                        continue;\n                    }\n                }\n\n                approvalList.items.AddRange(_checkinApprovalDataMapper.MapToApprovalList(JsonSerializer.Deserialize<CheckInApprovalData>(checkinGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!));\n            }\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n            throw;\n        }\n\n        // _logger.LogInformation(\"ending time approvals from CheckIn\");\n\n        return approvalList;\n    }\n\n    public async Task PatchCheckInTimeApprovalAsync(CheckInApprovalList approvalList, String token)\n    {\n        // _logger.LogInformation(\"start sending time approvals to CheckIn\");\n\n        List<CheckInApproval> approveList = approvalList.items!.FindAll(s => s.status?.ToLower() == \"approve\");\n        List<CheckInApproval> rejectList = approvalList.items!.FindAll(s => s.status?.ToLower() == \"reject\");\n\n        IEnumerable<CheckInApprovalData>? newApproveList = approveList\n            .GroupBy(x => new { x.year, x.week, x.gteEmployeeNo })\n            .Select(a => new CheckInApprovalData()\n            {\n                year = a.Key.year,\n                week = a.Key.week,\n                gteEmployeeNo = a.Key.gteEmployeeNo,\n                approvalData = a.GroupBy(b => new { b.gteProjectId })\n            .Select(c => new ApprovalData()\n            {\n                gteProjectId = c.Key.gteProjectId,\n                teamMembers = c.GroupBy(d => new { d.teamMembersGteEmployeeNo, d.time })\n                .Select(e => new TeamMembers()\n                {\n                    gteEmployeeNo = e.Key.teamMembersGteEmployeeNo\n                }).ToList()\n            }).ToList()\n            });\n\n        IEnumerable<CheckInApprovalData>? newRejectList = rejectList\n            .GroupBy(x => new { x.year, x.week, x.gteEmployeeNo })\n            .Select(a => new CheckInApprovalData()\n            {\n                year = a.Key.year,\n                week = a.Key.week,\n                gteEmployeeNo = a.Key.gteEmployeeNo,\n                approvalData = a.GroupBy(b => new { b.gteProjectId })\n            .Select(c => new ApprovalData()\n            {\n                gteProjectId = c.Key.gteProjectId,\n                teamMembers = c.GroupBy(d => new { d.teamMembersGteEmployeeNo, d.time })\n                .Select(e => new TeamMembers()\n                {\n                    gteEmployeeNo = e.Key.teamMembersGteEmployeeNo\n                }).ToList()\n            }).ToList()\n            });\n\n        checkinPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n        try\n        {\n            foreach (CheckInApprovalData checkInApprovalData in newApproveList)\n            {\n                var payload = new\n                    {\n                        gteEmployeeNo = checkInApprovalData.gteEmployeeNo,\n                        approvalData = checkInApprovalData.approvalData.Select(a => new\n                        {\n                            gteProjectId = a.gteProjectId,\n                            teamMembers = a.teamMembers.Select(b => b.gteEmployeeNo).ToList()\n                        }).ToList()\n                    };\n    \n                // JObject jObject =\n                // new JObject(\n                //   new JProperty(\"gteEmployeeNo\", checkInApprovalData.gteEmployeeNo),\n                //   new JProperty(\"approvalData\",\n                //   new JArray(\n                //     from a in checkInApprovalData.approvalData\n                //     select new JObject(\n                //       new JProperty(\"gteProjectId\", a.gteProjectId),\n                //       new JProperty(\"teamMembers\",\n                //       new JArray(\n                //         from b in a.teamMembers\n                //         select new JValue(b.gteEmployeeNo)))))));\n\n                HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Put, string.Format(\"approval/{0}/{1}/{2}\", checkInApprovalData.year, checkInApprovalData.week, \"A\"));\n                patchUserRequest.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n                HttpResponseMessage checkinPatchUSerApiResponse = await checkinPatchClient.SendAsync(patchUserRequest);\n                if (!checkinPatchUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", checkinPatchUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                checkinPatchUSerApiResponse.EnsureSuccessStatusCode();\n            }\n\n            foreach (CheckInApprovalData checkInApprovalData in newRejectList)\n            {\n                var payload = new\n                    {\n                        gteEmployeeNo = checkInApprovalData.gteEmployeeNo,\n                        approvalData = checkInApprovalData.approvalData.Select(a => new\n                        {\n                            gteProjectId = a.gteProjectId,\n                            teamMembers = a.teamMembers.Select(b => b.gteEmployeeNo).ToList()\n                        }).ToList()\n                    };\n    \n                // JObject jObject =\n                // new JObject(\n                //   new JProperty(\"gteEmployeeNo\", checkInApprovalData.gteEmployeeNo),\n                //   new JProperty(\"approvalData\",\n                //   new JArray(\n                //     from a in checkInApprovalData.approvalData\n                //     select new JObject(\n                //       new JProperty(\"gteProjectId\", a.gteProjectId),\n                //       new JProperty(\"teamMembers\",\n                //       new JArray(\n                //         from b in a.teamMembers\n                //         select new JValue(b.gteEmployeeNo)))))));\n\n                HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Put, string.Format(\"approval/{0}/{1}/{2}\", checkInApprovalData.year, checkInApprovalData.week, \"R\"));\n                patchUserRequest.Content = new StringContent(JsonSerializer.Serialize(payload), Encoding.UTF8, \"application/json\");\n\n                HttpResponseMessage checkinPatchUSerApiResponse = await checkinPatchClient.SendAsync(patchUserRequest);\n                if (!checkinPatchUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", checkinPatchUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                checkinPatchUSerApiResponse.EnsureSuccessStatusCode();\n            }\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n            throw;\n        }\n\n        // _logger.LogInformation(\"end sending time approvals to CheckIn\");\n    }\n}\n\n\n// ----- Azure UpdateCheckinApproval Function -----\n\npublic async Task<IDictionary<string, object>> mainFunction(string email, string? requestBody = null, string? authorizationToken = null)\n{\n    var response = new Dictionary<string, object>();\n\n    if (!Regex.IsMatch(email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))\n    {\n        response[\"statusCode\"] = 400;\n        response[\"body\"] = $\"path parameter {email} is not valid. Please provide valid email\";\n        return response;\n    }\n\n    if (string.IsNullOrEmpty(authorizationToken))\n    {\n        response[\"statusCode\"] = 400;\n        response[\"body\"] = \"Please provide Authorization header\";\n        return response;\n    }\n\n    var _checkinApprovalDataProvider = new CheckInApprovalDataProvider();\n\n    // _logger.LogInformation(\"updating approvals for {email}\", email);\n    try\n    {\n        CheckInApprovalList input = JsonSerializer.Deserialize<CheckInApprovalList>(requestBody)!;\n\n        if (input.items != null)\n        {\n            await _checkinApprovalDataProvider.PatchCheckInTimeApprovalAsync(input, authorizationToken.Split(' ').Last());\n        }\n\n        response[\"statusCode\"] = 200;\n        response[\"headers\"] = new Dictionary<string, string>\n        {\n            { \"Content-Type\", \"application/json; charset=utf-8\" }\n        };\n        response[\"body\"] = JsonSerializer.Serialize(new\n        {\n            response = \"PATCH request processed\"\n        });\n    }\n    catch (Exception ex)\n    {\n        // _logger.LogError(ex, ex.Message);\n        response[\"statusCode\"] = 400;\n        response[\"body\"] = JsonSerializer.Serialize(new\n        {\n            response = \"request (body/header) is not valid\"\n        });\n    }\n                \n\n    return response;\n}\n\n// Example input\nstring email = \"tskulathunga@virtusa.com\";\nstring requestBody = @\"\n{\n    \"\"items\"\": [\n        {\n            \"\"id\"\": \"\"39189202532\"\",\n            \"\"gteEmployeeNo\"\": 466739,\n            \"\"year\"\": 2025,\n            \"\"week\"\": 32,\n            \"\"gteProjectId\"\": 39189,\n            \"\"projectName\"\": \"\"IreshTestPool\"\",\n            \"\"name\"\": \"\"Niharika Bejugam\"\",\n            \"\"teamMembersGteEmployeeNo\"\": 441421,\n            \"\"time\"\": 46.3,\n            \"\"status\"\": null,\n            \"\"app\"\": \"\"CheckIn\"\",\n            \"\"subCategory\"\": \"\"Time Approval\"\"\n        },\n        {\n            \"\"id\"\": \"\"39189202531\"\",\n            \"\"gteEmployeeNo\"\": 466739,\n            \"\"year\"\": 2025,\n            \"\"week\"\": 31,\n            \"\"gteProjectId\"\": 39189,\n            \"\"projectName\"\": \"\"IreshTestPool\"\",\n            \"\"name\"\": \"\"Niharika Bejugam\"\",\n            \"\"teamMembersGteEmployeeNo\"\": 441421,\n            \"\"time\"\": 51.0,\n            \"\"status\"\": null,\n            \"\"app\"\": \"\"CheckIn\"\",\n            \"\"subCategory\"\": \"\"Time Approval\"\"\n        },\n        {\n            \"\"id\"\": \"\"39189202530\"\",\n            \"\"gteEmployeeNo\"\": 466739,\n            \"\"year\"\": 2025,\n            \"\"week\"\": 30,\n            \"\"gteProjectId\"\": 39189,\n            \"\"projectName\"\": \"\"IreshTestPool\"\",\n            \"\"name\"\": \"\"Niharika Bejugam\"\",\n            \"\"teamMembersGteEmployeeNo\"\": 441421,\n            \"\"time\"\": 45.0,\n            \"\"status\"\": null,\n            \"\"app\"\": \"\"CheckIn\"\",\n            \"\"subCategory\"\": \"\"Time Approval\"\"\n        }\n    ]\n}\";               \nstring authorizationToken = \"Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6InlFVXdtWFdMMTA3Q2MtN1FaMldTYmVPYjNzUSIsImtpZCI6InlFVXdtWFdMMTA3Q2MtN1FaMldTYmVPYjNzUSJ9.eyJhdWQiOiJodHRwczovL3NlcnZpY2UuZmxvdy5taWNyb3NvZnQuY29tLyIsImlzcyI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzBkODUxNjBjLTU4OTktNDRjYS1hY2M4LWRiMTUwMWI5OTNiNi8iLCJpYXQiOjE3NjE5MTIyMDgsIm5iZiI6MTc2MTkxMjIwOCwiZXhwIjoxNzYxOTE3NjI0LCJhY2N0IjowLCJhY3IiOiIxIiwiYWlvIjoiQVVRQXUvOGFBQUFBRnFoTm1Bb2ZaR0p5eGtQSWpWQjBEdDBuZWh5NTJsOFh1SXRsUVVNWStXZk4wZnhnSzkzVVdvS0g1bXJBL3p0NTArSDZQN0RwY3JzWnFFQk1OUUphTVE9PSIsImFtciI6WyJwd2QiLCJyc2EiXSwiYXBwaWQiOiIwOGUxODg3Ni02MTc3LTQ4N2UtYjhiNS1jZjk1MGMxZTU5OGMiLCJhcHBpZGFjciI6IjAiLCJkZXZpY2VpZCI6IjQyOTc2ZDQ4LTRlYjUtNDY3Yy1hOTMzLWVkNTM2YTMzNWM5MiIsImZhbWlseV9uYW1lIjoiS3VtYXIiLCJnaXZlbl9uYW1lIjoiQW5zaHVsIiwiaWR0eXAiOiJ1c2VyIiwiaXBhZGRyIjoiMTY1LjIyNS4xMjUuNzMiLCJuYW1lIjoiQW5zaHVsIEt1bWFyIiwib2lkIjoiYmE0ODQxNGItMWQ0My00M2MwLWI2YzktNGJmZTEzZmMwZDIyIiwib25wcmVtX3NpZCI6IlMtMS01LTIxLTE5MzU2NTU2OTctMjEzOTg3MTk5NS02ODIwMDMzMzAtNjQ4MzI1IiwicHVpZCI6IjEwMDMyMDA0RDJCQUI3N0YiLCJyaCI6IjEuQVFvQURCYUZEWmxZeWtTc3lOc1ZBYm1UdGlXaDhIMi0wNVpNcWxSWkg0UF9WQndLQUxjS0FBLiIsInNjcCI6IkFwcHJvdmFscy5NYW5hZ2UuQWxsIEZsb3dzLlJlYWQuQWxsIEZsb3dzLlJlYWQuUGxhbnMgRmxvd3MuV3JpdGUuUGxhbnMiLCJzaWQiOiIwMDljYmQxOS0yMTM0LTdjMGYtYTRjZi02MzUyN2FhNDlkMjAiLCJzaWduaW5fc3RhdGUiOlsiZHZjX21uZ2QiLCJkdmNfY21wIiwiZHZjX2RtamQiLCJrbXNpIl0sInN1YiI6IlRoN2UwZDRCUjJIUVk1Uk9Ldl9lSW16amVhdGw4Q0hNQ0toSmI5dThOVzAiLCJ0ZW5hbnRfcmVnaW9uX3Njb3BlIjoiQVMiLCJ0aWQiOiIwZDg1MTYwYy01ODk5LTQ0Y2EtYWNjOC1kYjE1MDFiOTkzYjYiLCJ1bmlxdWVfbmFtZSI6ImFuc2h1bGt1bWFyQHZpcnR1c2EuY29tIiwidXBuIjoiYW5zaHVsa3VtYXJAdmlydHVzYS5jb20iLCJ1dGkiOiJaZFFkNVR0aVFrVzVsNmlrWmNYWEFBIiwidmVyIjoiMS4wIiwieG1zX2FjdF9mY3QiOiIzIDUiLCJ4bXNfZnRkIjoiaUtseHJQQzZGdElxaE9vd1RJR1dTdHJwd1d1aWR4SUdxYnhzTm1FWF9pY0JhMjl5WldGemIzVjBhQzFrYzIxeiIsInhtc19pZHJlbCI6IjEgMTAiLCJ4bXNfc3ViX2ZjdCI6IjMgMTAifQ.c3EQVXtwYGvRXbqDAjoan3LePr-k8D41UrePNnxC9ZKpOWqN_BHheMY1vxb1K7KxUH-IwHg3mPLbP6du0EQlRvI3mD6ax-f3ESnuYCFn4MRrZUNo0jeQS8IQ664TztJ8Z-I1F_rsPl8ZJ4eUXRC5axFoGdGgypepspc_uwdBXNFKt795JMejUlPl52yXbwglRwqBt0CH6iROGNZc_5NPDLSmy0eStDnF8k8xuCKiQuzfjJAPyMiArexbLv-58gxpN5w0Sn5XhXuB1z1uHO7af9JZ9o8eo1Xr3niE1CMXf9JwsEsVrq3As_lYdgRQEL6cr-TLjzAdXKCZR64Hxn2iWQ\"; \n\nvar result = await mainFunction( email, requestBody, authorizationToken);\nresult",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":916,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_otcPG-1",
			"id":"n_nXgwV",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":46217,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":5
}