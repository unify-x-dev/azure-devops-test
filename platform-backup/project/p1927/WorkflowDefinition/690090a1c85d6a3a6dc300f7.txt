{
	"appsUsed":[
		
	],
	"createdTime":1761644705457,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_eJ0LW",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nMUz0",
			"type":"next"
		},
		{
			"fromNodeId":"n_nMUz0",
			"priority":0,
			"skip":false,
			"toNodeId":"n_zPwE7",
			"type":"next"
		}
	],
	"id":"690090a1c85d6a3a6dc300f7",
	"lastModifiedBy":186875,
	"lcName":"virtu-empowerreactionssfn - syncemployeesshttptrigger",
	"modifiedTime":1761646831651,
	"name":"virtu-emPowerReactionsSFN - SyncEmployeessHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_XonOy-1",
			"id":"n_eJ0LW",
			"index":1,
			"inputs":{
				"request":{
					"queryParams":{
						"type":"object",
						"additionalProperties":false,
						"required":[],
						"properties":{
							"code":{
								"type":"string",
								"title":"Code"
							}
						}
					},
					"contentType":"application/json",
					"body":{
						"type":"object",
						"properties":{
							"Email":{
								"type":"string",
								"title":"Email"
							},
							"EmployeeNumber":{
								"type":"string",
								"title":"EmployeeNumber"
							},
							"FullName":{
								"type":"string",
								"title":"FullName"
							},
							"ManagerEmployeeNumber":{
								"type":"string",
								"title":"ManagerEmployeeNumber"
							},
							"Status":{
								"type":"string",
								"title":"Status"
							},
							"UserName":{
								"type":"string",
								"title":"UserName"
							}
						},
						"additionalProperties":false
					}
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"message":{
									"type":"string",
									"title":"message"
								}
							},
							"additionalProperties":false
						},
						"namespaces":[]
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":35,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_XonOy-1",
			"id":"n_nMUz0",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"result":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"Email":{
							"type":"string",
							"title":"Email"
						},
						"EmployeeNumber":{
							"type":"string",
							"title":"EmployeeNumber"
						},
						"FullName":{
							"type":"string",
							"title":"FullName"
						},
						"ManagerEmployeeNumber":{
							"type":"string",
							"title":"ManagerEmployeeNumber"
						},
						"Status":{
							"type":"string",
							"title":"Status"
						},
						"UserName":{
							"type":"string",
							"title":"UserName"
						}
					}
				},
				"code":"using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Threading.Tasks;\nusing System.Web.Http;\nusing Microsoft.Azure.Functions.Extensions.DependencyInjection;\nusing Microsoft.Extensions.DependencyInjection;\n\n[assembly: FunctionsStartup(typeof(ReactionScheduler.Startup))]\n\nnamespace ReactionScheduler\n{\n    // ==================== STARTUP CONFIGURATION ====================\n    public class Startup : FunctionsStartup\n    {\n        public override void Configure(IFunctionsHostBuilder builder)\n        {\n            // Register services\n            builder.Services.AddScoped<ApplicationCore.Interfaces.IEmployeeService, ApplicationCore.Services.EmployeeService>();\n            builder.Services.AddScoped(typeof(IAsyncRepository<>), typeof(EfRepository<>));\n            \n            // Register DbContext - UPDATE CONNECTION STRING HERE\n            builder.Services.AddDbContext<ReactionSchedulerDbContext>(options =>\n                options.UseSqlServer(Environment.GetEnvironmentVariable(\"ConnectionStrings:DefaultConnection\")));\n        }\n    }\n\n    // ==================== BASE ENTITY ====================\n    public class BaseEntity\n    {\n        public DateTime CreatedDate { get; set; }\n        public DateTime? ModifiedDate { get; set; }\n    }\n\n    // ==================== SPECIFICATION PATTERN ====================\n    public interface ISpecification<T>\n    {\n        Expression<Func<T, bool>> Criteria { get; }\n        List<Expression<Func<T, object>>> Includes { get; }\n        List<string> IncludeStrings { get; }\n    }\n\n    public abstract class BaseSpecification<T> : ISpecification<T>\n    {\n        public Expression<Func<T, bool>> Criteria { get; }\n        public List<Expression<Func<T, object>>> Includes { get; } = new List<Expression<Func<T, object>>>();\n        public List<string> IncludeStrings { get; } = new List<string>();\n\n        protected BaseSpecification(Expression<Func<T, bool>> criteria)\n        {\n            Criteria = criteria;\n        }\n\n        protected virtual void AddInclude(Expression<Func<T, object>> includeExpression)\n        {\n            Includes.Add(includeExpression);\n        }\n\n        protected virtual void AddInclude(string includeString)\n        {\n            IncludeStrings.Add(includeString);\n        }\n    }\n\n    // ==================== REPOSITORY PATTERN ====================\n    public interface IAsyncRepository<T> where T : BaseEntity\n    {\n        Task<T> GetByIdAsync(long id);\n        Task<List<T>> ListAllAsync();\n        Task<List<T>> ListAsync(ISpecification<T> spec);\n        Task<T> AddAsync(T entity);\n        Task UpdateAsync(T entity);\n        Task DeleteAsync(T entity);\n        Task<int> CountAsync(ISpecification<T> spec);\n        Task<T> FirstOrDefaultAsync(ISpecification<T> spec);\n    }\n\n    public class EfRepository<T> : IAsyncRepository<T> where T : BaseEntity\n    {\n        protected readonly ReactionSchedulerDbContext _dbContext;\n\n        public EfRepository(ReactionSchedulerDbContext dbContext)\n        {\n            _dbContext = dbContext;\n        }\n\n        public virtual async Task<T> GetByIdAsync(long id)\n        {\n            return await _dbContext.Set<T>().FindAsync(id);\n        }\n\n        public async Task<List<T>> ListAllAsync()\n        {\n            return await _dbContext.Set<T>().ToListAsync();\n        }\n\n        public async Task<List<T>> ListAsync(ISpecification<T> spec)\n        {\n            return await ApplySpecification(spec).ToListAsync();\n        }\n\n        public async Task<T> AddAsync(T entity)\n        {\n            entity.CreatedDate = DateTime.UtcNow;\n            await _dbContext.Set<T>().AddAsync(entity);\n            await _dbContext.SaveChangesAsync();\n            return entity;\n        }\n\n        public async Task UpdateAsync(T entity)\n        {\n            entity.ModifiedDate = DateTime.UtcNow;\n            _dbContext.Entry(entity).State = EntityState.Modified;\n            await _dbContext.SaveChangesAsync();\n        }\n\n        public async Task DeleteAsync(T entity)\n        {\n            _dbContext.Set<T>().Remove(entity);\n            await _dbContext.SaveChangesAsync();\n        }\n\n        public async Task<int> CountAsync(ISpecification<T> spec)\n        {\n            return await ApplySpecification(spec).CountAsync();\n        }\n\n        public async Task<T> FirstOrDefaultAsync(ISpecification<T> spec)\n        {\n            return await ApplySpecification(spec).FirstOrDefaultAsync();\n        }\n\n        private IQueryable<T> ApplySpecification(ISpecification<T> spec)\n        {\n            return SpecificationEvaluator<T>.GetQuery(_dbContext.Set<T>().AsQueryable(), spec);\n        }\n    }\n\n    public class SpecificationEvaluator<T> where T : BaseEntity\n    {\n        public static IQueryable<T> GetQuery(IQueryable<T> inputQuery, ISpecification<T> specification)\n        {\n            var query = inputQuery;\n\n            if (specification.Criteria != null)\n            {\n                query = query.Where(specification.Criteria);\n            }\n\n            query = specification.Includes.Aggregate(query, (current, include) => current.Include(include));\n            query = specification.IncludeStrings.Aggregate(query, (current, include) => current.Include(include));\n\n            return query;\n        }\n    }\n\n    // ==================== DATABASE CONTEXT ====================\n    public class ReactionSchedulerDbContext : DbContext\n    {\n        public ReactionSchedulerDbContext(DbContextOptions<ReactionSchedulerDbContext> options) : base(options)\n        {\n        }\n\n        public DbSet<ApplicationCore.Entities.Employee> Employees { get; set; }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            modelBuilder.Entity<ApplicationCore.Entities.Employee>(entity =>\n            {\n                entity.HasKey(e => e.EmployeeId);\n                entity.Property(e => e.EmployeeNumber).IsRequired().HasMaxLength(50);\n                entity.Property(e => e.UserName).HasMaxLength(100);\n                entity.Property(e => e.Email).HasMaxLength(100);\n                entity.Property(e => e.FullName).HasMaxLength(200);\n                entity.Property(e => e.Status).HasMaxLength(50);\n                \n                entity.HasOne(e => e.Manager)\n                    .WithMany()\n                    .HasForeignKey(e => e.ManagerId)\n                    .OnDelete(DeleteBehavior.Restrict);\n            });\n        }\n    }\n\n    // ==================== SPECIFICATIONS ====================\n    public class EmployeeByEmployeeNumberSpecification : BaseSpecification<ApplicationCore.Entities.Employee>\n    {\n        public EmployeeByEmployeeNumberSpecification(string employeeNumber)\n            : base(e => e.EmployeeNumber == employeeNumber)\n        {\n        }\n    }\n\n    public class ReporteesByEmployeeIdSpecification : BaseSpecification<ApplicationCore.Entities.Employee>\n    {\n        public ReporteesByEmployeeIdSpecification(long employeeId)\n            : base(e => e.ManagerId == employeeId)\n        {\n        }\n    }\n\n    // ==================== ORIGINAL CODE (UNMODIFIED) ====================\n    /// <summary>\n    /// SyncEmployeesHttpTrigger\n    /// </summary>\n    public class SyncEmployeesHttpTrigger\n    {\n        private readonly ApplicationCore.Interfaces.IEmployeeService _employeeService;\n\n        public SyncEmployeesHttpTrigger(ApplicationCore.Interfaces.IEmployeeService employeeService)\n        {\n            _employeeService = employeeService;\n        }\n\n        [FunctionName(\"SyncEmployeesHttpTrigger\")]\n        public async Task<IActionResult> Run(\n            [HttpTrigger(AuthorizationLevel.Function, \"post\", Route = null)] HttpRequest req,\n            ILogger log)\n        {\n            log.LogInformation(\"C# HTTP trigger function processed a request.\");\n\n            string requestBody;\n            using (var reader = new StreamReader(req.Body))\n            {\n                requestBody = await reader.ReadToEndAsync().ConfigureAwait(false);\n            }\n\n            IEnumerable<ApplicationCore.Entities.Employee>? employees = null; // Make it nullable\n            try\n            {\n                employees = JsonConvert.DeserializeObject<IEnumerable<ApplicationCore.Entities.Employee>>(requestBody);\n            }\n            catch (JsonException e)\n            {\n                log.LogError(e, \"Error occurred while deserializing the request body.\");\n                return new BadRequestObjectResult(\"Invalid JSON format in request body.\");\n            }\n\n            // Check if deserialization was successful\n            if (employees == null)\n            {\n                return new BadRequestObjectResult(\"Invalid JSON or could not deserialize employees.\");\n            }\n\n            if (!employees.Any())\n            {\n                return new BadRequestObjectResult(\"Please pass valid employees to sync\");\n            }\n\n            var failedRecords = new List<string>();\n\n            foreach (var employee in employees)\n            {\n                try\n                {\n                    if (string.IsNullOrEmpty(employee.EmployeeNumber))\n                    {\n                        log.LogError(\"Invalid Employee Number\");\n                        failedRecords.Add(employee.EmployeeNumber);\n                        continue;\n                    }\n\n                    if (string.IsNullOrEmpty(employee.Status))\n                    {\n                        log.LogError(\"Employee Status is empty\");\n                        failedRecords.Add(employee.EmployeeNumber);\n                    }\n                    else\n                    {\n                        if (employee.Status == \"Cancelled\")\n                        {\n                            await _employeeService.DeleteAsync(employee.EmployeeNumber);\n                        }\n                        else\n                        {\n                            await _employeeService.AddOrUpdateAsync(new ApplicationCore.Entities.Employee\n                            {\n                                UserName = employee.UserName,\n                                Email = employee.Email,\n                                FullName = employee.FullName,\n                                ManagerEmployeeNumber = employee.ManagerEmployeeNumber,\n                                EmployeeNumber = employee.EmployeeNumber,\n                                IsActive = employee.Status == \"Active\"\n                            });\n                        }\n                    }\n                }\n                catch (ArgumentNullException e)\n                {\n                    log.LogError(e, $\"ArgumentNullException: Invalid user detail - {e.ParamName}\");\n                    failedRecords.Add(employee.EmployeeNumber);\n                }\n                catch (ArgumentException e)\n                {\n                    log.LogError(e, $\"ArgumentException: Invalid argument - {e.Message}\");\n                    failedRecords.Add(employee.EmployeeNumber);\n                }\n                catch (InvalidOperationException e)\n                {\n                    log.LogError(e, $\"InvalidOperationException: Invalid operation - {e.Message}\");\n                    failedRecords.Add(employee.EmployeeNumber);\n                }\n                /// Removed due to code scanning alert\n                // catch (Exception e)\n                // {\n                //     log.LogError(e, $\"Unexpected error occurred - {e.Message}\");\n                //     failedRecords.Add(employee.EmployeeNumber);\n                // }\n            }\n\n            var successCount = employees.Count() - failedRecords.Count;\n            if (successCount == 0)\n            {\n                return new InternalServerErrorResult();\n            }\n\n            return new OkObjectResult(new\n            {\n                message = $\"Successfully processed for {successCount} employees\",\n                failed = failedRecords\n            });\n        }\n    }\n}\n\n// ==================== APPLICATION CORE - ENTITIES ====================\nnamespace ReactionScheduler.ApplicationCore.Entities\n{\n    public class Employee : ReactionScheduler.BaseEntity\n    {\n        public long EmployeeId { get; set; }\n        public string UserName { get; set; }\n        public string EmployeeNumber { get; set; }\n        public string Email { get; set; }\n        public string FullName { get; set; }\n        public bool IsActive { get; set; }\n        public string Status { get; set; }\n        public Employee Manager { get; set; }\n        public long? ManagerId { get; set; }\n        public string ManagerEmployeeNumber { get; set; }\n    }\n}\n\n// ==================== APPLICATION CORE - INTERFACES ====================\nnamespace ReactionScheduler.ApplicationCore.Interfaces\n{\n    using System.Threading.Tasks;\n    using Entities;\n\n    /// <summary>\n    /// IEmployeeService\n    /// </summary>\n    public interface IEmployeeService\n    {\n        Task AddOrUpdateAsync(Employee employee);\n        Task DeleteAsync(string userName);\n    }\n}\n\n// ==================== APPLICATION CORE - SERVICES ====================\nnamespace ReactionScheduler.ApplicationCore.Services\n{\n    using ReactionScheduler.ApplicationCore.Entities;\n    using ReactionScheduler.ApplicationCore.Interfaces;\n    using System;\n    using System.Threading.Tasks;\n\n    public class EmployeeService : IEmployeeService\n    {\n        private readonly ReactionScheduler.IAsyncRepository<Employee> _employeeRepository;\n        private const string DomainName = \"virtusa.com\";\n        public EmployeeService(ReactionScheduler.IAsyncRepository<Employee> employeeRepository)\n        {\n            _employeeRepository = employeeRepository;\n        }\n\n        /// <summary>\n        ///   <para>Add new employee and update existing employee</para>\n        ///   <para>This will not add inactive employees and this will not update details of the inactive employees</para>\n        ///   <para>Additinaly add manager when not exist</para>\n        /// </summary>\n        /// <param name=\"employee\">The employee.</param>\n        public async Task AddOrUpdateAsync(Employee employee)\n        {\n            // should not process when employee number is empty\n            ValidateEmployeeNumber(employee.EmployeeNumber);\n\n            if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n            {\n                // provided manager should exist prior to add or update employee\n                await ProcessManagerAsync(employee.ManagerEmployeeNumber);\n            }\n\n            //adding manager id to the employee object\n            await AddManagerIdAsync(employee);\n\n            // adding employee when employee not exist, updating employee if exist\n            await ProcessEmployeeAsync(employee);\n        }\n\n        /// <summary>\n        /// Add manager id to the employee\n        /// </summary>\n        /// <param name=\"employee\">employee</param>\n        /// <returns></returns>\n        private async Task AddManagerIdAsync(Employee employee)\n        {\n            if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n            {\n                var manager = await GetEmployeeAsync(employee.ManagerEmployeeNumber).ConfigureAwait(false);\n                employee.ManagerId = manager?.EmployeeId;\n            }\n        }\n        /// <summary>Delete employee when exist</summary>\n        /// <param name=\"employeeNumber\">Name of the user.</param>\n        /// <returns>\n        ///   <br />\n        /// </returns>\n        public async Task DeleteAsync(string employeeNumber)\n        {\n\n            // should not process when employee is empty\n            ValidateEmployeeNumber(employeeNumber);\n\n            var isExistingEmployee = await IsExistingEmployee(employeeNumber);\n\n            if (isExistingEmployee)\n            {\n                var existingEmployee = await GetEmployeeAsync(employeeNumber);\n                var reporteesSpecification = new ReactionScheduler.ReporteesByEmployeeIdSpecification(existingEmployee.EmployeeId);\n                var reportees = await _employeeRepository.ListAsync(reporteesSpecification).ConfigureAwait(false);\n\n                foreach (var reportee in reportees)\n                {\n                    reportee.ManagerId = null;\n                    await _employeeRepository.UpdateAsync(reportee).ConfigureAwait(false);\n                }\n\n                await _employeeRepository.DeleteAsync(existingEmployee).ConfigureAwait(false);\n            }\n        }\n\n        /// <summary>\n        /// Used to check manager is exist or not to do add or update operations\n        /// </summary>\n        /// <param name=\"managerEmployeeNumber\"></param>\n        /// <returns></returns>\n        private async Task ProcessManagerAsync(string managerEmployeeNumber)\n        {\n            // check whether manager is already exist\n            bool isExistingEmployee = await IsExistingEmployee(managerEmployeeNumber);\n            if (!isExistingEmployee)\n            {\n                // if manager not exist, add manager as inactive user with username\n                var manager = new Employee\n                {\n                    UserName = managerEmployeeNumber,\n                    EmployeeNumber = managerEmployeeNumber,\n                    IsActive = false\n                };\n\n                // format user with the username\n                await AddEmployeeAsync(manager).ConfigureAwait(false);\n            }\n        }\n\n        /// <summary>\n        /// Used to check employee is exist or not to do add or update operations\n        /// </summary>\n        /// <param name=\"employee\"></param>\n        /// <returns></returns>\n        private async Task ProcessEmployeeAsync(Employee employee)\n        {\n            // check whether user is already exist\n            bool isExistingEmployee = await IsExistingEmployee(employee.EmployeeNumber);\n            if (!isExistingEmployee)\n            {\n                await AddEmployeeAsync(employee).ConfigureAwait(false);\n            }\n            else\n            {\n                // get existing employee\n                var existingEmployee = await GetEmployeeAsync(employee.EmployeeNumber).ConfigureAwait(false);\n\n                // update details of the active employee\n                if (employee.IsActive)\n                {\n                    FormatEmployee(employee);\n                    existingEmployee.FullName = employee.FullName;\n                    existingEmployee.Email = employee.Email;\n                    existingEmployee.UserName = employee.UserName;\n                    existingEmployee.ManagerId = employee.ManagerId;\n                    existingEmployee.IsActive = employee.IsActive;\n                }\n                else\n                {\n                    existingEmployee.Email = employee.Email;\n                    existingEmployee.UserName = employee.UserName;\n                    existingEmployee.IsActive = employee.IsActive;\n                }\n\n                await _employeeRepository.UpdateAsync(existingEmployee).ConfigureAwait(false);\n            }\n        }\n\n        /// <summary>\n        /// To add employee or manager data to db\n        /// </summary>\n        /// <param name=\"employee\"></param>\n        /// <returns></returns>\n        private async Task AddEmployeeAsync(Employee employee)\n        {\n            FormatEmployee(employee);\n            await _employeeRepository.AddAsync(employee).ConfigureAwait(false);\n        }\n\n\n        /// <summary>Format missing information of the user.</summary>\n        /// <param name=\"employee\">The employee.</param>\n        private void FormatEmployee(Employee employee)\n        {\n            employee.FullName = string.IsNullOrEmpty(employee.FullName) ? employee.EmployeeNumber : employee.FullName;\n            employee.Email = string.IsNullOrEmpty(employee.Email) ? $\"{employee.EmployeeNumber}@{DomainName}\" : employee.Email;\n        }\n\n        private async Task<Employee> GetEmployeeAsync(string employeeNumber)\n        {\n            var specification = new ReactionScheduler.EmployeeByEmployeeNumberSpecification(employeeNumber);\n            return await _employeeRepository.FirstOrDefaultAsync(specification).ConfigureAwait(false);\n        }\n\n        /// <summary>Validate employee number of the user to check whether it is a null or empty value.</summary>\n        /// <param name=\"employeeNumber\">UserName of the user.</param>\n        /// <exception cref=\"ArgumentException\">UserName</exception>\n        private void ValidateEmployeeNumber(string employeeNumber)\n        {\n            if (string.IsNullOrEmpty(employeeNumber))\n            {\n                throw new ArgumentException(\"Value cannot be null or empty\", nameof(Employee.EmployeeNumber));\n            }\n        }\n\n        /// <summary>\n        /// TO check whether employee is already exist in the db\n        /// </summary>\n        /// <param name=\"employeeNumber\"></param>\n        /// <returns></returns>\n        private async Task<bool> IsExistingEmployee(string employeeNumber)\n        {\n            var specification = new ReactionScheduler.EmployeeByEmployeeNumberSpecification(employeeNumber);\n            int employeeCount = await _employeeRepository.CountAsync(specification).ConfigureAwait(false);\n            return employeeCount == 1;\n        }\n    }\n}",
				"isAsync":false,
				"parameters":{
					"Email":"{{ n_eJ0LW.outputs.body.Email }}",
					"EmployeeNumber":"{{ n_eJ0LW.outputs.body.EmployeeNumber }}",
					"FullName":"{{ n_eJ0LW.outputs.body.FullName }}",
					"ManagerEmployeeNumber":"{{ n_eJ0LW.outputs.body.ManagerEmployeeNumber }}",
					"Status":"{{ n_eJ0LW.outputs.body.Status }}",
					"UserName":"{{ n_eJ0LW.outputs.body.UserName }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":916,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_XonOy-1",
			"id":"n_zPwE7",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"body":{
					"message":"Successfully processed for {{ n_eJ0LW.outputs.body.EmployeeNumber }} employee"
				},
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":186875,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":3
}