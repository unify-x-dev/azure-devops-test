{
	"appsUsed":[
		
	],
	"createdTime":1761647466740,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761991256437,
		"deployedBy":46209,
		"deployedDefinitionId":"6905da53fd20297e4288fd75",
		"status":"DEPLOYED",
		"version":6,
		"workflowVersion":33
	},
	"edges":[
		{
			"fromNodeId":"n_egBvc",
			"priority":0,
			"skip":false,
			"toNodeId":"n_bUXST",
			"type":"next"
		}
	],
	"id":"69009b6ac85d6a3a6dc321dc",
	"lastModifiedBy":46209,
	"lcName":"[vplus-notificationsender-f]processmailnotificationstimertrigger",
	"modifiedTime":1761992067428,
	"name":"[vplus-notificationsender-f]ProcessMailNotificationsTimerTrigger",
	"nodes":[
		{
			"context":{
				"appName":"schedule",
				"resourceVersion":836,
				"resourceName":"schedule_default"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_uhddo-1",
			"id":"n_egBvc",
			"index":1,
			"inputs":{
				"cron":"INTERVAL",
				"sequential":false,
				"timezone":"Asia/Calcutta",
				"interval":15,
				"frequency":"DAYS"
			},
			"skip":false,
			"subTitle":"Schedule",
			"title":"New recurring event",
			"trigger":{
				"type":"SCHEDULED"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_uhddo-1",
			"id":"n_bUXST",
			"index":2,
			"inputs":{
				"code":"#r \"nuget: Microsoft.Identity.Client\"\n#r \"nuget: Microsoft.IdentityModel.Abstractions\"\n#r \"nuget: Microsoft.Bcl.AsyncInterfaces\"\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\nusing Microsoft.Identity.Client;\n\npublic class BaseEntity\n{\n  public int Id { get; set; }\n}\npublic enum NotificationImportance\n{\n  High = 1,\n  Normal = 2,\n  Low = 3\n}\n\npublic enum NotificationStatus\n{\n  Pending = 1,\n  Sent = 2,\n  Fail = 3,\n  Delivered = 4\n}\n\npublic enum RecipientTypes\n{\n  None = 0,\n  To = 1,\n  Cc = 2,\n  Bcc = 3\n}\n\npublic class MailRecipient : BaseEntity\n{\n  public RecipientTypes RecipientTypes { get; set; }\n  public NotificationStatus Status { get; set; }\n  public string Email { get; set; }\n  public int NotificationId { get; set; }\n  public MailNotification Notification { get; set; }\n}\n\npublic class MailNotification : BaseEntity\n{\n  public string Subject { get; set; }\n  public string MessageBody { get; set; }\n  public NotificationImportance Importance { get; set; }\n  public DateTime CreatedDate { get; set; }\n  public ICollection<MailRecipient> Recipients { get; set; }\n  public string FromEmail { get; set; }\n}\n\npublic interface ISpecification<T>\n{\n    Expression<Func<T, bool>> Criteria { get; }\n    List<Expression<Func<T, object>>> Includes { get; }\n    //List<string> IncludeStrings { get; }\n    Expression<Func<T, object>> OrderBy { get; }\n    //Expression<Func<T, object>> OrderByDescending { get; }\n    //Expression<Func<T, object>> GroupBy { get; }\n\n    int Take { get; }\n    int Skip { get; }\n    bool IsPagingEnabled { get; }\n}\n\npublic abstract class BaseSpecification<T> : ISpecification<T>\n{\n    protected BaseSpecification(Expression<Func<T, bool>> criteria)\n    {\n        Criteria = criteria;\n    }\n    public Expression<Func<T, bool>> Criteria { get; }\n    public List<Expression<Func<T, object>>> Includes { get; } = new List<Expression<Func<T, object>>>();\n    //public List<string> IncludeStrings { get; } = new List<string>();\n    public Expression<Func<T, object>> OrderBy { get; private set; }\n    //public Expression<Func<T, object>> OrderByDescending { get; private set; }\n    //public Expression<Func<T, object>> GroupBy { get; private set; }\n\n    public int Take { get; private set; }\n    public int Skip { get; private set; }\n    public bool IsPagingEnabled { get; private set; } = false;\n\n    protected virtual void AddInclude(Expression<Func<T, object>> includeExpression)\n    {\n        Includes.Add(includeExpression);\n    }\n    //protected virtual void AddInclude(string includeString)\n    //{\n    //    IncludeStrings.Add(includeString);\n    //}\n    protected virtual void ApplyPaging(int skip, int take)\n    {\n        Skip = skip;\n        Take = take;\n        IsPagingEnabled = true;\n    }\n    protected virtual void ApplyOrderBy(Expression<Func<T, object>> orderByExpression)\n    {\n        OrderBy = orderByExpression;\n    }\n    //protected virtual void ApplyOrderByDescending(Expression<Func<T, object>> orderByDescendingExpression)\n    //{\n    //    OrderByDescending = orderByDescendingExpression;\n    //}\n\n    //protected virtual void ApplyGroupBy(Expression<Func<T, object>> groupByExpression)\n    //{\n    //    GroupBy = groupByExpression;\n    //}\n\n}\n\npublic class MailNotificationByStatusSpecification : BaseSpecification<MailNotification>\n{\n  public MailNotificationByStatusSpecification(int take)\n         : base(x => x.Recipients.Any(e => e.Status == NotificationStatus.Pending))\n  {\n    ApplyPaging(0, take);\n    ApplyOrderBy(n => n.CreatedDate);\n    AddInclude(n => n.Recipients);\n  }\n}\n\nprivate static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n{\n    PropertyNameCaseInsensitive = true\n    // Consider adding other options like handling null values if needed\n    // DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull\n};\n\nprivate static readonly HttpClient httpClient = new HttpClient();\nprivate const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/mailNotification\";\nprivate const string DomainName = \"virtusa.com\";\n\n// --- DB Interaction Method ---\nprivate async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n{\n    var requestBody = new\n    {\n        payload = payload,\n        operationName = operationName\n    };\n\n    string jsonRequestBody = \"{}\"; // Default to empty object\n    try\n    {\n        jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n    }\n    catch (JsonException e)\n    {\n        Console.WriteLine($\"JSON Serialization Error (Request - {operationName}): {e.Message} | Payload: {payload}\");\n        throw; // Re-throw serialization errors immediately\n    }\n\n    var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n    try\n    {\n        // Console.WriteLine($\"DEBUG: Sending {operationName} with payload: {jsonRequestBody}\"); // Optional debug log\n        HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n        string responseContent = await response.Content.ReadAsStringAsync();\n        // Console.WriteLine($\"DEBUG: Received status {response.StatusCode}, content: {responseContent}\"); // Optional debug log\n\n        // Check for non-success status codes specifically\n        if (!response.IsSuccessStatusCode)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n            // Consider how to handle specific non-success codes (e.g., 404 Not Found might return default)\n            // For now, throw an exception for any non-success to indicate failure clearly.\n            response.EnsureSuccessStatusCode(); // This will throw HttpRequestException\n        }\n\n\n        if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") // Treat empty JSON object as null/default\n        {\n            return default;\n        }\n\n        try\n        {\n            using (JsonDocument document = JsonDocument.Parse(responseContent))\n            {\n                JsonElement root = document.RootElement;\n                if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement) || root.TryGetProperty(\"response\", out resultElement)))\n                {\n                    if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                    // Check if the target type is primitive (like int, bool, long) and the JSON element reflects that\n                    if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                    {\n                       // Attempt direct deserialization for primitives/string from the element\n                       try {\n                          return resultElement.Deserialize<TResponse>(jsonOptions);\n                           } catch (JsonException innerEx) {\n                              Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                              return default;\n                           }\n                    }\n                    else // Assume complex object\n                    {\n                        return resultElement.Deserialize<TResponse>(jsonOptions);\n                    }\n                 }\n                 else if (root.ValueKind != JsonValueKind.Null)\n                 {\n                    // Check for primitives at the root as well\n                    if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                    {\n                        try {\n                          return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                        } catch (JsonException innerEx) {\n                          Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                          return default;\n                        }\n                    }\n                    else\n                    {\n                        return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                    }\n                 }\n                 else\n                 {\n                    return default;\n                 }\n            }\n      }\n      catch (JsonException jsonEx)\n      {\n          Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n          return default; // Return default on deserialization failure\n      }\n  }\n  catch (HttpRequestException e)\n  {\n      Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n      // Depending on the operation, maybe return default or false instead of throwing\n      // For now, re-throwing signals a clear failure.\n      throw;\n  }\n  // Removed redundant JsonException catch here, handled in request serialization try-catch\n  catch (Exception e) // Catch unexpected errors\n  {\n      Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n      throw;\n  }\n}\n\nprivate string FormatMessage(MailNotification notification)\n{\n  return JsonSerializer.Serialize(new\n  {\n      message = new\n      {\n          body = new\n          {\n              contentType = \"HTML\",\n              content = notification.MessageBody\n          },\n          toRecipients = notification.Recipients\n          .Where(n => n.RecipientTypes == RecipientTypes.To)\n          .Select(n => new\n          {\n              EmailAddress = new\n              {\n                  Address = n.Email\n              }\n          }),\n          ccRecipients = notification.Recipients\n          .Where(n => n.RecipientTypes == RecipientTypes.Cc)\n          .Select(n => new\n          {\n              EmailAddress = new\n              {\n                  Address = n.Email\n              }\n          }),\n          bccRecipients = notification.Recipients\n          .Where(n => n.RecipientTypes == RecipientTypes.Bcc)\n          .Select(n => new\n          {\n              EmailAddress = new\n              {\n                  Address = n.Email\n              }\n          }),\n          subject = notification.Subject,\n          importance = notification.Importance.ToString()\n      }\n  });\n}\n\npublic async Task<string> GetGraphApiAccessToken()\n{\n    string authority = \"https://login.microsoftonline.com/001c9923-a86c-4ce3-8fe2-e7153b70be85\";\n    string clientId =  \"6d86ccc3-23a6-401e-9c4a-82c386548772\";\n    string clientSecret = \"cwO8Q~kjmcmJCtIE.MdbfakDj7RSG6V1QKWjRagG\";\n    try\n    {\n        IConfidentialClientApplication clientApplication = ConfidentialClientApplicationBuilder.Create(clientId)\n            .WithClientSecret(clientSecret)\n            .WithAuthority(new Uri(authority))\n            .Build();\n\n        string[] scopes = new string[] { \"https://graph.microsoft.com/.default\" };\n        AuthenticationResult result = await clientApplication.AcquireTokenForClient(scopes)\n              .ExecuteAsync();\n        return result?.AccessToken;\n    }\n    catch (Exception ex)\n    {\n        //_appLogger.LogError($\"An error occured on Acquire Token {ex.Message}\");\n        Console.WriteLine($\"An error occured on Acquire Token {ex.Message}\");\n        throw;\n    }\n}\n\nprivate async Task Send(MailNotification mailNotification)\n{\n  string sendFrom ;\n  if (mailNotification.FromEmail != null)\n  {\n    sendFrom = mailNotification.FromEmail;\n  }\n  else\n  {\n    sendFrom = \"integrations@unifyapps.com\";\n  }\n  string accessToken = await GetGraphApiAccessToken();\n  const string mediaType = \"application/json\";\n  const string Bearer = \"Bearer\";\n\n  try\n  {\n    using (HttpClient httpClient = new HttpClient())\n    {\n      httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(Bearer, accessToken);\n      HttpContent content = new StringContent(FormatMessage(mailNotification),\n                  Encoding.UTF8,\n                  mediaType);\n\n      var response = await httpClient\n                    .PostAsync($\"https://graph.microsoft.com/v1.0/users/{sendFrom}/sendMail\", content);\n      response.EnsureSuccessStatusCode();\n    }\n  }\n  catch (HttpRequestException ex)\n  {\n    //_appLogger.LogError($\"SendNotificationsTimerTrigger, An error occured on Post request {ex.Message}\");\n    Console.WriteLine($\"SendNotificationsTimerTrigger, An error occured on Post request {ex.Message}\");\n    throw;\n  }\n}\n\npublic async Task ProcessSavedNotifications()\n{\n  string numberOfmails = \"2\";\n  int pageSize = int.Parse(numberOfmails);\n  //MailNotificationByStatusSpecification specification = new MailNotificationByStatusSpecification(pageSize);\n  // API call\n  //var notifications = await _notificationRepository.ListAsync(specification);\n  var queryPayload = new Dictionary<string, object>\n  {\n    { \"Filter\", new Dictionary<string, object> \n        { \n            { \"RecipientStatus\", (int)NotificationStatus.Pending } \n        } \n    },\n    { \"Take\", pageSize },\n    { \"Skip\", 0 },\n    { \"OrderBy\", \"CreatedDate\" },\n    { \"Include\", new[] { \"Recipients\" } }\n  };\n\n  List<MailNotification>? notifications = await CallDb<List<MailNotification>>(\"ListAsync\", queryPayload);\n\n  if (notifications != null && notifications.Any())\n  {\n      foreach (var notification in notifications)\n      {\n        try\n        {\n          await Send(notification);\n          notification.Recipients.ToList().ForEach(x => x.Status = NotificationStatus.Sent);\n          // API call\n          //await _notificationRepository.UpdateAsync(notification);\n          await CallDb<object>(\"UpdateAsync\", notification);\n        }\n        catch (Exception ex)\n        {\n          notification.Recipients.ToList()\n                     .ForEach(x => x.Status = NotificationStatus.Fail);\n          // API call\n          //await _notificationRepository.UpdateAsync(notification); \n          await CallDb<object>(\"UpdateAsync\", notification);\n          //_appLogger.LogError($\"SendNotificationsTimerTrigger, an error occured at {DateTime.Now}. Error :  {ex.Message}\");\n          Console.WriteLine($\"SendNotificationsTimerTrigger, an error occured at {DateTime.Now}. Error :  {ex.Message}\");\n        }\n      }\n  }\n}\n\nasync Task<IDictionary<string, object>> mainFunction() {\n   try\n   {\n      var executionStartTime = DateTime.Now;\n\n      await ProcessSavedNotifications();\n\n      var executionEndTime = DateTime.Now;\n\n      return new Dictionary<string, object>\n      {\n          { \"statusCode\", 200 },\n          { \"body\", new\n              {\n                  message = \"Successfully completed\",\n                  executionStartTime = executionStartTime,\n                  executionEndTime = executionEndTime\n              }\n          }\n      };\n   }\n   catch (Exception ex)\n   {\n      return new Dictionary<string, object>\n      {\n        { \"statusCode\", 500 },\n        { \"body\", $\"Error while Processing the MailNotifications:  {ex.Message}\" }\n      };\n   }\n}\n\nvar resultObject = await mainFunction();\nresultObject\n",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		}
	],
	"ownerUserId":46209,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":34
}