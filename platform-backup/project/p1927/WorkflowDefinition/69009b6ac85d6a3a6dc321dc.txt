{
	"appsUsed":[
		
	],
	"createdTime":1761647466740,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_Jqpot",
			"priority":0,
			"skip":false,
			"toNodeId":"n_bUXST",
			"type":"next"
		},
		{
			"fromNodeId":"n_bUXST",
			"priority":0,
			"skip":false,
			"toNodeId":"n_NA9Lt",
			"type":"next"
		}
	],
	"id":"69009b6ac85d6a3a6dc321dc",
	"lastModifiedBy":46209,
	"lcName":"[azure-function]processmailnotificationstimertrigger",
	"modifiedTime":1761676615763,
	"name":"[Azure-function]ProcessMailNotificationsTimerTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_uhddo-1",
			"id":"n_Jqpot",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_uhddo-1",
			"id":"n_bUXST",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing Newtonsoft.Json;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Linq.Expressions;\n\npublic class BaseEntity\n{\n  public int Id { get; set; }\n}\npublic enum NotificationImportance\n{\n  High = 1,\n  Normal = 2,\n  Low = 3\n}\n\npublic enum NotificationStatus\n{\n  Pending = 1,\n  Sent = 2,\n  Fail = 3,\n  Delivered = 4\n}\n\npublic enum RecipientTypes\n{\n  None = 0,\n  To = 1,\n  Cc = 2,\n  Bcc = 3\n}\n\npublic class MailRecipient : BaseEntity\n{\n  public RecipientTypes RecipientTypes { get; set; }\n  public NotificationStatus Status { get; set; }\n  public string Email { get; set; }\n  public int NotificationId { get; set; }\n  public MailNotification Notification { get; set; }\n}\n\npublic class MailNotification : BaseEntity\n{\n  public string Subject { get; set; }\n  public string MessageBody { get; set; }\n  public NotificationImportance Importance { get; set; }\n  public DateTime CreatedDate { get; set; }\n  public ICollection<MailRecipient> Recipients { get; set; }\n  public string FromEmail { get; set; }\n}\n\npublic interface ISpecification<T>\n{\n    Expression<Func<T, bool>> Criteria { get; }\n    List<Expression<Func<T, object>>> Includes { get; }\n    //List<string> IncludeStrings { get; }\n    Expression<Func<T, object>> OrderBy { get; }\n    //Expression<Func<T, object>> OrderByDescending { get; }\n    //Expression<Func<T, object>> GroupBy { get; }\n\n    int Take { get; }\n    int Skip { get; }\n    bool IsPagingEnabled { get; }\n}\n\npublic abstract class BaseSpecification<T> : ISpecification<T>\n{\n    protected BaseSpecification(Expression<Func<T, bool>> criteria)\n    {\n        Criteria = criteria;\n    }\n    public Expression<Func<T, bool>> Criteria { get; }\n    public List<Expression<Func<T, object>>> Includes { get; } = new List<Expression<Func<T, object>>>();\n    //public List<string> IncludeStrings { get; } = new List<string>();\n    public Expression<Func<T, object>> OrderBy { get; private set; }\n    //public Expression<Func<T, object>> OrderByDescending { get; private set; }\n    //public Expression<Func<T, object>> GroupBy { get; private set; }\n\n    public int Take { get; private set; }\n    public int Skip { get; private set; }\n    public bool IsPagingEnabled { get; private set; } = false;\n\n    protected virtual void AddInclude(Expression<Func<T, object>> includeExpression)\n    {\n        Includes.Add(includeExpression);\n    }\n    //protected virtual void AddInclude(string includeString)\n    //{\n    //    IncludeStrings.Add(includeString);\n    //}\n    protected virtual void ApplyPaging(int skip, int take)\n    {\n        Skip = skip;\n        Take = take;\n        IsPagingEnabled = true;\n    }\n    protected virtual void ApplyOrderBy(Expression<Func<T, object>> orderByExpression)\n    {\n        OrderBy = orderByExpression;\n    }\n    //protected virtual void ApplyOrderByDescending(Expression<Func<T, object>> orderByDescendingExpression)\n    //{\n    //    OrderByDescending = orderByDescendingExpression;\n    //}\n\n    //protected virtual void ApplyGroupBy(Expression<Func<T, object>> groupByExpression)\n    //{\n    //    GroupBy = groupByExpression;\n    //}\n\n}\n\npublic class MailNotificationByStatusSpecification : BaseSpecification<MailNotification>\n{\n  public MailNotificationByStatusSpecification(int take)\n         : base(x => x.Recipients.Any(e => e.Status == NotificationStatus.Pending))\n  {\n    ApplyPaging(0, take);\n    ApplyOrderBy(n => n.CreatedDate);\n    AddInclude(n => n.Recipients);\n  }\n}\n\nprivate string FormatMessage(MailNotification notification)\n{\n  return JsonConvert.SerializeObject(new\n  {\n      message = new\n      {\n          body = new\n          {\n              contentType = \"HTML\",\n              content = notification.MessageBody\n          },\n          toRecipients = notification.Recipients\n          .Where(n => n.RecipientTypes == RecipientTypes.To)\n          .Select(n => new\n          {\n              EmailAddress = new\n              {\n                  Address = n.Email\n              }\n          }),\n          ccRecipients = notification.Recipients\n          .Where(n => n.RecipientTypes == RecipientTypes.Cc)\n          .Select(n => new\n          {\n              EmailAddress = new\n              {\n                  Address = n.Email\n              }\n          }),\n          bccRecipients = notification.Recipients\n          .Where(n => n.RecipientTypes == RecipientTypes.Bcc)\n          .Select(n => new\n          {\n              EmailAddress = new\n              {\n                  Address = n.Email\n              }\n          }),\n          subject = notification.Subject,\n          importance = notification.Importance.ToString()\n      }\n  });\n}\n\n// public async Task<string> GetGraphApiAccessToken()\n// {\n//     string authority = \"https://login.microsoftonline.com/0d85160c-5899-44ca-acc8-db1501b993b6\";\n//     string clientId =  \"Mail:ClientId\";\n//     string clientSecret = \"Mail:ClientSecret\";\n//     try\n//     {\n//         IConfidentialClientApplication clientApplication = ConfidentialClientApplicationBuilder.Create(clientId)\n//             .WithClientSecret(clientSecret)\n//             .WithAuthority(new Uri(authority))\n//             .Build();\n\n//         string[] scopes = new string[] { \"https://graph.microsoft.com/.default\" };\n//         AuthenticationResult result = await clientApplication.AcquireTokenForClient(scopes)\n//               .ExecuteAsync();\n//         return result?.AccessToken;\n//     }\n//     catch (Exception ex)\n//     {\n//         //_appLogger.LogError($\"An error occured on Acquire Token {ex.Message}\");\n//         Console.WriteLine($\"An error occured on Acquire Token {ex.Message}\");\n//         throw;\n//     }\n// }\n\nprivate async Task Send(MailNotification mailNotification)\n{\n  string sendFrom ;\n  if (mailNotification.FromEmail != null)\n  {\n    sendFrom = mailNotification.FromEmail;\n  }\n  else\n  {\n    sendFrom = \"vplus@virtusa.com\";\n  }\n // string accessToken = await GetGraphApiAccessToken();\n  string accessToken = \"token\";\n  const string mediaType = \"application/json\";\n  const string Bearer = \"Bearer\";\n\n  try\n  {\n    using (HttpClient httpClient = new HttpClient())\n    {\n      httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(Bearer, accessToken);\n      HttpContent content = new StringContent(FormatMessage(mailNotification),\n                  Encoding.UTF8,\n                  mediaType);\n\n      var response = await httpClient\n                    .PostAsync($\"https://graph.microsoft.com/v1.0/users/{sendFrom}/sendMail\", content);\n      response.EnsureSuccessStatusCode();\n    }\n  }\n  catch (HttpRequestException ex)\n  {\n    //_appLogger.LogError($\"SendNotificationsTimerTrigger, An error occured on Post request {ex.Message}\");\n    Console.WriteLine($\"SendNotificationsTimerTrigger, An error occured on Post request {ex.Message}\");\n    throw;\n  }\n}\n\npublic async Task ProcessSavedNotifications()\n{\n  string numberOfmails = \"2\";\n  int pageSize = int.Parse(numberOfmails);\n  MailNotificationByStatusSpecification specification = new MailNotificationByStatusSpecification(pageSize);\n  // API call\n  //var notifications = await _notificationRepository.ListAsync(specification);\n  var notifications = Enumerable.Empty<MailNotification>();\n\n  foreach (var notification in notifications)\n  {\n    try\n    {\n      await Send(notification);\n      notification.Recipients.ToList().ForEach(x => x.Status = NotificationStatus.Sent);\n      // API call\n      //await _notificationRepository.UpdateAsync(notification); ********\n    }\n    catch (Exception ex)\n    {\n      notification.Recipients.ToList()\n                  .ForEach(x => x.Status = NotificationStatus.Fail);\n      // API call\n      //await _notificationRepository.UpdateAsync(notification);  *********\n      //_appLogger.LogError($\"SendNotificationsTimerTrigger, an error occured at {DateTime.Now}. Error :  {ex.Message}\");\n      Console.WriteLine($\"SendNotificationsTimerTrigger, an error occured at {DateTime.Now}. Error :  {ex.Message}\");\n    }\n  }\n}\n\n// log.LogInformation($\"Processing mail notifications started at: {DateTime.Now}\");\nConsole.WriteLine($\"Processing mail notifications started at: {DateTime.Now}\");\nawait ProcessSavedNotifications();\n// log.LogInformation($\"Processing mail notifications completed at: {DateTime.Now}\");\n// log.LogInformation($\"Next execution will be at: \" + $\"{myTimer.Schedule.GetNextOccurrence(DateTime.Now).ToString(\"MM/dd/yyyy HH:mm\")}\");\n",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_uhddo-1",
			"id":"n_NA9Lt",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":46209,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":18
}