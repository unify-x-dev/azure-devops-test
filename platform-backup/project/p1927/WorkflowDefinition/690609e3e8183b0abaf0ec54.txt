{
	"appsUsed":[
		
	],
	"createdTime":1762003427475,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_hgdTM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rh0oF",
			"type":"next"
		},
		{
			"fromNodeId":"n_rh0oF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_b3ShU",
			"type":"next"
		}
	],
	"id":"690609e3e8183b0abaf0ec54",
	"lastModifiedBy":45518,
	"lcName":"[virtu-empowerrepsschedulerfn]syncemployeeactivitiesbulkhttptrigger",
	"modifiedTime":1762003427475,
	"name":"[virtu-emPowerRepsSchedulerFN]SyncEmployeeActivitiesBulkHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_hgdTM",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"200",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_rh0oF",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Threading.Tasks;\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Collections.Generic;\n\n// --- Base Models ---\n\npublic abstract class BaseEntity<T>\n{\n    public T Id { get; set; }\n}\n\npublic class Employee : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public string FullName { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string Email { get; set; }\n    public bool IsActive { get; set; }\n    public string Status { get; set; }\n    public Employee Manager { get; set; }\n    public string ManagerEmployeeNumber { get; set; }\n    public long? ManagerId { get; set; }\n    public EmployeeDesignation EmployeeDesignation { get; set; }\n    public EmployeeAccount EmployeeAccount { get; set; }\n    public EmployeeBusinessUnit EmployeeBusinessUnit { get; set; }\n    public EmployeeLocation EmployeeLocation { get; set; }\n    public EmployeeTier EmployeeTier { get; set; }\n\n    private readonly List<EmployeeRepsActivity> _employeeRepsActivities = new List<EmployeeRepsActivity>();\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities => _employeeRepsActivities.AsReadOnly();\n\n    public void AddRepsActivity(EmployeeRepsActivity employeeRepsActivity)\n    {\n        _employeeRepsActivities.Add(employeeRepsActivity);\n    }\n}\n\npublic class EmployeeRepsActivity : BaseEntity<long>\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public int RepsActivityId { get; set; }\n    public int Points { get; set; }\n    public DateTime EffectiveDate { get; set; }\n    public string ReferenceNumber { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public Employee Employee { get; set; }\n    public bool IsAggregated { get; set; }\n}\n\npublic class RepsActivity : BaseEntity<int>\n{\n    public string ActivityName { get; set; }\n    public string Description { get; set; }\n    public int Points { get; set; }\n    public bool IsActive { get; set; }\n    public string FocusArea { get; set; }\n    public string RepsSize { get; set; }\n    public int? CapLimitId { get; set; }\n    public CapLimit CapLimit { get; set; }\n    public CalculationStrategy CalculationStrategy { get; set; }\n    public EvaluationCategory EvaluationCategory { get; set; }\n    public int EvaluationCategoryId { get; set; }\n    public bool ShouldAggregate { get; set; }\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities { get; set; }\n}\n\npublic class EvaluationCategory : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public int Weightage { get; set; }\n    public string ImageName { get; set; }\n    public short DefaultRating { get; set; }\n    public ComparisonGroups ComparisonGroups { get; set; }\n    public IReadOnlyCollection<RepsActivity> RepsActivities { get; set; }\n}\n\npublic class EmployeeDesignation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int DesignationId { get; set; }\n    public Designation Designation { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Designation : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeDesignation> EmployeeDesignations { get; set; }\n}\n\npublic class EmployeeAccount : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int AccountId { get; set; }\n    public Account Account { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Account : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeAccount> EmployeeAccounts { get; set; }\n}\n\npublic class EmployeeBusinessUnit : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int BusinessUnitId { get; set; }\n    public BusinessUnit BusinessUnit { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class BusinessUnit : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeBusinessUnit> EmployeeBusinessUnits { get; set; }\n}\n\npublic class EmployeeLocation : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int LocationId { get; set; }\n    public Location Location { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Location : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeLocation> EmployeeLocations { get; set; }\n}\n\npublic class EmployeeTier : BaseEntity<int>\n{\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int TierId { get; set; }\n    public Tier Tier { get; set; }\n    public string ReferenceNumber { get; set; }\n}\n\npublic class Tier : BaseEntity<int>\n{\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeTier> EmployeeTiers { get; set; }\n}\n\npublic class CapLimit : BaseEntity<int>\n{\n    public int RepsActivityId { get; set; }\n    public RepsActivity RepsActivity { get; set; }\n    public short Limit { get; set; }\n    public short Frequency { get; set; }\n    public CappingStrategy CappingStrategy { get; set; }\n}\n\npublic enum CalculationStrategy\n{\n    None = 0,\n    IndividualMetric = 1,\n    DeliveryProjectMetric = 2\n}\n\npublic enum CappingStrategy : short\n{\n    None = 0,\n    ActivityCountBased = 1,\n    AverageBased = 2,\n    RevisedScoreBased = 3,\n    ScoreBased = 4\n}\n\npublic enum ComparisonGroups : short\n{\n    None = 0,\n    Tier = 1 << 0,\n    Designation = 1 << 1,\n    Location = 1 << 2,\n    BusinessUnit = 1 << 3\n}\n\n// --- Logic Class ---\n\npublic class RepsSummaryProcessor\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeEndpoint\";\n\n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    };\n\n    // --- DB Interaction Method ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\";\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n            throw;\n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                response.EnsureSuccessStatusCode();\n            }\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\")\n            {\n                return default;\n            }\n\n            try\n            {\n                using (JsonDocument document = JsonDocument.Parse(responseContent))\n                {\n                    JsonElement root = document.RootElement;\n                    if (root.ValueKind == JsonValueKind.Object &&\n                        (root.TryGetProperty(\"result\", out JsonElement resultElement) ||\n                         root.TryGetProperty(\"data\", out resultElement)))\n                    {\n                        if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                        return resultElement.Deserialize<TResponse>(jsonOptions);\n                    }\n                    else if (root.ValueKind != JsonValueKind.Null)\n                    {\n                        return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                    }\n                    else\n                    {\n                        return default;\n                    }\n                }\n            }\n            catch (JsonException jsonEx)\n            {\n                return default;\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            throw;\n        }\n        catch (Exception e)\n        {\n            throw;\n        }\n    }\n\n    // --- Reps Summary Service Logic ---\n\n    public async Task<int> UpdateRepsSummary(string cycle, DateTime startDate, DateTime endDate)\n    {\n        var payload = new\n        {\n            Cycle = cycle,\n            StartDate = startDate,\n            EndDate = endDate\n        };\n\n        var result = await CallDb<int>(\"UpdateRepsSummary\", payload);\n        return result;\n    }\n\n    // --- Main Script Function ---\n    public async Task<IDictionary<string, object>> mainFunction()\n    {\n        try\n        {\n            var cycle = ToFinancialHalfShort(DateTime.Now);\n            var financialHalfStartDate = FinancialHalfStartDate(DateTime.Now);\n            var financialHalfEndDate = FinancialHalfEndDate(DateTime.Now);\n            var affectedRows = await UpdateRepsSummary(cycle, financialHalfStartDate, financialHalfEndDate);\n\n            return new Dictionary<string, object> {\n                { \"statusCode\", 200 },\n                { \"body\", new {\n                    message = $\"Successfully updated reps summary for cycle {cycle}\",\n                    affectedRows = affectedRows,\n                    cycle = cycle,\n                    startDate = financialHalfStartDate,\n                    endDate = financialHalfEndDate\n                }}\n            };\n        }\n        catch (ArgumentException ex)\n        {\n            return new Dictionary<string, object> {\n                { \"statusCode\", 400 },\n                { \"body\", new { message = $\"Invalid argument: {ex.ParamName}\" } }\n            };\n        }\n        catch (InvalidOperationException ex)\n        {\n            return new Dictionary<string, object> {\n                { \"statusCode\", 400 },\n                { \"body\", new { message = \"Invalid operation during summary calculation\" } }\n            };\n        }\n        catch (TimeoutException ex)\n        {\n            return new Dictionary<string, object> {\n                { \"statusCode\", 408 },\n                { \"body\", new { message = \"The operation timed out\" } }\n            };\n        }\n        catch (HttpRequestException ex)\n        {\n            return new Dictionary<string, object> {\n                { \"statusCode\", 502 },\n                { \"body\", new { message = \"Service unavailable\" } }\n            };\n        }\n        catch (Exception ex)\n        {\n            return new Dictionary<string, object> {\n                { \"statusCode\", 500 },\n                { \"body\", new { message = \"Internal server error during summary calculation\" } }\n            };\n        }\n    }\n\n    // Date calculation methods\n    private static readonly int monthsPerFinancialHalf = 6;\n\n    public static string ToFinancialHalfShort(DateTime dateTime)\n    {\n        string year = CalculateFinancialYear(dateTime);\n        int half = CalculateFinancialHalf(dateTime);\n        return $\"FY{year}H{half}\";\n    }\n\n    public static DateTime FinancialHalfStartDate(DateTime dateTime)\n    {\n        string year = CalculateFinancialYear(dateTime);\n        int half = CalculateFinancialCycle(dateTime, monthsPerFinancialHalf);\n        if (half == 1)\n        {\n            return new DateTime(dateTime.Year, 4, 1);\n        }\n\n        var currentYear = dateTime.ToString(\"yy\");\n        if (currentYear == year)\n        {\n            return new DateTime(dateTime.AddYears(-1).Year, 10, 1);\n        }\n\n        return new DateTime(dateTime.Year, 10, 1);\n    }\n\n    public static DateTime FinancialHalfEndDate(DateTime dateTime)\n    {\n        var startDate = FinancialHalfStartDate(dateTime);\n        var nextCycleStartDate = FinancialHalfStartDate(startDate.AddMonths(monthsPerFinancialHalf + 1));\n        return nextCycleStartDate.AddDays(-1);\n    }\n\n    public static DateTime CappingStartDate(DateTime effectiveDate, short cappingFrequency)\n    {\n        var startDate = FinancialHalfStartDate(effectiveDate);\n        if (cappingFrequency == 0)\n        {\n            return startDate;\n        }\n\n        var totalDaysForEvaluationPeriod = (effectiveDate - startDate).Days;\n        var daysWithinCappingPeriod = totalDaysForEvaluationPeriod % cappingFrequency;\n        var cappingStartDate = effectiveDate.Date.AddDays(-daysWithinCappingPeriod);\n        return cappingStartDate;\n    }\n\n    public static DateTime CappingEndDate(DateTime startDate, short cappingFrequency)\n    {\n        if (cappingFrequency == 0)\n        {\n            return FinancialHalfEndDate(startDate);\n        }\n\n        var cappingEndDate = startDate.Date.AddDays(cappingFrequency).AddTicks(-1);\n        return cappingEndDate;\n    }\n\n    private static int CalculateFinancialCycle(DateTime dateTime, int monthsPerCycle)\n    {\n        var targetMonth = dateTime.AddMonths(9).Month;\n        var half = targetMonth / monthsPerCycle;\n        if (targetMonth % monthsPerCycle > 0)\n        {\n            half++;\n        }\n        return half;\n    }\n\n    private static string CalculateFinancialYear(DateTime dateTime)\n    {\n        return dateTime.Month >= 4\n            ? dateTime.AddYears(1).ToString(\"yy\")\n            : dateTime.ToString(\"yy\");\n    }\n\n    private static int CalculateFinancialHalf(DateTime dateTime)\n    {\n        var targetMonth = dateTime.AddMonths(9).Month;\n        var monthsPerHalf = 6;\n        var half = targetMonth / monthsPerHalf;\n        if (targetMonth % monthsPerHalf > 0)\n        {\n            half++;\n        }\n        return half;\n    }\n}\n\n// --- Script Execution ---\n\nvar processor = new RepsSummaryProcessor();\nvar resultObject = await processor.mainFunction();\n\nresultObject",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_b3ShU",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":45518,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":0
}