{
	"appsUsed":[
		
	],
	"createdTime":1761755158995,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_XhbEi",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8rSjZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_8rSjZ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_jH3B7",
			"type":"next"
		}
	],
	"id":"69024016d015237911e3a172",
	"lastModifiedBy":46217,
	"lcName":"[virtu-approvalsfunctionappfn]getapproval",
	"modifiedTime":1761804300177,
	"name":"[virtu-ApprovalsFunctionAppFN]GetApproval",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_XhbEi",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_8rSjZ",
			"index":2,
			"inputs":{
				"code":"using System.Net;\nusing System.Text.RegularExpressions;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\n\npublic class Approval\n{\n    public string? id { get; set; }\n    public string? request { get; set; }\n    public string? requestedBy { get; set; }\n    public string? app { get; set; }\n    public string? appGroup { get; set; }\n    public string? subCategory { get; set; }\n    public string? details { get; set; }\n    public string? requestedByImage { get; set; }\n    public DateTime createdDate { get; set; }\n    public Uri? link { get; set; }\n    public string? status { get; set; }\n    public string? comment { get; set; }\n}\n\npublic class ApprovalList\n{\n    public List<Approval>? items { get; set; }\n}\n\npublic class DocumentId\n{\n    [JsonProperty(\"link\")]\n    public Uri? Link { get; set; }\n}\n\npublic class NowApproval\n{\n    [JsonProperty(\"sys_id\")]\n    public string? SysId { get; set; }\n\n    [JsonProperty(\"document_id.short_description\")]\n    public string? SysapprovalShortDescription { get; set; }\n\n    [JsonProperty(\"document_id.description\")]\n    public string? SysapprovalDescription { get; set; }\n\n    [JsonProperty(\"sys_created_on\")]\n    public DateTime SysCreatedOn { get; set; }\n\n    [JsonProperty(\"document_id\")]\n    public DocumentId? DocumentId { get; set; }\n\n    [JsonProperty(\"document_id.sys_class_name\")]\n    public string? DocumentIdSysClassName { get; set; }\n\n    [JsonProperty(\"document_id.name\")]\n    public string? DocumentIdName { get; set; }\n\n    [JsonProperty(\"state\")]\n    public string? State { get; set; }\n\n    [JsonProperty(\"sys_created_by\")]\n    public string? SysCreatedBy { get; set; }\n\n    [JsonProperty(\"source_table\")]\n    public string? SourceTable { get; set; }\n\n    [JsonProperty(\"document_id.requested_for.name\")]\n    public string? RequestedForName { get; set; }\n\n    [JsonProperty(\"document_id.requested_for.email\")]\n    public string? RequestedForEmail { get; set; }\n\n    [JsonProperty(\"document_id.author.name\")]\n    public string? AuthorName { get; set; }\n\n    [JsonProperty(\"document_id.author.email\")]\n    public string? AuthorEmail { get; set; }\n\n    [JsonProperty(\"document_id.requested_by.name\")]\n    public string? RequestedByName { get; set; }\n\n    [JsonProperty(\"document_id.requested_by.email\")]\n    public string? RequestedByEmail { get; set; }\n\n    [JsonProperty(\"document_id.assigned_to.name\")]\n    public string? AssignedToName { get; set; }\n\n    [JsonProperty(\"document_id.assigned_to.email\")]\n    public string? AssignedToEmail { get; set; }\n\n    [JsonProperty(\"document_id.opened_by.name\")]\n    public string? OpenedByName { get; set; }\n\n    [JsonProperty(\"document_id.opened_by.email\")]\n    public string? OpenedByEmail { get; set; }\n\n    //sc_task\n    public string? short_description { get; set; }\n\n    public string? u_sd_onboarding { get; set; }\n\n    [JsonProperty(\"request_item.requested_for.name\")]\n    public string? request_itemrequested_forname { get; set; }\n\n    [JsonProperty(\"request_item.u_last_working_date\")]\n    public string? request_itemu_last_working_date { get; set; }\n\n    [JsonProperty(\"request_item.requested_for.employee_number\")]\n    public string? request_itemrequested_foremployee_number { get; set; }\n}\n\npublic class NowApprovalList\n{\n    [JsonProperty(\"result\")]\n    public IList<NowApproval>? Items { get; set; }\n}\n\npublic class Owner\n{\n    public string? id { get; set; }\n    public string? type { get; set; }\n    public string? tenantId { get; set; }\n}\n\npublic class Principal\n{\n    public string? id { get; set; }\n    public string? displayName { get; set; }\n    public string? email { get; set; }\n    public string? type { get; set; }\n    public string? tenantId { get; set; }\n    public string? userPrincipalName { get; set; }\n    public string? thumbnailPhoto { get; set; }\n}\n\npublic class Properties\n{\n    public string? type { get; set; }\n    public bool isActive { get; set; }\n    public List<string>? userRoles { get; set; }\n    public Owner? owner { get; set; }\n    public string? title { get; set; }\n    public string? details { get; set; }\n    public string? result { get; set; }\n    public bool allowCancel { get; set; }\n    public bool enableNotifications { get; set; }\n    public DateTime creationDate { get; set; }\n    public DateTime dueDate { get; set; }\n    public DateTime expirationDate { get; set; }\n    public DateTime completionDate { get; set; }\n    public UserRequest? userRequest { get; set; }\n    public List<string>? approvers { get; set; }\n    public List<Principal>? principals { get; set; }\n    public string? priority { get; set; }\n    public string? requestType { get; set; }\n}\n\npublic class UserRequest\n{\n    public List<string>? responseOptions { get; set; }\n}\n\npublic class PAApproval\n{\n    public string? name { get; set; }\n    public string? id { get; set; }\n    public string? type { get; set; }\n    public Properties? properties { get; set; }\n}\n\npublic class PAApprovalList\n{\n    [JsonProperty(\"value\")]\n    public List<PAApproval>? items { get; set; }\n    public string? nextLink { get; set; }\n}\n\npublic class NowApprovalDataMapper\n{\n    public Approval MapToApproval(NowApproval nowApproval)\n    {\n        string requestedBy = string.Empty;\n        string requestedByImage = string.Empty;\n        string app = \"Anytime\";\n        string subCategory = \"Anytime Approval\";\n        string? title = nowApproval.SourceTable == \"sn_vul_change_approval\" ? nowApproval.DocumentIdName : nowApproval.SysapprovalShortDescription;\n\n        switch (nowApproval.SourceTable)\n        {\n            case \"sc_req_item\":\n                requestedBy = nowApproval.RequestedForName!;\n                requestedByImage = nowApproval.RequestedForEmail!;\n                break;\n            case \"change_request\":\n            case \"sn_vul_change_approval\":\n                requestedBy = nowApproval.RequestedByName!;\n                requestedByImage = nowApproval.RequestedByEmail!;\n                break;\n            case \"kb_knowledge\":\n                requestedBy = nowApproval.AuthorName!;\n                requestedByImage = nowApproval.AuthorEmail!;\n                break;\n            case \"std_change_proposal\":\n            case \"sn_risk_acceptance_task\":\n            case \"u_account_info\":\n            case \"u_account_task\":\n            case \"sn_imt_travel_request\":\n                requestedBy = nowApproval.OpenedByName!;\n                requestedByImage = nowApproval.OpenedByEmail!;\n                break;\n            case \"sn_audit_control_test\":\n            case \"sn_audit_engagement\":\n                requestedBy = nowApproval.AssignedToName!;\n                requestedByImage = nowApproval.AssignedToEmail!;\n                break;\n        }\n\n        requestedBy = string.IsNullOrEmpty(requestedBy) ? nowApproval.SysCreatedBy! : requestedBy;\n        requestedByImage = string.IsNullOrEmpty(requestedByImage) ? string.Concat(requestedBy, \"@virtusa.com\") : requestedByImage;\n        title = string.IsNullOrEmpty(title) ? subCategory : title;\n\n        return new Approval\n        {\n            id = nowApproval.SysId,\n            app = app,\n            appGroup = app,\n            subCategory = !string.IsNullOrEmpty(nowApproval.DocumentIdSysClassName) ? string.Concat(nowApproval.DocumentIdSysClassName.Replace(\"Approval\", \"\"), \" Approval\") : subCategory,\n            request = title,\n            details = nowApproval.SysapprovalDescription,\n            requestedBy = requestedBy,\n            // requestedByImage = requestedByImage,\n            createdDate = DateTime.SpecifyKind(nowApproval.SysCreatedOn, DateTimeKind.Utc).ToUniversalTime(),\n            link = new Uri(string.Format(\"{0}/sp?id=approval&table=sysapproval_approver&sys_id={1}\", nowApproval.DocumentId!.Link!.GetLeftPart(UriPartial.Authority), nowApproval.SysId)),\n            status = nowApproval.State\n        };\n    }\n\n    public List<Approval> MapToApprovalList(IList<NowApproval> nowApprovalList)\n    {\n        var approvals = new List<Approval>();\n        foreach (var n in nowApprovalList)\n            approvals.Add(MapToApproval(n));\n        return approvals;\n    }\n}\n\npublic class PAApprovalDataMapper\n{\n    private readonly Dictionary<string, Dictionary<string, string>> _propertyMappings = new Dictionary<string, Dictionary<string, string>>\n    {\n        { \"LOP Reversal\", new Dictionary<string, string> { { \"Velocity 5\", \"LOP Reversal Approval\" } } },\n        { \"FYA: The Candidate\", new Dictionary<string, string> { { \"Velocity 5\", \"RR Approval\" } } },\n        { \"Virtusa Management Level Approval\", new Dictionary<string, string> { { \"Velocity 5\", \"VML Approval\" } } },\n        { \"Notification For POC\",  new Dictionary<string, string> { { \"Velocity 5\", \"POC Approval\" } } },\n        { \"ALM - Chorus Project\", new Dictionary<string, string> { { \"Velocity 5\", \"ALM Project Approval\" } } },\n    };\n\n    public Approval MapToApproval(PAApproval paApproval, String environment)\n    {\n        Properties? properties = paApproval.properties;\n        string app = \"Power Automate\";\n        string application = app;\n        string subCategory = \"Power Automate Approval\";\n\n        foreach (string key in _propertyMappings.Keys)\n        {\n            if (properties != null && properties.title != null && properties.title.Contains(key))\n            {\n                var qry = from outer in _propertyMappings\n                            where outer.Key == key\n                            from inner in outer.Value\n                            select inner.Key + \"#\" + inner.Value;\n\n                application = qry.ElementAt(0).Split(\"#\")[0];\n                subCategory = qry.ElementAt(0).Split(\"#\")[1];\n                break;\n            }\n        }\n\n        return new Approval()\n        {\n            id = paApproval.name,\n            app = application,\n            appGroup = app,\n            subCategory = subCategory,\n            request = properties!.title,\n            details = string.IsNullOrEmpty(properties.details) ? \"\" : properties.details,\n            requestedBy = properties.principals?[0].displayName,\n            requestedByImage = properties.principals?[0].thumbnailPhoto,\n            createdDate = properties.creationDate,\n            link = new Uri(string.Format(\"https://make.powerautomate.com/environments/{0}approvals/received/{1}\", environment, paApproval.name)),\n            status = \"requested\"\n        };\n    }\n\n    public List<Approval> MapToApprovalList(List<PAApproval> paApprovalList, String environment)\n    {\n        List<Approval> approvalList = new List<Approval>();\n        List<string> options = new List<string>() { \"Approve\", \"Reject\" };\n\n        paApprovalList.RemoveAll(a => !options.All(a.properties!.userRequest!.responseOptions!.Contains));\n\n        List<string> titles = new List<string>() { \"Direct Project Approval\" };\n\n        paApprovalList.RemoveAll(a => titles.All(a.properties!.title!.Contains));\n\n        foreach (PAApproval paApproval in paApprovalList)\n        {\n            try\n            {\n                approvalList.Add(MapToApproval(paApproval, environment));\n            }\n            catch (Exception ex)\n            {\n                throw;\n            }\n        }\n        return approvalList;\n    }\n}\n\npublic class NowApprovalDataProvider\n{\n    private readonly NowApprovalDataMapper _mapper = new NowApprovalDataMapper();\n    private readonly HttpClient tokenClient = new HttpClient();\n    private readonly HttpClient nowClient = new HttpClient();\n    private readonly HttpClient nowPatchClient = new HttpClient();\n\n    private readonly string NOWGetUrl = \"https://temp-now-get-url/\";       // TODO: replace later\n    private readonly string NOWPatchUrl = \"https://temp-now-patch-url/\";   // TODO: replace later\n    private readonly string tempClientId = \"temp-client-id\";               // TODO: replace later\n    private readonly string tempClientSecret = \"temp-client-secret\";       // TODO: replace later\n\n    public async Task<List<Approval>> GetNowApprovalsAsync(string email)\n    {\n        nowClient.BaseAddress = new Uri(NOWGetUrl);\n\n        Console.WriteLine($\"starting approvals from ServiceNow\");\n        List<Approval> approvalListToSend = new List<Approval>();\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", tempClientId, tempClientSecret), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"sysapproval_approver?sysparm_query=approver.email={0}&state=requested&sysparm_display_value=true&sysparm_fields=sys_id,document_id.description,document_id.short_description,sys_created_by,sys_created_on,state,document_id,document_id.name,document_id.sys_class_name,source_table,document_id.requested_for.name,document_id.requested_for.email,document_id.author.name,document_id.author.email,document_id.requested_by.name,document_id.requested_by.email,document_id.assigned_to.name,document_id.assigned_to.email,document_id.opened_by.name,document_id.opened_by.email\", email));\n\n        try\n        {\n            HttpResponseMessage paGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n            if (!paGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                Console.WriteLine($\"Response status code does not indicate success. Response : {paGetTokenApiResponse.Content.ReadAsStringAsync().Result}\");\n            }\n\n            dynamic objects = JsonConvert.DeserializeObject<dynamic>(paGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            nowClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpResponseMessage nowGetUSerApiResponse = await nowClient.SendAsync(getUserRequest);\n            if (!nowGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                Console.WriteLine($\"Response status code does not indicate success. Response : {nowGetUSerApiResponse.Content.ReadAsStringAsync().Result}\");\n            }\n\n            NowApprovalList nowApprovalList = JsonConvert.DeserializeObject<NowApprovalList>(nowGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            approvalListToSend.AddRange(_mapper.MapToApprovalList(nowApprovalList.Items!));\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error : {ex.Message}\");\n        }\n        Console.WriteLine($\"ending approvals from ServiceNow\");\n\n        return approvalListToSend;\n    }\n\n    public async Task PatchNowApprovalAsync(List<Approval> approvalList, string email)\n    {\n        nowPatchClient.BaseAddress = new Uri(NOWPatchUrl);\n\n        Console.WriteLine($\"start sending approvals to ServiceNow\");\n        foreach (Approval approval in approvalList)\n        {\n            string status = approval.status!.ToLower();\n            string comment = approval.comment!;\n            if (string.IsNullOrEmpty(status) || (!string.IsNullOrEmpty(status) && status != \"approve\" && status != \"reject\") || (!string.IsNullOrEmpty(status) && status == \"reject\" && string.IsNullOrEmpty(comment)))\n            {\n                continue;\n            }\n\n            HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", tempClientId, tempClientSecret), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n            HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Patch, string.Format(\"sysapproval_approver/{0}\", approval.id));\n            Dictionary<string, string> data = new Dictionary<string, string> { { \"state\", status == \"approve\" ? \"approved\" : \"rejected\" }, { \"comments\", string.Concat(string.Format(\"{0} has performed action via Approvals App\", email), Environment.NewLine, string.IsNullOrEmpty(comment) ? comment : string.Format(\"User Comment :{0}\", comment)) } };\n            patchUserRequest.Content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, \"application/json\");\n            try\n            {\n                HttpResponseMessage paGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n                if (!paGetTokenApiResponse.IsSuccessStatusCode)\n                {\n                    Console.WriteLine($\"Response status code does not indicate success. Response : {paGetTokenApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                dynamic objects = JsonConvert.DeserializeObject<dynamic>(paGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                nowPatchClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n                HttpResponseMessage nowPatchUserApiResponse = await nowPatchClient.SendAsync(patchUserRequest);\n                if (!nowPatchUserApiResponse.IsSuccessStatusCode)\n                {\n                    Console.WriteLine($\"Response status code does not indicate success. Response : {nowPatchUserApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                nowPatchUserApiResponse.EnsureSuccessStatusCode();\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error : {ex.Message}\");\n                throw;\n            }\n        }\n        Console.WriteLine($\"end sending approvals to ServiceNow\");\n    }\n}\n\npublic class PAApprovalDataProvider\n{\n    private readonly HttpClient paClient = new HttpClient();\n    private readonly HttpClient paNextClient= new HttpClient();\n    private readonly PAApprovalDataMapper _paApprovalDataMapper = new PAApprovalDataMapper();\n\n    private readonly string PAGetUrl = \"https://temp-pa-get-url/\";       \n    private readonly string PAPatchUrl = \"https://temp-pa-patch-url/\";  \n\n    public async Task<List<Approval>> GetPAApprovalsAsync(String token)\n    {\n        paClient.BaseAddress = new Uri(PAGetUrl);\n        paNextClient.BaseAddress = new Uri(PAGetUrl);\n\n        // _logger.LogInformation(\"starting approvals from Power Automate\");\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, \"approvalViews?$filter=properties%2FuserRole+eq+%27Approver%27+and+properties%2FisActive+eq+%27true%27&api-version=2016-11-01\");\n        paClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<PAApproval> paApprovalList = new List<PAApproval>();\n\n        try\n        {\n            HttpResponseMessage paGetUSerApiResponse = await paClient.SendAsync(getUserRequest);\n            if (!paGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", paGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            PAApprovalList approvalList = JsonConvert.DeserializeObject<PAApprovalList>(paGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            paApprovalList.AddRange(approvalList.items!);\n\n            while (!string.IsNullOrEmpty(approvalList.nextLink))\n            {\n                HttpRequestMessage getNextUserRequest = new HttpRequestMessage(HttpMethod.Get, approvalList.nextLink);\n                paNextClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                paGetUSerApiResponse = await paNextClient.SendAsync(getNextUserRequest);\n                if (!paGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", paGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                approvalList = JsonConvert.DeserializeObject<PAApprovalList>(paGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                paApprovalList.AddRange(approvalList.items!);\n            }\n\n            approvalListToSend.AddRange(_paApprovalDataMapper.MapToApprovalList(paApprovalList, paClient.BaseAddress!.Segments[4]));\n        }\n        catch (Exception ex)\n        {\n            // _logger.LogError(ex, ex.Message);\n\n        }\n        // _logger.LogInformation(\"ending approvals from Power Automate\");\n        return approvalListToSend;\n    }\n\n    public async Task PatchPAApprovalAsync(List<Approval> approvalList, string token)\n    {\n        paClient.BaseAddress = new Uri(PAGetUrl);\n        paNextClient.BaseAddress = new Uri(PAGetUrl);\n\n        // _logger.LogInformation(\"start sending approvals to Power Automate\");\n        foreach (Approval approval in approvalList)\n        {\n            string status = approval.status!.ToLower();\n            string comment = approval.comment!;\n            if (string.IsNullOrEmpty(status) || (!string.IsNullOrEmpty(status) && status != \"approve\" && status != \"reject\") || (!string.IsNullOrEmpty(status) && status == \"reject\" && string.IsNullOrEmpty(comment)))\n            {\n                continue;\n            }\n\n            HttpRequestMessage patchUserRequest = new HttpRequestMessage(HttpMethod.Post, string.Format(\"approvals/{0}/approvalResponses?api-version=2016-11-01\", approval.id));\n            Dictionary<string, Dictionary<string, string>> data = new Dictionary<string, Dictionary<string, string>> { { \"Properties\", new Dictionary<string, string> { { \"response\", status }, { \"comments\", comment } } } };\n\n            patchUserRequest.Content = new StringContent(JsonConvert.SerializeObject(data), Encoding.UTF8, \"application/json\");\n\n            paClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n            try\n            {\n                HttpResponseMessage paPatchUserApiResponse = await paClient.SendAsync(patchUserRequest);\n                if (!paPatchUserApiResponse.IsSuccessStatusCode)\n                {\n                    // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", paPatchUserApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                paPatchUserApiResponse.EnsureSuccessStatusCode();\n            }\n            catch (Exception ex)\n            {\n                // _logger.LogError(ex, ex.Message);\n                throw;\n            }\n        }\n\n        // _logger.LogInformation(\"end sending approvals to Power Automate\");\n    }\n}\n\n\n\n\npublic class GetApproval\n{\n    private readonly ILogger _logger;\n    private readonly INowApprovalDataProvider _nowApprovalDataProvider;\n    private readonly IPAApprovalDataProvider _paApprovalDataProvider;\n    private readonly IV5ApprovalDataProvider _v5ApprovalDataProvider;\n    private readonly IV5PaaSApprovalDataProvider _v5PaaSApprovalDataProvider;\n    private readonly ISkillApprovalDataProvider _skillApprovalDataProvider;\n    private readonly ISfdcApprovalDataProvider _sfdcApprovalDataProvider;\n    private readonly ITaleoApprovalDataProvider _taleoApprovalDataProvider;\n    private readonly IOutlookApprovalDataProvider _outlookApprovalDataProvider;\n\n    public GetApproval(ILoggerFactory loggerFactory, INowApprovalDataProvider nowApprovalDataProvider, IPAApprovalDataProvider paApprovalDataProvider, IV5ApprovalDataProvider v5ApprovalDataProvider, IV5PaaSApprovalDataProvider v5PaaSApprovalDataProvider, ISkillApprovalDataProvider skillApprovalDataProvider, ISfdcApprovalDataProvider sfdcApprovalDataProvider, ITaleoApprovalDataProvider taleoApprovalDataProvider, IOutlookApprovalDataProvider outlookApprovalDataProvider)\n    {\n        _logger = loggerFactory.CreateLogger<GetApproval>();\n        _nowApprovalDataProvider = nowApprovalDataProvider;\n        _paApprovalDataProvider = paApprovalDataProvider;\n        _v5ApprovalDataProvider = v5ApprovalDataProvider;\n        _v5PaaSApprovalDataProvider = v5PaaSApprovalDataProvider;\n        _skillApprovalDataProvider = skillApprovalDataProvider;\n        _sfdcApprovalDataProvider = sfdcApprovalDataProvider;\n        _taleoApprovalDataProvider = taleoApprovalDataProvider;\n        _outlookApprovalDataProvider = outlookApprovalDataProvider;\n    }\n\n    [OpenApiOperation(operationId: \"GetApproval\", tags: new[] { \"GetApproval\" }, Summary = \"Get Approvals\", Description = \"Use this method to get approvals for a user\", Visibility = OpenApiVisibilityType.Important)]\n    [OpenApiSecurity(\"function_key\", SecuritySchemeType.ApiKey, Name = \"code\", In = OpenApiSecurityLocationType.Query)]\n    [OpenApiSecurity(\"bearer_auth\", SecuritySchemeType.Http, Scheme = OpenApiSecuritySchemeType.Bearer, BearerFormat = \"JWT\")]\n    [OpenApiParameter(name: \"email\", In = ParameterLocation.Path, Required = true, Type = typeof(string), Summary = \"The email of the user\", Description = \"Valid email of the user\", Visibility = OpenApiVisibilityType.Important)]\n    [OpenApiParameter(name: \"vrtu-approvals-pa-token\", In = ParameterLocation.Header, Required = false, Type = typeof(string), Summary = \"Azure AD Access Token to get Power Automate, Velocity5 and Velocity5 PaaS\", Description = \"Azure AD Access Token to get Power Automate,Velocity5 and Velocity5 PaaS\", Visibility = OpenApiVisibilityType.Important)]\n    [OpenApiParameter(name: \"status\", In = ParameterLocation.Query, Required = false, Type = typeof(string), Summary = \"Filter parameter can be used to filter (e.g. requested etc.) approvals\", Description = \"Filter parameter can be used to filter (e.g. requested etc.) approvals\", Visibility = OpenApiVisibilityType.Advanced)]\n    [OpenApiParameter(name: \"isDescending\", In = ParameterLocation.Query, Required = false, Type = typeof(string), Summary = \"Sort parameter can be used to sort approvals\", Description = \"Sort parameter can be used to sort approvals\", Visibility = OpenApiVisibilityType.Advanced)]\n    [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: \"application/json\", bodyType: typeof(ApprovalList), Summary = \"Get Approvals success response\", Description = \"If request is successful then it will show available approvals for the given user. If there are any errors in getting approvals from a particular application then approvals from that application will be omitted in the response\")]\n    [OpenApiResponseWithBody(statusCode: HttpStatusCode.BadRequest, contentType: \"application/json\", bodyType: typeof(string), Summary = \"Get Approvals failure response\", Description = \"If request doesn't have a valid email then error is thrown\")]\n    [Function(\"GetApproval\")]\n    public async Task<HttpResponseData> RunAsync([HttpTrigger(AuthorizationLevel.Function, \"get\", Route = \"users/{email}/approvals\")] HttpRequestData req, string email, string status, string isDescending)\n    {\n        HttpResponseData response;\n        if (!Regex.IsMatch(email,\n                @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\",\n                RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))\n        {\n            response = req.CreateResponse(HttpStatusCode.BadRequest);\n            response.WriteString(JsonConvert.SerializeObject(\"path parameter {email} is not valid. Please provide valid email\"));\n        }\n        else\n        {\n            _logger.LogInformation(\"getting {status} approvals for {email} with isDescending : {isDescending}\", status, email, isDescending);\n            ApprovalList approvalList = new ApprovalList() { items = new List<Approval>() };\n\n            approvalList.items!.AddRange(await _nowApprovalDataProvider.GetNowApprovalsAsync(email));\n            KeyValuePair<string, IEnumerable<string>> header = req.Headers.ToList().Find(s => s.Key == \"vrtu-approvals-pa-token\");\n            KeyValuePair<string, IEnumerable<string>> authorizationHeader = req.Headers.ToList().Find(s => s.Key == \"Authorization\");\n\n            if (!header.Equals(default(KeyValuePair<string, IEnumerable<string>>)))\n            {\n                approvalList.items!.AddRange(await _paApprovalDataProvider.GetPAApprovalsAsync(header.Value.ToList()[0]));\n                approvalList.items!.AddRange(await _v5ApprovalDataProvider.GetV5ApprovalsAsync(header.Value.ToList()[0]));\n                approvalList.items!.AddRange(await _v5PaaSApprovalDataProvider.GetV5PaaSApprovalsAsync(header.Value.ToList()[0]));\n            }\n\n            if (!authorizationHeader.Equals(default(KeyValuePair<string, IEnumerable<string>>)))\n            {\n                approvalList.items!.AddRange(await _outlookApprovalDataProvider.GetOutlookApprovalsAsync(authorizationHeader.Value.ToList()[0].Split(\" \").Last()));\n            }\n\n            approvalList.items!.AddRange(await _skillApprovalDataProvider.GetSKillApprovalsAsync(email));\n            approvalList.items!.AddRange(await _sfdcApprovalDataProvider.GetSFDCApprovalsAsync(email));\n            approvalList.items!.AddRange(await _taleoApprovalDataProvider.GetTaleoApprovalsAsync(email));\n\n            response = req.CreateResponse(HttpStatusCode.OK);\n            response.Headers.Add(\"Content-Type\", \"application/json; charset=utf-8\");\n\n            if (!string.IsNullOrEmpty(isDescending) && approvalList.items.Count > 0)\n            {\n                List<Approval> sortedList = approvalList.items.OrderBy(x => x.createdDate).ToList();\n                sortedList.Reverse();\n                approvalList.items.Clear();\n                approvalList.items.AddRange(sortedList);\n            }\n\n            response.WriteString(JsonConvert.SerializeObject(approvalList));\n        }\n        return response;\n    }\n}\n",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_jH3B7",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":46217,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":1
}