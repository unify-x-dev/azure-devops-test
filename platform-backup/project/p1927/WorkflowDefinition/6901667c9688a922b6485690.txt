{
	"appsUsed":[
		
	],
	"createdTime":1761699452990,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761802976271,
		"deployedBy":39713,
		"deployedDefinitionId":"6902fae094edc52c8d458a19",
		"status":"DEPLOYED",
		"version":2,
		"workflowVersion":3
	},
	"edges":[
		{
			"fromNodeId":"n_hgdTM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rh0oF",
			"type":"next"
		},
		{
			"fromNodeId":"n_rh0oF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_b3ShU",
			"type":"next"
		}
	],
	"id":"6901667c9688a922b6485690",
	"lastModifiedBy":39713,
	"lcName":"[virtu-empowerrepsschedulerfn]syncemployeelocationhttptrigger",
	"modifiedTime":1761803002082,
	"name":"[virtu-emPowerRepsSchedulerFN]SyncEmployeeLocationHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_hgdTM",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"200",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_rh0oF",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\n// Using System.Text.Json for base models, but Newtonsoft for logic\nusing System.Text.Json; \nusing System.Text.Json.Serialization; // For JsonIgnoreCondition\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Net.Http;\nusing System.Text;\nusing Microsoft.Extensions.Logging; // For ILogger\nusing Newtonsoft.Json; // Using Newtonsoft.Json for main logic\nusing Newtonsoft.Json.Linq; // Using Newtonsoft.Json for parsing\n\n// --- Base Models ---\n\npublic class BaseEntity\n{\n    public int Id { get; set; }\n}\n\npublic class Category : BaseEntity\n{\n    public string? Name { get; set; }\n    public string? Description { get; set; }\n    public string? ImageUrl { get; set; }\n    public bool IsActive { get; set; }\n    public IReadOnlyCollection<Rave>? Raves { get; set; }\n    public IReadOnlyCollection<EmployeeCategory>? EmployeeCategories { get; set; }\n}\n\npublic class Employee : BaseEntity\n{\n    public long EmployeeId { get; set; }\n    public string? UserName { get; set; }\n    public string? FullName { get; set; }\n    public string? Email { get; set; }\n    public long? ManagerId { get; set; }\n    public string? ManagerEmployeeNumber { get; set; }\n    public bool IsActive { get; set; }\n    public string? EmployeeNumber { get; set; }\n    public string? Status { get; set; }\n    public Employee? Manager { get; set; }\n\n    public string? Designation { get; set; }\n    public IReadOnlyCollection<Rave>? Raves { get; set; }\n    public IReadOnlyCollection<EmployeeCategory>? EmployeeCategories { get; set; }\n    private readonly List<RaveEmployee> _raveEmployees = new List<RaveEmployee>();\n    public IReadOnlyCollection<RaveEmployee> RaveEmployees => _raveEmployees.AsReadOnly();\n\n    public void AddRaveEmployee(RaveEmployee raveEmployee)\n    {\n        _raveEmployees.Add(raveEmployee);\n    }\n}\n\n public class EmployeeCategory : BaseEntity\n{\n    public long EmployeeId { get; set; }\n    public int CategoryId { get; set; }\n    public Employee? Employee { get; set; }\n    public Category? Category { get; set; }\n}\npublic class Rave : BaseEntity\n{\n    public long SenderEmployeeId { get; set; }\n    public string? Content { get; set; }\n    public int CategoryId { get; set; }\n    public DateTime SentDate { get; set; }\n    public Employee? Sender { get; set; }\n    public Category? Category { get; set; }\n    private readonly List<RaveEmployee> _raveEmployees = new List<RaveEmployee>();\n    public IReadOnlyCollection<RaveEmployee> RaveEmployees => _raveEmployees.AsReadOnly();\n\n    public void AddRaveEmployee(RaveEmployee raveEmployee)\n    {\n        _raveEmployees.Add(raveEmployee);\n    }\n    public void AddRaveEmployee(string userName)\n    {\n        _raveEmployees.Add(new RaveEmployee { Employee = new Employee { UserName = userName } });\n    }\n}\npublic class RaveEmployee : BaseEntity\n{\n    public int RaveId { get; set; }\n    public long EmployeeId { get; set; }\n    public bool IsThanked { get; set; }\n    public Rave? Rave { get; set; }\n    public Employee? Employee { get; set; }\n}\n\n// Additional models from the provided code\npublic enum ComparisonGroups : short { /* ... */ }\npublic class EvaluationCategory : BaseEntity<int> { /* ... */ }\npublic enum CalculationStrategy { /* ... */ }\npublic enum CappingStrategy : short { /* ... */ }\npublic class CapLimit : BaseEntity<int> { /* ... */ }\npublic class RepsActivity : BaseEntity<int> { /* ... */ }\npublic class EmployeeRepsActivity : BaseEntity<long> { /* ... */ }\npublic class Tier : BaseEntity<int> { /* ... */ }\npublic class Account : BaseEntity<int> { /* ... */ }\npublic class EmployeeAccount : BaseEntity<int> { /* ... */ }\npublic class Designation : BaseEntity<int> { /* ... */ }\npublic class EmployeeDesignation : BaseEntity<int> { /* ... */ }\npublic class BusinessUnit : BaseEntity<int> { /* ... */ }\npublic class EmployeeBusinessUnit : BaseEntity<int> { /* ... */ }\npublic class EmployeeTier : BaseEntity<int> { /* ... */ }\npublic class Location : BaseEntity<int> { /* ... */ }\npublic class EmployeeLocation : BaseEntity<int> { /* ... */ }\n\n\n// --- Dummy ILogger ---\n// Added so the script can compile. The server should inject a real logger.\nnamespace Microsoft.Extensions.Logging\n{\n    public interface ILogger {\n        void LogError(Exception? exception, string? message, params object?[] args);\n        void LogInformation(string? message, params object?[] args);\n        void LogWarning(string? message, params object?[] args);\n        // Add other methods if needed by your logs\n    }\n}\n// --- End Dummy ILogger ---\n\n\n// --- Logic Class ---\n\npublic class SyncEmployeeLocationHttpTrigger\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string EmployeeRepoUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/EmployeeRepoUrl\";\n    private const string LocationRepoUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/LocationRepoUrl\";\n    private const string EmployeeLocationRepoUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/reps/EmployeeLocationRepoUrl\";\n    private const string DomainName = \"virtusa.com\";\n\n    // Using Newtonsoft.Json settings for consistency with mainFunction\n    private static readonly JsonSerializerSettings jsonSettings = new JsonSerializerSettings\n    {\n        ContractResolver = new Newtonsoft.Json.Serialization.DefaultContractResolver\n        {\n            NamingStrategy = new Newtonsoft.Json.Serialization.CamelCaseNamingStrategy()\n        },\n        NullValueHandling = NullValueHandling.Ignore\n    };\n\n    private ILogger? _log;\n\n    // --- DB Interaction Method (Using Newtonsoft.Json) ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload, string apiUrl)\n    {\n        var requestBody = new { payload, operationName };\n        string jsonRequestBody = \"{}\";\n        try\n        {\n            jsonRequestBody = JsonConvert.SerializeObject(requestBody, jsonSettings);\n        }\n        catch (JsonException e)\n        {\n             _log?.LogError(e, \"JSON Serialization Error (Request - {OperationName})\", operationName);\n             throw; \n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            HttpResponseMessage response = await httpClient.PostAsync(apiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                 _log?.LogWarning(\"HTTP Request Error ({OperationName}) to {ApiUrl}: {StatusCode} | Response: {ResponseContent}\", operationName, apiUrl, response.StatusCode, responseContent);\n                 response.EnsureSuccessStatusCode(); // Will throw HttpRequestException\n            }\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\")\n            {\n                return default;\n            }\n\n            try\n            {\n                 JToken token = JToken.Parse(responseContent);\n                 JToken? resultToken = token.SelectToken(\"result\") ?? token.SelectToken(\"data\");\n\n                 if (resultToken != null && resultToken.Type != JTokenType.Null)\n                 {\n                     return resultToken.ToObject<TResponse>();\n                 }\n                 else if (token.Type != JTokenType.Null)\n                 {\n                    return JsonConvert.DeserializeObject<TResponse>(responseContent, jsonSettings);\n                 }\n                 else\n                 {\n                    return default;\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                _log?.LogError(jsonEx, \"JSON Deserialization Error ({OperationName}) | Response: {ResponseContent}\", operationName, responseContent);\n                return default;\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            _log?.LogError(e, \"HTTP Request Error ({OperationName}) to {ApiUrl}\", operationName, apiUrl);\n            throw;\n        }\n        catch (Exception e)\n        {\n             _log?.LogError(e, \"An unexpected error occurred in CallDb ({OperationName}) to {ApiUrl}\", operationName, apiUrl);\n             throw;\n        }\n    }\n    \n    // --- Employee Location Service Logic (Refactored) ---\n\n     public async Task AddOrUpdateAsync(EmployeeLocation employeeLocation)\n     {\n        ValidateParameters(employeeLocation);\n\n        // ⭐ REPO -> CallDb\n        var employeePayload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeLocation.EmployeeNumber } };\n        var employee = await CallDb<Employee>(\"FirstOrDefaultAsync\", employeePayload, EmployeeRepoUrl).ConfigureAwait(false);\n        if (employee == null)\n        {\n            throw new Exception($\"No employee found with EmployeeNumber= {employeeLocation.EmployeeNumber}\"); // Use general exception\n        }\n\n        // ⭐ REPO -> CallDb\n        var locationPayload = new Dictionary<string, object> { { \"ReferenceNumber\", employeeLocation.ReferenceNumber } };\n        var location = await CallDb<Location>(\"FirstOrDefaultAsync\", locationPayload, LocationRepoUrl).ConfigureAwait(false);\n        if (location == null)\n        {\n            throw new Exception($\"No location found with referencenumber= {employeeLocation.ReferenceNumber}\"); // Use general exception\n        }\n\n        // ⭐ REPO -> CallDb\n        var empLocPayload = new Dictionary<string, object> { { \"EmployeeId\", employee.EmployeeId } };\n        var currentEmployeeLocation = await CallDb<EmployeeLocation>(\"FirstOrDefaultAsync\", empLocPayload, EmployeeLocationRepoUrl).ConfigureAwait(false);\n        \n        if (currentEmployeeLocation == null)\n        {\n            employeeLocation.LocationId = location.Id;\n            employeeLocation.EmployeeId = employee.EmployeeId;\n            // ⭐ REPO -> CallDb\n            await CallDb<EmployeeLocation>(\"AddAsync\", employeeLocation, EmployeeLocationRepoUrl).ConfigureAwait(false);\n        }\n        else\n        {\n            currentEmployeeLocation.LocationId = location.Id;\n            // ⭐ REPO -> CallDb\n            await CallDb<object>(\"UpdateAsync\", currentEmployeeLocation, EmployeeLocationRepoUrl).ConfigureAwait(false);\n        }\n    }\n\n    private void ValidateParameters(EmployeeLocation employeeLocation)\n    {\n        if (string.IsNullOrEmpty(employeeLocation.EmployeeNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeLocation.EmployeeNumber));\n        }\n        if (string.IsNullOrEmpty(employeeLocation.ReferenceNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(employeeLocation.ReferenceNumber));\n        }\n    }\n\n    // --- Main Script Function (Refactored) ---\n    public async Task<IDictionary<string, object>> mainFunction(string requestBody, ILogger? log = null)\n    {\n        this._log = log; // Set logger\n        try\n        {\n            var employeeLocation = JsonConvert.DeserializeObject<EmployeeLocation>(requestBody, jsonSettings);\n            if (employeeLocation == null)\n            {\n                // ⭐ Return map\n                return new Dictionary<string, object> {\n                    { \"statusCode\", 400 },\n                    { \"body\", new { message = \"Invalid input values\" } }\n                };\n            }\n\n            // ⭐ Call this.AddOrUpdateAsync\n            await this.AddOrUpdateAsync(employeeLocation).ConfigureAwait(false);\n            \n            // ⭐ Return map\n            return new Dictionary<string, object> {\n                { \"statusCode\", 200 },\n                { \"body\", new { message = \"Successfully processed\" } }\n            };\n        }\n        catch (ArgumentException e)\n        {\n            _log?.LogError(e, \"Validation error: {Message}\", e.Message);\n            return new Dictionary<string, object> {\n                { \"statusCode\", 400 },\n                { \"body\", new { message = $\"Invalid input: {e.Message}\" } }\n            };\n        }\n        catch (Exception e)\n        {\n            _log?.LogError(e, \"An unhandled exception occurred: {Message}\", e.Message);\n            return new Dictionary<string, object> {\n                { \"statusCode\", 500 },\n                { \"body\", new { message = $\"Internal server error: {e.Message}\" } }\n            };\n        }\n    }\n}\n\n// --- Script Execution ---\n\nstring requestBody = @\"{\n  \"\"EmployeeNumber\"\": \"\"8026400\"\",\n  \"\"ReferenceNumber\"\": \"\"GB\"\"\n}\";\n\nvar processor = new SyncEmployeeLocationHttpTrigger();\nvar resultObject = await processor.mainFunction(requestBody, null); // Pass null for logger\n\nresultObject // Return value for the script\n",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_xl1Vt-1",
			"id":"n_b3ShU",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_200",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39713,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":4
}