{
	"appsUsed":[
		
	],
	"createdTime":1761401519640,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_8rgTP",
			"priority":0,
			"skip":false,
			"toNodeId":"n_5mGrN",
			"type":"next"
		},
		{
			"fromNodeId":"n_5mGrN",
			"priority":0,
			"skip":false,
			"toNodeId":"n_zYEag",
			"type":"next"
		}
	],
	"id":"68fcdaaf9e1ba9260c2ad20c",
	"lastModifiedBy":39713,
	"lcName":"syncemployeesshttptrigger",
	"modifiedTime":1761747136848,
	"name":"SyncEmployeessHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1149,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TpF1v-1",
			"id":"n_8rgTP",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"ok",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":217,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_TpF1v-1",
			"id":"n_5mGrN",
			"index":2,
			"inputs":{
				"code":"using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing RaveScheduler.ApplicationCore.Entities;\nusing RaveScheduler.ApplicationCore.Interfaces;\nusing System.Web.Http;\n\n\npublic class BaseEntity\n    {\n        public int Id { get; set; }\n    }\npublic class Category : BaseEntity\n    {\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string ImageUrl { get; set; }\n        public bool IsActive { get; set; }\n        public IReadOnlyCollection<Rave> Raves { get; set; }\n        public IReadOnlyCollection<EmployeeCategory> EmployeeCategories { get; set; }\n    }\npublic class Employee : BaseEntity\n    {\n        public long EmployeeId { get; set; }\n        public string UserName { get; set; }\n        public string FullName { get; set; }\n        public string Email { get; set; }\n        public long? ManagerId { get; set; }\n        public string ManagerEmployeeNumber { get; set; }\n        public bool IsActive { get; set; }\n        public string EmployeeNumber { get; set; }\n        public string Status { get; set; }\n        public Employee Manager { get; set; }\n\n        public string Designation { get; set; }\n        public IReadOnlyCollection<Rave> Raves { get; set; }\n        public IReadOnlyCollection<EmployeeCategory> EmployeeCategories { get; set; }\n        private readonly List<RaveEmployee> _raveEmployees = new List<RaveEmployee>();\n        public IReadOnlyCollection<RaveEmployee> RaveEmployees => _raveEmployees.AsReadOnly();\n\n        public void AddRaveEmployee(RaveEmployee raveEmployee)\n        {\n            _raveEmployees.Add(raveEmployee);\n        }\n    }\n\n public class EmployeeCategory : BaseEntity\n    {\n        public long EmployeeId { get; set; }\n        public int CategoryId { get; set; }\n        public Employee Employee { get; set; }\n        public Category Category { get; set; }\n    }\n    public class Rave : BaseEntity\n    {\n        public long SenderEmployeeId { get; set; }\n        public string Content { get; set; }\n        public int CategoryId { get; set; }\n        public DateTime SentDate { get; set; }\n        public Employee Sender { get; set; }\n        public Category Category { get; set; }\n        private readonly List<RaveEmployee> _raveEmployees = new List<RaveEmployee>();\n        public IReadOnlyCollection<RaveEmployee> RaveEmployees => _raveEmployees.AsReadOnly();\n\n        public void AddRaveEmployee(RaveEmployee raveEmployee)\n        {\n            _raveEmployees.Add(raveEmployee);\n        }\n        public void AddRaveEmployee(string userName)\n        {\n            _raveEmployees.Add(new RaveEmployee { Employee = new Employee { UserName = userName } });\n        }\n    }\n    public class RaveEmployee : BaseEntity\n    {\n        public int RaveId { get; set; }\n        public long EmployeeId { get; set; }\n        public bool IsThanked { get; set; }\n        public Rave Rave { get; set; }\n        public Employee Employee { get; set; }\n    }\n\n\n\npublic class EmployeeProcessor\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeEndpoint\";\n    private const string DomainName = \"virtusa.com\";\n\n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n        // Consider adding other options like handling null values if needed\n        // DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull\n    };\n\n    // --- DB Interaction Method ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\"; // Default to empty object\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n             Console.WriteLine($\"JSON Serialization Error (Request - {operationName}): {e.Message} | Payload: {payload}\");\n             throw; // Re-throw serialization errors immediately\n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            // Console.WriteLine($\"DEBUG: Sending {operationName} with payload: {jsonRequestBody}\"); // Optional debug log\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n            // Console.WriteLine($\"DEBUG: Received status {response.StatusCode}, content: {responseContent}\"); // Optional debug log\n\n            // Check for non-success status codes specifically\n            if (!response.IsSuccessStatusCode)\n            {\n                 Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n                 // Consider how to handle specific non-success codes (e.g., 404 Not Found might return default)\n                 // For now, throw an exception for any non-success to indicate failure clearly.\n                 response.EnsureSuccessStatusCode(); // This will throw HttpRequestException\n            }\n\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") // Treat empty JSON object as null/default\n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         // Check if the target type is primitive (like int, bool, long) and the JSON element reflects that\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             // Attempt direct deserialization for primitives/string from the element\n                             try {\n                                return resultElement.Deserialize<TResponse>(jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                                return default;\n                             }\n                         }\n                         else // Assume complex object\n                         {\n                            return resultElement.Deserialize<TResponse>(jsonOptions);\n                         }\n                     }\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                        // Check for primitives at the root as well\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             try {\n                                return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                                return default;\n                             }\n                         }\n                         else\n                         {\n                            return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                         }\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n                return default; // Return default on deserialization failure\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n            // Depending on the operation, maybe return default or false instead of throwing\n            // For now, re-throwing signals a clear failure.\n            throw;\n        }\n        // Removed redundant JsonException catch here, handled in request serialization try-catch\n        catch (Exception e) // Catch unexpected errors\n        {\n             Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n             throw;\n        }\n    }\n\n        /// <summary>\n        ///   <para>Add new employee and update existing employee</para>\n        ///   <para>This will not add inactive employees and this will not update details of the inactive employees</para>\n        ///   <para>Additinaly add manager when not exist</para>\n        /// </summary>\n        /// <param name=\"employee\">The employee.</param>\n        public async Task AddOrUpdateAsync(Employee employee)\n        {\n            // should not process when employeeNumber is empty\n            ValidateEmployeeNumber(employee.EmployeeNumber);\n\n            if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n            {\n                // provided manager should exist prior to add or update employee\n                await ProcessManagerAsync(employee.ManagerEmployeeNumber);\n            }\n\n            //adding manager id to the employee object\n            await AddManagerIdAsync(employee);\n\n            // adding employee when employee not exist, updating employee if exist\n            await ProcessEmployeeAsync(employee);\n        }\n\n        /// <summary>\n        /// Add manager id to the employee\n        /// </summary>\n        /// <param name=\"employee\">employee</param>\n        /// <returns></returns>\n        private async Task AddManagerIdAsync(Employee employee)\n        {\n            if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n            {\n                var manager = await GetEmployeeAsync(employee.ManagerEmployeeNumber).ConfigureAwait(false);\n                employee.ManagerId = manager?.EmployeeId;\n            }\n        }\n\n        /// <summary>Delete employee when exist</summary>\n        /// <param name=\"employeeNumber\">Employee Number of the user.</param>\n        /// <returns>\n        ///   <br />\n        /// </returns>\n        public async Task DeleteAsync(string employeeNumber)\n        {\n            // should not process when employeeNumber is empty\n            ValidateEmployeeNumber(employeeNumber);\n\n            var isExistingEmployee = await IsExistingEmployee(employeeNumber);\n\n            if (isExistingEmployee)\n            {\n                var existingEmployee = await GetEmployeeAsync(employeeNumber);\n                var reporteesSpecification = new ReporteesByEmployeeNumberSpecification(employeeNumber);\n                var reportees = await _employeeRepository.ListAsync(reporteesSpecification).ConfigureAwait(false);\n\n                foreach (var reportee in reportees)\n                {\n                    reportee.ManagerId = null;\n                    await _employeeRepository.UpdateAsync(reportee).ConfigureAwait(false);\n                }\n\n                await _employeeRepository.DeleteAsync(existingEmployee).ConfigureAwait(false);\n            }\n        }\n\n        private async Task ProcessManagerAsync(string managerEmployeeNumber)\n        {\n            // check whether manager is already exist\n            bool isExistingEmployee = await IsExistingEmployee(managerEmployeeNumber);\n            if (!isExistingEmployee)\n            {\n                // if manager not exist, add manager as inactive user with EmployeeNumber\n                var manager = new Employee\n                {\n                    EmployeeNumber = managerEmployeeNumber,\n                    UserName = managerEmployeeNumber,\n                    IsActive = false\n                };\n\n                // format user with the username\n                await AddEmployeeAsync(manager).ConfigureAwait(false);\n            }\n        }\n\n        private async Task ProcessEmployeeAsync(Employee employee)\n        {\n            // check whether user is already exist\n            bool isExistingEmployee = await IsExistingEmployee(employee.EmployeeNumber);\n            if (!isExistingEmployee)\n            {\n                await AddEmployeeAsync(employee).ConfigureAwait(false);\n            }\n            else\n            {\n                // get existing employee\n                var existingEmployee = await GetEmployeeAsync(employee.EmployeeNumber).ConfigureAwait(false);\n\n                // update details of the active employee\n                if (employee.IsActive)\n                {\n                    FormatEmployee(employee);\n                    existingEmployee.FullName = employee.FullName;\n                    existingEmployee.Email = employee.Email;\n                    existingEmployee.UserName = employee.UserName;\n                    existingEmployee.ManagerId = employee.ManagerId;\n\n                    existingEmployee.IsActive = employee.IsActive;\n                    await _employeeRepository.UpdateAsync(existingEmployee).ConfigureAwait(false);\n                }\n                else\n                {\n                    existingEmployee.Email = employee.Email;\n                    existingEmployee.UserName = employee.UserName;\n\n                    existingEmployee.IsActive = employee.IsActive;\n                    await _employeeRepository.UpdateAsync(existingEmployee).ConfigureAwait(false);\n                }\n            }\n        }\n\n        private async Task AddEmployeeAsync(Employee employee)\n        {\n            FormatEmployee(employee);\n            await _employeeRepository.AddAsync(employee).ConfigureAwait(false);\n        }\n\n\n        /// <summary>Format missing information of the user.</summary>\n        /// <param name=\"employee\">The employee.</param>\n        private void FormatEmployee(Employee employee)\n        {\n            employee.FullName = string.IsNullOrEmpty(employee.FullName) ? employee.EmployeeNumber : employee.FullName;\n            employee.Email = string.IsNullOrEmpty(employee.Email) ? $\"{employee.EmployeeNumber}@{DomainName}\" : employee.Email;\n        }\n\n        private async Task<Employee> GetEmployeeAsync(string employeeNumber)\n        {\n            var specification = new EmployeeByEmployeeNumberSpecification(employeeNumber);\n            return await _employeeRepository.FirstOrDefaultAsync(specification).ConfigureAwait(false);\n        }\n\n        /// <summary>Validate Employee Number of the user to check whether it is a null or empty value.</summary>\n        /// <param name=\"employeeNumber\">Employee Number of the user.</param>\n        /// <exception cref=\"ArgumentException\">EmployeeNumber</exception>\n        private void ValidateEmployeeNumber(string employeeNumber)\n        {\n            if (string.IsNullOrEmpty(employeeNumber))\n            {\n                throw new ArgumentException(\"Value cannot be null or empty\", nameof(Employee.EmployeeNumber));\n            }\n        }\n\n        private async Task<bool> IsExistingEmployee(string employeeNumber)\n        {\n            var specification = new EmployeeByEmployeeNumberSpecification(employeeNumber);\n            int employeeCount = await _employeeRepository.CountAsync(specification).ConfigureAwait(false);\n            return employeeCount == 1;\n        }\n\n\n\n\n    // --- Main Script Function ---\n   public async Task<IDictionary<string, object>> mainFunction(string requestBody)\n    {\n        // this._log = log; // Assign the logger to the class instance\n        \n            var employees = JsonConvert.DeserializeObject<IEnumerable<Employee>>(requestBody);\n            if (employees == null || !employees.Any())\n            {\n                return new BadRequestObjectResult(\"Please pass valid employees to sync\");\n            }\n\n            var failedRecords = new List<string>();\n\n            foreach (var employee in employees)\n            {\n                try\n                {\n                    if (string.IsNullOrEmpty(employee.EmployeeNumber))\n                    {\n                        log.LogError(\"Invalid Employee Number\");\n                        failedRecords.Add(employee.EmployeeNumber);\n                        continue;\n                    }\n\n                    if (string.IsNullOrEmpty(employee.Status))\n                    {\n                        log.LogError(\"Employee Status is empty\");\n                        failedRecords.Add(employee.UserName);\n                    }\n                    else\n                    {\n                        if (employee.Status == \"Cancelled\")\n                        {\n                            await DeleteAsync(employee.EmployeeNumber).ConfigureAwait(false);\n                        }\n                        else\n                        {\n                            await AddOrUpdateAsync(new Employee\n                            {\n                                UserName = employee.UserName,\n                                Email = employee.Email,\n                                FullName = employee.FullName,\n                                ManagerEmployeeNumber = employee.ManagerEmployeeNumber,\n                                EmployeeNumber = employee.EmployeeNumber,\n                                IsActive = employee.Status == \"Active\"\n                            }).ConfigureAwait(false);\n                        }\n                    }\n                }\n                catch (InvalidOperationException invOpEx)\n                {\n                    log.LogError(invOpEx, $\"Invalid operation occurred for Employee {employee.EmployeeNumber} - {invOpEx.Message}\");\n                    failedRecords.Add(employee.EmployeeNumber);\n                    // Perhaps handle this differently than a database error.\n                }\n                catch (ArgumentNullException e)\n                {\n                    log.LogError(e, $\"Invalid user detail - {e.ParamName}\");\n                    failedRecords.Add(employee.EmployeeNumber);\n                }\n                catch (Exception e) when (e is not OutOfMemoryException and not StackOverflowException)\n                {\n                    log.LogError(e, $\"Specific error occurred for Employee {employee.EmployeeNumber} - {e.Message}\");\n                    failedRecords.Add(employee.EmployeeNumber);\n                }\n            }\n\n            if (employees.Count() == failedRecords.Count)\n            {\n                return new InternalServerErrorResult();\n            }\n\n            return new OkObjectResult(new\n            {\n                message = $\"Successfully processed {employees.Count() - failedRecords.Count} employees\",\n                failed = failedRecords\n            });\n       \n    }\n}\n\nstring requestBody = @\"{\n    \"\"Email\"\": \"\"amdissanayaka@virtusa.com\"\",\n    \"\"EmployeeNumber\"\": \"\"8083721\"\",\n    \"\"FullName\"\": \"\"Amila Dissanayaka Test\"\",\n    \"\"ManagerEmployeeNumber\"\": \"\"5002615\"\",\n    \"\"Status\"\": \"\"Active\"\",\n    \"\"UserName\"\": \"\"amdissanayaka\"\"\n}\";\n\n\nvar processor = new EmployeeProcessor();\n// 'await' must be used in an async context, assuming the script host handles top-level await\nvar resultObject = await processor.mainFunction(requestBody);\nresultObject",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1121,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TpF1v-1",
			"id":"n_zYEag",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_ok",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39715,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":10
}