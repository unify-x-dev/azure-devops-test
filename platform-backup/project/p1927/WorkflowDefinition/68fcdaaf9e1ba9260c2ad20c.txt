{
	"appsUsed":[
		
	],
	"createdTime":1761401519640,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_8rgTP",
			"priority":0,
			"skip":false,
			"toNodeId":"n_5mGrN",
			"type":"next"
		},
		{
			"fromNodeId":"n_5mGrN",
			"priority":0,
			"skip":false,
			"toNodeId":"n_zYEag",
			"type":"next"
		}
	],
	"id":"68fcdaaf9e1ba9260c2ad20c",
	"lastModifiedBy":39715,
	"lcName":"syncemployeesshttptrigger",
	"modifiedTime":1761743542690,
	"name":"SyncEmployeessHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1149,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TpF1v-1",
			"id":"n_8rgTP",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"name":"ok",
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":217,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_TpF1v-1",
			"id":"n_5mGrN",
			"index":2,
			"inputs":{
				"code":"using Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Azure.WebJobs;\nusing Microsoft.Azure.WebJobs.Extensions.Http;\nusing Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing RaveScheduler.ApplicationCore.Entities;\nusing RaveScheduler.ApplicationCore.Interfaces;\nusing System.Web.Http;\n\n\n\nvoid mainFunction (string requestBody) {\n    \n    IEnumerable<Employee>? employees = null;\n    try {\n        // Use Newtonsoft.Json as specified in your original snippet\n        employees = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Employee>>(requestBody, jsonOptions);\n    } catch (JsonException ex) {\n        //  _log?.LogError(ex, \"Failed to deserialize requestBody into IEnumerable<Employee>\");\n         return new Dictionary<string, object> {\n             { \"statusCode\", 400 },\n             { \"body\", $\"Invalid JSON input for employee list: {ex.Message}\" }\n         };\n    }    \n\n    if (employees == null || !employees.Any())\n    {\n        return new Dictionary<string, object> { \n            { \"statusCode\", 400 },\n            { \"body\", \"Please pass valid employees to sync\" }\n        };\n    }\n\n    var failedRecords = new List<string>();\n    foreach (var employee in employees)\n    {\n        try\n        {\n            if (string.IsNullOrEmpty(employee.EmployeeNumber))\n            {\n                // log.LogError(\"Invalid Employee Number\");\n                failedRecords.Add(employee.EmployeeNumber);\n                continue;\n            }\n            if (string.IsNullOrEmpty(employee.Status))\n            {\n                // log.LogError(\"Employee Status is empty\");\n                failedRecords.Add(employee.UserName);\n                continue;\n            }\n            else\n            {\n                if (employee.Status == \"Cancelled\")\n                {\n                    await _employeeService.DeleteAsync(employee.EmployeeNumber).ConfigureAwait(false);\n                }\n                else\n                {\n                    await _employeeService.AddOrUpdateAsync(new Employee\n                    {\n                        UserName = employee.UserName,\n                        Email = employee.Email,\n                        FullName = employee.FullName,\n                        ManagerEmployeeNumber = employee.ManagerEmployeeNumber,\n                        EmployeeNumber = employee.EmployeeNumber,\n                        IsActive = employee.Status == \"Active\"\n                    }).ConfigureAwait(false);\n                }\n            }\n        }\n        catch (InvalidOperationException invOpEx)\n        {\n            log.LogError(invOpEx, $\"Invalid operation occurred for Employee {employee.EmployeeNumber} - {invOpEx.Message}\");\n            failedRecords.Add(employee.EmployeeNumber);\n            // Perhaps handle this differently than a database error.\n        }\n        catch (ArgumentNullException e)\n        {\n            log.LogError(e, $\"Invalid user detail - {e.ParamName}\");\n            failedRecords.Add(employee.EmployeeNumber);\n        }\n        catch (Exception e) when (e is not OutOfMemoryException and not StackOverflowException)\n        {\n            log.LogError(e, $\"Specific error occurred for Employee {employee.EmployeeNumber} - {e.Message}\");\n            failedRecords.Add(employee.EmployeeNumber);\n        }\n    }\n    if (employees.Count() == failedRecords.Count)\n    {\n        return new InternalServerErrorResult();\n    }\n    return new OkObjectResult(new\n    {\n        message = $\"Successfully processed {employees.Count() - failedRecords.Count} employees\",\n        failed = failedRecords\n    });\n}\n\n\npublic class EmployeeProcessor\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeEndpoint\";\n    private const string DomainName = \"virtusa.com\";\n\n    private static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n        // Consider adding other options like handling null values if needed\n        // DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull\n    };\n\n    // --- DB Interaction Method ---\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\"; // Default to empty object\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n             Console.WriteLine($\"JSON Serialization Error (Request - {operationName}): {e.Message} | Payload: {payload}\");\n             throw; // Re-throw serialization errors immediately\n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            // Console.WriteLine($\"DEBUG: Sending {operationName} with payload: {jsonRequestBody}\"); // Optional debug log\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n            // Console.WriteLine($\"DEBUG: Received status {response.StatusCode}, content: {responseContent}\"); // Optional debug log\n\n            // Check for non-success status codes specifically\n            if (!response.IsSuccessStatusCode)\n            {\n                 Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n                 // Consider how to handle specific non-success codes (e.g., 404 Not Found might return default)\n                 // For now, throw an exception for any non-success to indicate failure clearly.\n                 response.EnsureSuccessStatusCode(); // This will throw HttpRequestException\n            }\n\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") // Treat empty JSON object as null/default\n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         // Check if the target type is primitive (like int, bool, long) and the JSON element reflects that\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             // Attempt direct deserialization for primitives/string from the element\n                             try {\n                                return resultElement.Deserialize<TResponse>(jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                                return default;\n                             }\n                         }\n                         else // Assume complex object\n                         {\n                            return resultElement.Deserialize<TResponse>(jsonOptions);\n                         }\n                     }\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                        // Check for primitives at the root as well\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             try {\n                                return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                                return default;\n                             }\n                         }\n                         else\n                         {\n                            return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                         }\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n                return default; // Return default on deserialization failure\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n            // Depending on the operation, maybe return default or false instead of throwing\n            // For now, re-throwing signals a clear failure.\n            throw;\n        }\n        // Removed redundant JsonException catch here, handled in request serialization try-catch\n        catch (Exception e) // Catch unexpected errors\n        {\n             Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n             throw;\n        }\n    }\n\n    // --- Employee Service Logic ---\n\n    public async Task AddOrUpdateAsync(Employee employee)\n    {\n        if (employee == null || string.IsNullOrEmpty(employee.EmployeeNumber))\n        {\n             throw new ArgumentException(\"Employee object or EmployeeNumber cannot be null/empty for AddOrUpdate.\");\n        }\n        ValidateEmployeeNumber(employee.EmployeeNumber); // Still validate format if needed\n\n        if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n        {\n            // Ensure manager exists or create inactive stub\n            await ProcessManagerAsync(employee.ManagerEmployeeNumber);\n        }\n\n        // Set ManagerId based on ManagerEmployeeNumber\n        await AddManagerIdAsync(employee);\n        // Process the employee (add or update)\n        await ProcessEmployeeAsync(employee);\n    }\n\n    private async Task AddManagerIdAsync(Employee employee)\n    {\n         if (employee == null) return; // Safety check\n        // Reset ManagerId initially\n        employee.ManagerId = null;\n        if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n        {\n            var manager = await GetEmployeeAsync(employee.ManagerEmployeeNumber).ConfigureAwait(false);\n            employee.ManagerId = manager?.EmployeeId; // Assign if manager found, otherwise stays null\n        }\n    }\n\n    public async Task DeleteAsync(string employeeNumber)\n    {\n        ValidateEmployeeNumber(employeeNumber);\n\n        var isExistingEmployee = await IsExistingEmployee(employeeNumber);\n\n        // var existingEmployee = await GetEmployeeAsync(employeeNumber); // Check existence by trying to get it\n\n        if (isExistingEmployee)\n        {\n            // Get reportees by querying where ManagerEmployeeNumber matches\n            // Assuming payload requires a \"Filter\" or similar structure\n            var reporteePayload = new Dictionary<string, object>\n            {\n                { \"Filter\", new Dictionary<string, object> { { \"ManagerEmployeeNumber\", employeeNumber } } }\n                // Adjust payload structure based on API expectation for ListAsync filters\n            };\n            List<Employee>? reportees = await CallDb<List<Employee>>(\"ListAsync\", reporteePayload);\n\n            if (reportees != null)\n            {\n                foreach (var reportee in reportees)\n                {\n                    reportee.ManagerId = null;\n                    reportee.ManagerEmployeeNumber = null; // Also clear ManagerEmployeeNumber link\n                    // Update each reportee\n                    await CallDb<object>(\"UpdateAsync\", reportee);\n                }\n            }\n\n            // Delete the original employee\n            // Payload might just need the key, or the full object. Assuming key is sufficient.\n            var deletePayload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n            await CallDb<object>(\"DeleteAsync\", deletePayload);\n        }\n         else\n         {\n              Console.WriteLine($\"Employee {employeeNumber} not found. Delete operation skipped.\");\n         }\n    }\n\n    private async Task ProcessManagerAsync(string managerEmployeeNumber)\n    {\n         if (string.IsNullOrEmpty(managerEmployeeNumber)) return; // No manager to process\n\n        bool isExistingEmployee = await IsExistingEmployee(managerEmployeeNumber);\n        if (!isExistingEmployee)\n        {\n            Console.WriteLine($\"Manager {managerEmployeeNumber} not found, creating inactive stub.\");\n            var manager = new Employee\n            {\n                // UserName might need to be derived or handled differently for stubs\n                UserName = managerEmployeeNumber, // Placeholder UserName\n                EmployeeNumber = managerEmployeeNumber,\n                IsActive = false // Add as inactive initially\n            };\n            FormatEmployee(manager); // Ensure Email/FullName are set minimally\n            await AddEmployeeAsync(manager).ConfigureAwait(false);\n        }\n    }\n\n    private async Task ProcessEmployeeAsync(Employee employee)\n    {\n         if (employee == null || string.IsNullOrEmpty(employee.EmployeeNumber)) return; // Safety check\n\n        var existingEmployee = await GetEmployeeAsync(employee.EmployeeNumber).ConfigureAwait(false);\n\n        if (existingEmployee == null) // Employee doesn't exist, Add\n        {\n            Console.WriteLine($\"Employee {employee.EmployeeNumber} not found, adding new record.\");\n            FormatEmployee(employee); // Ensure derived fields are set\n            employee.IsActive = employee.Status == \"Active\"; // Ensure IsActive matches Status\n            await AddEmployeeAsync(employee).ConfigureAwait(false);\n        }\n        else // Employee exists, Update\n        {\n             Console.WriteLine($\"Employee {employee.EmployeeNumber} found, updating record.\");\n            // Merge updates onto existingEmployee\n            FormatEmployee(employee); // Format incoming data first (for FullName/Email if needed)\n\n            // Update only specific fields based on incoming data\n            existingEmployee.FullName = employee.FullName ?? existingEmployee.FullName; // Keep existing if null\n            existingEmployee.Email = employee.Email ?? existingEmployee.Email; // Keep existing if null\n            existingEmployee.UserName = employee.UserName ?? existingEmployee.UserName; // Keep existing if null\n            existingEmployee.ManagerId = employee.ManagerId; // Update ManagerId (set in AddManagerIdAsync)\n            existingEmployee.ManagerEmployeeNumber = employee.ManagerEmployeeNumber; // Update Manager link\n            existingEmployee.IsActive = employee.Status == \"Active\"; // Update IsActive based on incoming Status\n            existingEmployee.Status = employee.Status; // Update Status field itself\n\n            // TODO: Consider how to handle other fields like Designation, Account etc.\n            // If they are part of the input 'employee', should they overwrite existingEmployee's values?\n            // existingEmployee.EmployeeDesignation = employee.EmployeeDesignation ?? existingEmployee.EmployeeDesignation; // Example\n\n            await CallDb<object>(\"UpdateAsync\", existingEmployee); // Send the merged/updated object\n        }\n    }\n\n    private async Task AddEmployeeAsync(Employee employee)\n    {\n         if (employee == null) return; // Safety check\n        FormatEmployee(employee); // Ensure derived fields are set\n        // Call AddAsync via CallDb, passing the employee object\n        await CallDb<Employee>(\"AddAsync\", employee); // Assuming AddAsync might return the created employee\n    }\n\n    private void FormatEmployee(Employee employee)\n    {\n        if (employee == null) return; // Safety check\n        // Use EmployeeNumber if FullName is missing\n        employee.FullName = string.IsNullOrEmpty(employee.FullName) ? employee.EmployeeNumber : employee.FullName;\n         // Construct email if missing, ensure EmployeeNumber is not null first\n        employee.Email = string.IsNullOrEmpty(employee.Email) && !string.IsNullOrEmpty(employee.EmployeeNumber)\n            ? $\"{employee.EmployeeNumber}@{DomainName}\"\n            : employee.Email;\n    }\n\n    private async Task<Employee?> GetEmployeeAsync(string employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber)) return null; // Cannot get employee without number\n        // Payload likely needs to specify the key field for lookup\n        var payload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n        // Call FirstOrDefaultAsync via CallDb, expecting an Employee object back\n        return await CallDb<Employee>(\"FirstOrDefaultAsync\", payload);\n    }\n\n    private void ValidateEmployeeNumber(string employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(Employee.EmployeeNumber));\n        }\n        // Add more specific validation if needed (e.g., regex for format)\n    }\n\n    public async Task<bool> IsExistingEmployee(string employeeNumber)\n    {\n         if (string.IsNullOrEmpty(employeeNumber)) return false; // Cannot exist without number\n        // Payload for CountAsync likely needs the filter criteria\n        var payloadMap = new Dictionary<string, object>\n        {\n            { \"EmployeeNumber\", employeeNumber }\n            // Adjust payload based on API expectation for CountAsync filters\n        };\n        try\n        {\n            // Expecting the API to return an integer count\n            int? employeeCount = await CallDb<int>(\"CountAsync\", payloadMap);\n            return employeeCount.HasValue && employeeCount.Value == 1; \n        }\n        catch(Exception ex)\n        {\n            Console.WriteLine($\"Error checking existing employee ({employeeNumber}): {ex.Message}\");\n            return false; // Safest default on error\n        }\n    }\n\n    public async Task<long?> GetEmployeeIdByUsername(string userName)\n    {\n        if (string.IsNullOrEmpty(userName))\n        {\n            return null;\n        }\n        // Payload likely needs to specify the key field for lookup\n        var payload = new Dictionary<string, object> { { \"UserName\", userName } };\n        var employee = await CallDb<Employee>(\"FirstOrDefaultAsync\", payload);\n        return employee?.EmployeeId;\n    }\n\n    // --- Main Script Function ---\n   public async Task<IDictionary<string, object>> mainFunction(string requestBody)\n    {\n        // this._log = log; // Assign the logger to the class instance\n        \n        IEnumerable<Employee>? employees = null;\n        try {\n            // Use Newtonsoft.Json as specified in your original snippet\n            employees = System.Text.Json.JsonSerializer.Deserialize<IEnumerable<Employee>>(requestBody, jsonOptions);\n        } catch (JsonException ex) {\n            //  _log?.LogError(ex, \"Failed to deserialize requestBody into IEnumerable<Employee>\");\n             return new Dictionary<string, object> {\n                 { \"statusCode\", 400 },\n                 { \"body\", $\"Invalid JSON input for employee list: {ex.Message}\" }\n             };\n        }\n\n        if (employees == null || !employees.Any())\n        {\n            return new Dictionary<string, object> { // Replacement for BadRequest\n                { \"statusCode\", 400 },\n                { \"body\", \"Please pass valid employees to sync\" }\n            };\n        }\n\n        var failedRecords = new List<string?>(); // Allow nullable strings\n\n        foreach (var employee in employees)\n        {\n            try\n            {\n                if (string.IsNullOrEmpty(employee.EmployeeNumber))\n                {\n                    // log.LogError(\"Invalid Employee Number\");\n                    failedRecords.Add(employee.EmployeeNumber);\n                    continue; // Skip this employee\n                }\n\n                if (string.IsNullOrEmpty(employee.Status))\n                {\n                    // log.LogError(\"Employee Status is empty\");\n                    failedRecords.Add(employee.UserName);\n                    continue; // Skip this employee\n                }\n\n                // Call the class's own methods (which use CallDb)\n                if (employee.Status == \"Cancelled\")\n                {\n                    // Assuming your EmployeeProcessor has DeleteAsync (which we added in previous steps)\n                    // If not, this needs to be implemented similar to the dlq_processor logic\n                    await this.DeleteAsync(employee.EmployeeNumber);\n                    // _log?.LogWarning(\"DeleteAsync logic not fully implemented in this combined script yet.\");\n                }\n                else\n                {\n                    // Assuming your EmployeeProcessor has AddOrUpdateAsync\n                    // If not, this also needs implementation\n                    await this.AddOrUpdateAsync(employee); \n                    //  _log?.LogWarning(\"AddOrUpdateAsync logic not fully implemented in this combined script yet.\");\n                }\n                 // Mocking success for now as AddOrUpdate/Delete are not fully implemented here\n                 await Task.CompletedTask; \n            }\n            catch (ArgumentNullException e)\n            {\n                // _log?.LogError(e, \"Invalid user detail for EmployeeNumber: {EmployeeNumber} - {ParamName}\", employee.EmployeeNumber ?? \"Unknown\", e.ParamName);\n                failedRecords.Add(employee.EmployeeNumber ?? \"Unknown (ArgumentNull)\");\n            }\n            catch (InvalidOperationException ioe)\n            {\n                // _log?.LogError(ioe, \"Operation not allowed for EmployeeNumber: {EmployeeNumber}\", employee.EmployeeNumber ?? \"Unknown\");\n                failedRecords.Add(employee.EmployeeNumber ?? \"Unknown (InvalidOp)\");\n            }\n            catch (JsonException je)\n            {\n                // _log?.LogError(je, \"JSON error processing EmployeeNumber: {EmployeeNumber}\", employee.EmployeeNumber ?? \"Unknown\");\n                failedRecords.Add(employee.EmployeeNumber ?? \"Unknown (JsonError)\");\n            }\n            catch (Exception ex)\n            {\n                // _log?.LogError(ex, \"Unhandled error processing EmployeeNumber: {EmployeeNumber}\", employee.EmployeeNumber ?? \"Unknown\");\n                failedRecords.Add(employee.EmployeeNumber ?? \"Unknown (Exception)\");\n            }\n        }\n\n        int employeeCount = employees.Count();\n        int successCount = employeeCount - failedRecords.Count;\n\n        if (successCount == 0)\n        {\n            return new Dictionary<string, object> { \n                { \"statusCode\", 500 },\n                { \"body\", new {\n                    message = \"All records failed to process.\",\n                    failedCount = failedRecords.Count,\n                    failedRecords = failedRecords\n                }}\n            };\n        }\n\n        return new Dictionary<string, object> { // Replacement for OkObjectResult\n            { \"statusCode\", 200 }, // Use 207 (Multi-Status) if some failed?\n            { \"body\", new {\n                message = $\"Successfully processed {successCount} of {employeeCount} employees\",\n                successCount = successCount,\n                failedCount = failedRecords.Count,\n                failedRecords = failedRecords\n            }}\n        };\n    }\n}\n\n\nvar processor = new EmployeeProcessor();\n// 'await' must be used in an async context, assuming the script host handles top-level await\nvar resultObject = await processor.mainFunction(requestBody);\nresultObject",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1121,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_TpF1v-1",
			"id":"n_zYEag",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_ok",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39715,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":6
}