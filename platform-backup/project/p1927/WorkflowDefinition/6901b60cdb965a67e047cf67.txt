{
	"appsUsed":[
		
	],
	"createdTime":1761719820549,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_XhbEi",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8rSjZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_8rSjZ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_jH3B7",
			"type":"next"
		}
	],
	"id":"6901b60cdb965a67e047cf67",
	"lastModifiedBy":46217,
	"lcName":"[virtu-empowerreactionssfn]syncemployeehttptrigger",
	"modifiedTime":1761738461315,
	"name":"[virtu-emPowerReactionsSFN]SyncEmployeeHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_XhbEi",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_8rSjZ",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\n// --- Entities and Enums ---\npublic class BaseEntity\n{\n    public long Id { get; set; }\n}\n\npublic class Employee : BaseEntity\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string Email { get; set; }\n    public string FullName { get; set; }\n    public bool IsActive { get; set; }\n    public string Status { get; set; }\n    public Employee Manager { get; set; }\n    public long? ManagerId { get; set; }\n    public string ManagerEmployeeNumber { get; set; }\n}\n\n// --- Mock Service (in-memory persistence) ---\npublic class EmployeeService\n{\n    private readonly List<Employee> _store = new List<Employee>();\n\n    public async Task AddOrUpdateAsync(Employee employee)\n    {\n        await Task.Delay(10); // simulate async call\n        var existing = _store.FirstOrDefault(e => e.EmployeeNumber == employee.EmployeeNumber);\n        if (existing == null)\n        {\n            employee.Id = _store.Count + 1;\n            _store.Add(employee);\n        }\n        else\n        {\n            existing.UserName = employee.UserName;\n            existing.Email = employee.Email;\n            existing.FullName = employee.FullName;\n            existing.ManagerEmployeeNumber = employee.ManagerEmployeeNumber;\n            existing.IsActive = employee.IsActive;\n            existing.Status = employee.Status;\n        }\n    }\n\n    public async Task DeleteAsync(string employeeNumber)\n    {\n        await Task.Delay(10);\n        var emp = _store.FirstOrDefault(e => e.EmployeeNumber == employeeNumber);\n        if (emp != null)\n            _store.Remove(emp);\n    }\n\n    public IEnumerable<Employee> GetAll() => _store;\n}\n\n// --- Serializer options ---\nprivate static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n{\n    PropertyNameCaseInsensitive = true,\n    WriteIndented = true\n};\n\n// --- Core Function ---\npublic async Task<IDictionary<string, object>> mainFunction(string requestBody)\n{\n    var service = new EmployeeService();\n\n    try\n    {\n        Employee employee = JsonSerializer.Deserialize<Employee>(requestBody, jsonOptions);\n\n        if (employee == null)\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid payload: could not deserialize Employee.\" }\n            };\n        }\n\n        if (string.IsNullOrEmpty(employee.EmployeeNumber))\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Invalid Employee Number.\" }\n            };\n        }\n\n        if (string.IsNullOrEmpty(employee.Status))\n        {\n            return new Dictionary<string, object>\n            {\n                { \"statusCode\", 400 },\n                { \"body\", \"Employee Status is required.\" }\n            };\n        }\n\n        // process based on status\n        if (employee.Status.Equals(\"Cancelled\", StringComparison.OrdinalIgnoreCase))\n        {\n            await service.DeleteAsync(employee.EmployeeNumber);\n        }\n        else\n        {\n            employee.IsActive = employee.Status.Equals(\"Active\", StringComparison.OrdinalIgnoreCase);\n            await service.AddOrUpdateAsync(employee);\n        }\n\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 200 },\n            { \"body\", $\"Successfully processed for employee {employee.EmployeeNumber}\" },\n            { \"employees\", service.GetAll().ToList() }\n        };\n    }\n    catch (JsonException ex)\n    {\n        Console.WriteLine($\"JSON Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"Invalid JSON format: {ex.Message}\" }\n        };\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"Error: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", $\"Unexpected error: {ex.Message}\" }\n        };\n    }\n}\n\n// --- Example Test ---\nstring requestBody = @\"{\n  \"\"UserName\"\": \"\"ajay\"\",\n  \"\"Email\"\": \"\"ajay@company.com\"\",\n  \"\"FullName\"\": \"\"Ajay Kumar\"\",\n  \"\"ManagerEmployeeNumber\"\": \"\"M123\"\",\n  \"\"EmployeeNumber\"\": \"\"E123\"\",\n  \"\"Status\"\": \"\"Active\"\"\n}\";\n\nvar result = await mainFunction(requestBody);\nresult",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_jH3B7",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":46217,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":6
}