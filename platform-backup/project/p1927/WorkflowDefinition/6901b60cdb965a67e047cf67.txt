{
	"appsUsed":[
		
	],
	"createdTime":1761719820549,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_XhbEi",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8rSjZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_8rSjZ",
			"priority":0,
			"skip":false,
			"toNodeId":"n_jH3B7",
			"type":"next"
		}
	],
	"id":"6901b60cdb965a67e047cf67",
	"lastModifiedBy":46217,
	"lcName":"[virtu-empowerreactionssfn]syncemployeehttptrigger",
	"modifiedTime":1761745467071,
	"name":"[virtu-emPowerReactionsSFN]SyncEmployeeHttpTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_XhbEi",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_8rSjZ",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\n\npublic class BaseEntity\n{\n    public long Id { get; set; }\n}\n\npublic class Employee : BaseEntity\n{\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public string EmployeeNumber { get; set; }\n    public string Email { get; set; }\n    public string FullName { get; set; }\n    public bool IsActive { get; set; }\n    public string Status { get; set; }\n    public Employee Manager { get; set; }\n    public long? ManagerId { get; set; }\n    public string ManagerEmployeeNumber { get; set; }\n}\n\npublic class EmployeeService\n{\n    private static readonly HttpClient httpClient = new HttpClient();\n    private const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/EmployeeEndpoint\";\n    private const string DomainName = \"virtusa.com\";\n\n    public static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    };\n\n    private async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n    {\n        var requestBody = new\n        {\n            payload = payload,\n            operationName = operationName\n        };\n\n        string jsonRequestBody = \"{}\";\n        try\n        {\n            jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n        }\n        catch (JsonException e)\n        {\n             Console.WriteLine($\"JSON Serialization Error (Request - {operationName}): {e.Message} | Payload: {payload}\");\n             throw;\n        }\n\n        var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n        try\n        {\n            HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n            string responseContent = await response.Content.ReadAsStringAsync();\n\n            if (!response.IsSuccessStatusCode)\n            {\n                 Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n                 response.EnsureSuccessStatusCode();\n            }\n\n\n            if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") \n            {\n                return default;\n            }\n\n            try\n            {\n                 using (JsonDocument document = JsonDocument.Parse(responseContent))\n                 {\n                    JsonElement root = document.RootElement;\n                     if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement)))\n                     {\n                         if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             try {\n                                return resultElement.Deserialize<TResponse>(jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                                return default;\n                             }\n                         }\n                         else\n                         {\n                            return resultElement.Deserialize<TResponse>(jsonOptions);\n                         }\n                     }\n                     else if (root.ValueKind != JsonValueKind.Null)\n                     {\n                         if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                         {\n                             try {\n                                return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                             } catch (JsonException innerEx) {\n                                Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                                return default;\n                             }\n                         }\n                         else\n                         {\n                            return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                         }\n                     }\n                     else\n                     {\n                        return default;\n                     }\n                 }\n            }\n            catch (JsonException jsonEx)\n            {\n                Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n                return default;\n            }\n        }\n        catch (HttpRequestException e)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n            throw;\n        }\n        catch (Exception e)\n        {\n             Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n             throw;\n        }\n    }\n\n    public async Task AddOrUpdateAsync(Employee employee)\n    {\n        ValidateEmployeeNumber(employee.EmployeeNumber);\n\n        if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n        {\n            await ProcessManagerAsync(employee.ManagerEmployeeNumber);\n        }\n\n        await AddManagerIdAsync(employee);\n\n        await ProcessEmployeeAsync(employee);\n    }\n\n    public async Task DeleteAsync(string employeeNumber)\n    {\n        ValidateEmployeeNumber(employeeNumber);\n\n        var isExistingEmployee = await IsExistingEmployee(employeeNumber);\n\n        if (isExistingEmployee)\n        {\n            var existingEmployee = await GetEmployeeAsync(employeeNumber);\n            var reporteesSpecificationPayload = new Dictionary<string, object>\n            {\n                { \"Filter\", new Dictionary<string, object> { { \"ManagerId\", existingEmployee.EmployeeId } } }\n            };\n            List<Employee>? reportees = await CallDb<List<Employee>>(\"ListAsync\", reporteesSpecificationPayload);\n\n            foreach (var reportee in reportees)\n            {\n                reportee.ManagerId = null;\n                await CallDb<object>(\"UpdateAsync\", reportee);\n            }\n\n            var deletePayload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n            await CallDb<object>(\"DeleteAsync\", deletePayload);\n        }\n    }\n\n    private async Task ProcessEmployeeAsync(Employee employee)\n    {\n        bool isExistingEmployee = await IsExistingEmployee(employee.EmployeeNumber);\n        if (!isExistingEmployee)\n        {\n            await AddEmployeeAsync(employee).ConfigureAwait(false);\n        }\n        else\n        {\n            var existingEmployee = await GetEmployeeAsync(employee.EmployeeNumber).ConfigureAwait(false);\n\n            if (employee.IsActive)\n            {\n                FormatEmployee(employee);\n                existingEmployee.FullName = employee.FullName;\n                existingEmployee.Email = employee.Email;\n                existingEmployee.UserName = employee.UserName;\n                existingEmployee.ManagerId = employee.ManagerId;\n                existingEmployee.IsActive = employee.IsActive;\n            }\n            else\n            {\n                existingEmployee.Email = employee.Email;\n                existingEmployee.UserName = employee.UserName;\n                existingEmployee.IsActive = employee.IsActive;\n            }\n\n            await CallDb<object>(\"UpdateAsync\", existingEmployee);\n        }\n    }\n\n    private async Task AddManagerIdAsync(Employee employee)\n    {\n        if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber))\n        {\n            var manager = await GetEmployeeAsync(employee.ManagerEmployeeNumber).ConfigureAwait(false);\n            employee.ManagerId = manager?.EmployeeId;\n        }\n    }\n\n    private async Task ProcessManagerAsync(string managerEmployeeNumber)\n    {\n        bool isExistingEmployee = await IsExistingEmployee(managerEmployeeNumber);\n        if (!isExistingEmployee)\n        {\n            var manager = new Employee\n            {\n                UserName = managerEmployeeNumber,\n                EmployeeNumber = managerEmployeeNumber,\n                IsActive = false\n            };\n\n            await AddEmployeeAsync(manager).ConfigureAwait(false);\n        }\n    }\n\n    private async Task AddEmployeeAsync(Employee employee)\n    {\n        FormatEmployee(employee);\n        await CallDb<Employee>(\"AddAsync\", employee);\n    }\n\n    private void ValidateEmployeeNumber(string employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber))\n        {\n            throw new ArgumentException(\"Value cannot be null or empty\", nameof(Employee.EmployeeNumber));\n        }\n    }\n\n    private void FormatEmployee(Employee employee)\n    {\n        employee.FullName = string.IsNullOrEmpty(employee.FullName) ? employee.EmployeeNumber : employee.FullName;\n        employee.Email = string.IsNullOrEmpty(employee.Email) ? $\"{employee.EmployeeNumber}@{DomainName}\" : employee.Email;\n    }\n\n    private async Task<bool> IsExistingEmployee(string employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber)) return false;\n        var payload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n        int employeeCount = await CallDb<int>(\"CountAsync\", payload);\n        return employeeCount == 1;\n    }\n\n    private async Task<Employee?> GetEmployeeAsync(string employeeNumber)\n    {\n        if (string.IsNullOrEmpty(employeeNumber)) return null;\n        var payload = new Dictionary<string, object> { { \"EmployeeNumber\", employeeNumber } };\n        return await CallDb<Employee>(\"FirstOrDefaultAsync\", payload);\n    }\n}\n\npublic async Task<IDictionary<string, object>> mainFunction(string requestBody)\n{\n    var service = new EmployeeService();\n\n    Employee? employee = null;\n    try {\n        employee = JsonSerializer.Deserialize<Employee>(requestBody, EmployeeService.jsonOptions);\n    } catch (JsonException ex) {\n        Console.WriteLine($\"Error deserializing request body: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", $\"Invalid JSON input: {ex.Message}\" }\n        };\n    }\n\n    if (employee == null)\n    {\n        return new Dictionary<string, object>\n        { { \"statusCode\", 400 }, { \"body\", \"Please pass valid employee to sync.\" } };\n    }\n    if (string.IsNullOrEmpty(employee.EmployeeNumber))\n    {\n        return new Dictionary<string, object>{ { \"statusCode\", 400 }, { \"body\", \"Invalid Employee Number.\" } };\n    }\n    if (string.IsNullOrEmpty(employee.Status))\n    {\n        return new Dictionary<string, object>{ { \"statusCode\", 400 }, { \"body\", \"Employee Status is empty.\" } };\n    } \n\n    try\n    {\n        if (employee.Status.Equals(\"Cancelled\", StringComparison.OrdinalIgnoreCase))\n        {\n            await service.DeleteAsync(employee.EmployeeNumber);\n        }\n        else\n        {\n            employee.IsActive = employee.Status.Equals(\"Active\", StringComparison.OrdinalIgnoreCase);\n            await service.AddOrUpdateAsync(employee);\n        }\n\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 200 },\n            { \"body\", $\"Successfully processed for employee {employee.EmployeeNumber}\" }\n        };\n    }\n    catch (Exception ex)\n    {\n        Console.WriteLine($\"Error during processing employee {employee?.EmployeeNumber ?? \"UNKNOWN\"}: {ex.Message}\");\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 500 },\n            { \"body\", $\"Internal server error processing employee {employee?.EmployeeNumber ?? \"UNKNOWN\"}: {ex.Message}\" }\n        };\n    }\n}\n\n// --- Example Test ---\nstring requestBody = @\"{\n  \"\"UserName\"\": \"\"ajay\"\",\n  \"\"Email\"\": \"\"ajay@company.com\"\",\n  \"\"FullName\"\": \"\"Ajay Kumar\"\",\n  \"\"ManagerEmployeeNumber\"\": \"\"M123\"\",\n  \"\"EmployeeNumber\"\": \"\"E123\"\",\n  \"\"Status\"\": \"\"Active\"\"\n}\";\n\nvar result = await mainFunction(requestBody);\nresult",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_Vznjc-1",
			"id":"n_jH3B7",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":46217,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":13
}