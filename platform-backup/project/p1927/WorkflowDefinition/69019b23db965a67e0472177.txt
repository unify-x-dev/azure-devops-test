{
	"appsUsed":[
		
	],
	"createdTime":1761712931063,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_EFbkU",
			"priority":0,
			"skip":false,
			"toNodeId":"n_qsw1B",
			"type":"next"
		},
		{
			"fromNodeId":"n_qsw1B",
			"priority":0,
			"skip":false,
			"toNodeId":"n_td7mf",
			"type":"next"
		}
	],
	"id":"69019b23db965a67e0472177",
	"lastModifiedBy":46209,
	"lcName":"[azure-function]processsmsnotificationstimertrigger",
	"modifiedTime":1761754811926,
	"name":"[Azure-function]ProcessSmsNotificationsTimerTrigger",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_qqaEc-1",
			"id":"n_EFbkU",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":224,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_qqaEc-1",
			"id":"n_qsw1B",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Threading.Tasks;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\nusing System.Net.Http;\nusing System.Text;\nusing Twilio;\nusing Twilio.Rest.Api.V2010.Account;\nusing Twilio.Types;\n\npublic class BaseEntity\n{\n    public int Id { get; set; }\n}\n\npublic enum NotificationStatus\n{\n    Pending = 1,\n    Sent = 2,\n    Fail = 3,\n    Delivered = 4\n}\n\npublic class SmsNotification : BaseEntity\n{\n    public string MessageBody { get; set; }\n    public DateTime CreatedDate { get; set; }\n    public IEnumerable<SmsRecipient> Recipients { get; set; }\n}\n\npublic class SmsRecipient : BaseEntity\n{\n    public string ContactNumber { get; set; }\n    public string Sid { get; set; }\n    public NotificationStatus Status { get; set; }\n    public SmsNotification Notification { get; set; }\n    public int NotificationId { get; set; }\n}\n\npublic interface ISpecification<T>\n{\n    Expression<Func<T, bool>> Criteria { get; }\n    List<Expression<Func<T, object>>> Includes { get; }\n    //List<string> IncludeStrings { get; }\n    Expression<Func<T, object>> OrderBy { get; }\n    //Expression<Func<T, object>> OrderByDescending { get; }\n    //Expression<Func<T, object>> GroupBy { get; }\n\n    int Take { get; }\n    int Skip { get; }\n    bool IsPagingEnabled { get; }\n}\n\npublic abstract class BaseSpecification<T> : ISpecification<T>\n{\n    protected BaseSpecification(Expression<Func<T, bool>> criteria)\n    {\n        Criteria = criteria;\n    }\n    public Expression<Func<T, bool>> Criteria { get; }\n    public List<Expression<Func<T, object>>> Includes { get; } = new List<Expression<Func<T, object>>>();\n    //public List<string> IncludeStrings { get; } = new List<string>();\n    public Expression<Func<T, object>> OrderBy { get; private set; }\n    //public Expression<Func<T, object>> OrderByDescending { get; private set; }\n    //public Expression<Func<T, object>> GroupBy { get; private set; }\n\n    public int Take { get; private set; }\n    public int Skip { get; private set; }\n    public bool IsPagingEnabled { get; private set; } = false;\n\n    protected virtual void AddInclude(Expression<Func<T, object>> includeExpression)\n    {\n        Includes.Add(includeExpression);\n    }\n    //protected virtual void AddInclude(string includeString)\n    //{\n    //    IncludeStrings.Add(includeString);\n    //}\n    protected virtual void ApplyPaging(int skip, int take)\n    {\n        Skip = skip;\n        Take = take;\n        IsPagingEnabled = true;\n    }\n    protected virtual void ApplyOrderBy(Expression<Func<T, object>> orderByExpression)\n    {\n        OrderBy = orderByExpression;\n    }\n    //protected virtual void ApplyOrderByDescending(Expression<Func<T, object>> orderByDescendingExpression)\n    //{\n    //    OrderByDescending = orderByDescendingExpression;\n    //}\n\n    //protected virtual void ApplyGroupBy(Expression<Func<T, object>> groupByExpression)\n    //{\n    //    GroupBy = groupByExpression;\n    //}\n\n}\n\npublic class SmsNotificationRecipientByStatusSpecification : BaseSpecification<SmsRecipient>\n{\n    public SmsNotificationRecipientByStatusSpecification(int take)\n        : base(r => r.Status == NotificationStatus.Pending)\n    {\n        ApplyPaging(0, take);\n        ApplyOrderBy(r => r.Notification.CreatedDate);\n        AddInclude(r => r.Notification);\n    }\n}\n\nprivate static readonly JsonSerializerOptions jsonOptions = new JsonSerializerOptions\n{\n    PropertyNameCaseInsensitive = true\n    // Consider adding other options like handling null values if needed\n    // DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull\n};\n\nprivate static readonly HttpClient httpClient = new HttpClient();\nprivate const string ApiUrl = \"https://api.qa.unifyapps.com/api-endpoint/VirtusaCollections/NotificationSenderEndpoint\";\nprivate const string DomainName = \"virtusa.com\";\n\n// --- DB Interaction Method ---\nprivate async Task<TResponse?> CallDb<TResponse>(string operationName, object payload)\n{\n    var requestBody = new\n    {\n        payload = payload,\n        operationName = operationName\n    };\n\n    string jsonRequestBody = \"{}\"; // Default to empty object\n    try\n    {\n        jsonRequestBody = JsonSerializer.Serialize(requestBody, jsonOptions);\n    }\n    catch (JsonException e)\n    {\n        Console.WriteLine($\"JSON Serialization Error (Request - {operationName}): {e.Message} | Payload: {payload}\");\n        throw; // Re-throw serialization errors immediately\n    }\n\n    var httpContent = new StringContent(jsonRequestBody, Encoding.UTF8, \"application/json\");\n\n    try\n    {\n        // Console.WriteLine($\"DEBUG: Sending {operationName} with payload: {jsonRequestBody}\"); // Optional debug log\n        HttpResponseMessage response = await httpClient.PostAsync(ApiUrl, httpContent);\n        string responseContent = await response.Content.ReadAsStringAsync();\n        // Console.WriteLine($\"DEBUG: Received status {response.StatusCode}, content: {responseContent}\"); // Optional debug log\n\n        // Check for non-success status codes specifically\n        if (!response.IsSuccessStatusCode)\n        {\n            Console.WriteLine($\"HTTP Request Error ({operationName}): {response.StatusCode} | Response: {responseContent}\");\n            // Consider how to handle specific non-success codes (e.g., 404 Not Found might return default)\n            // For now, throw an exception for any non-success to indicate failure clearly.\n            response.EnsureSuccessStatusCode(); // This will throw HttpRequestException\n        }\n\n\n        if (string.IsNullOrEmpty(responseContent) || responseContent.Trim() == \"{}\") // Treat empty JSON object as null/default\n        {\n            return default;\n        }\n\n        try\n        {\n            using (JsonDocument document = JsonDocument.Parse(responseContent))\n            {\n                JsonElement root = document.RootElement;\n                if (root.ValueKind == JsonValueKind.Object && (root.TryGetProperty(\"result\", out JsonElement resultElement) || root.TryGetProperty(\"data\", out resultElement)))\n                {\n                    if (resultElement.ValueKind == JsonValueKind.Null) return default;\n                    // Check if the target type is primitive (like int, bool, long) and the JSON element reflects that\n                    if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                    {\n                        // Attempt direct deserialization for primitives/string from the element\n                        try {\n                            return resultElement.Deserialize<TResponse>(jsonOptions);\n                        } catch (JsonException innerEx) {\n                            Console.WriteLine($\"JSON Deserialization Error (Primitive - {operationName}): {innerEx.Message} | Element: {resultElement.GetRawText()}\");\n                            return default;\n                        }\n                    }\n                    else // Assume complex object\n                    {\n                        return resultElement.Deserialize<TResponse>(jsonOptions);\n                    }\n                }\n                else if (root.ValueKind != JsonValueKind.Null)\n                {\n                    // Check for primitives at the root as well\n                    if (typeof(TResponse).IsPrimitive || typeof(TResponse) == typeof(string) || typeof(TResponse) == typeof(decimal))\n                    {\n                        try {\n                            return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                        } catch (JsonException innerEx) {\n                            Console.WriteLine($\"JSON Deserialization Error (Root Primitive - {operationName}): {innerEx.Message} | Response: {responseContent}\");\n                            return default;\n                        }\n                    }\n                    else\n                    {\n                        return JsonSerializer.Deserialize<TResponse>(responseContent, jsonOptions);\n                    }\n                }\n                else\n                {\n                    return default;\n                }\n            }\n      }\n      catch (JsonException jsonEx)\n      {\n          Console.WriteLine($\"JSON Deserialization Error ({operationName}): {jsonEx.Message} | Response: {responseContent}\");\n          return default; // Return default on deserialization failure\n      }\n  }\n  catch (HttpRequestException e)\n  {\n      Console.WriteLine($\"HTTP Request Error ({operationName}): {e.Message}\");\n      // Depending on the operation, maybe return default or false instead of throwing\n      // For now, re-throwing signals a clear failure.\n      throw;\n  }\n  // Removed redundant JsonException catch here, handled in request serialization try-catch\n  catch (Exception e) // Catch unexpected errors\n  {\n      Console.WriteLine($\"An unexpected error occurred ({operationName}): {e.Message}\");\n      throw;\n  }\n}\n\nprivate async Task Send(SmsRecipient recipient)\n{\n    TwilioClient.Init(\"Sms:AccountId\", \"Sms:Password\");\n    MessageResource message = await MessageResource.CreateAsync(\n        body: recipient.Notification.MessageBody,\n        from: new PhoneNumber(\"+12163429166\"),\n        to: new PhoneNumber(recipient.ContactNumber)\n        );\n    recipient.Sid = message.Sid;\n}\n\npublic async Task ProcessSavedNotifications()\n{\n    string numberOfmails = \"2\";\n    int pageSize = int.Parse(numberOfmails);\n    SmsNotificationRecipientByStatusSpecification specification = new SmsNotificationRecipientByStatusSpecification(pageSize);\n    // API call\n    // var recipients = await _recipientRepository.ListAsync(specification);\n    //var recipients = Enumerable.Empty<SmsRecipient>();\n    var queryPayload = new Dictionary<string, object>\n    {\n        { \"Filter\", new Dictionary<string, object> \n            { \n                { \"RecipientStatus\", (int)NotificationStatus.Pending } \n            } \n        },\n        { \"Take\", pageSize },\n        { \"Skip\", 0 },\n        { \"OrderBy\", \"CreatedDate\" },\n        { \"Include\", new[] { \"Notification\" } }\n    };\n    List<SmsRecipient>? recipients = await CallDb<List<SmsRecipient>>(\"ListAsync\", specification);\n\n    if (recipients != null && recipients.Any())\n    {\n        foreach (var recipient in recipients)\n        {\n            try\n            {\n                await Send(recipient);\n                recipient.Status = NotificationStatus.Sent;\n            }\n            catch (Exception ex)\n            {\n                recipient.Status = NotificationStatus.Fail;\n                //_appLogger.LogError($\"SendNotificationsTimerTrigger, an error occured at {DateTime.Now}. Error :  {ex.Message}\");\n                Console.WriteLine($\"SendNotificationsTimerTrigger, an error occured at {DateTime.Now}. Error :  {ex.Message}\");\n            }\n            // API Call\n            // await _recipientRepository.UpdateAsync(recipient); ************\n            await CallDb<object>(\"UpdateAsync\", recipient);\n        }\n    }\n}\n\n// log.LogInformation($\"Processing mail notifications started at: {DateTime.Now}\");\nConsole.WriteLine($\"Processing mail notifications started at: {DateTime.Now}\");\nawait ProcessSavedNotifications();\n// log.LogInformation($\"Processing mail notifications completed at: {DateTime.Now}\");\n// log.LogInformation($\"Next execution will be at: \" + $\"{myTimer.Schedule.GetNextOccurrence(DateTime.Now).ToString(\"MM/dd/yyyy HH:mm\")}\");",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1124,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_qqaEc-1",
			"id":"n_td7mf",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":46209,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":5
}