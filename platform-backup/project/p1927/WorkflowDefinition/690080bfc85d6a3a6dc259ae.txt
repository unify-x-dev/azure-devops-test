{
	"appsUsed":[
		
	],
	"createdTime":1761640639964,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_tLXW3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tUSTr",
			"type":"next"
		},
		{
			"fromNodeId":"n_tUSTr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YoNGn",
			"type":"next"
		}
	],
	"id":"690080bfc85d6a3a6dc259ae",
	"lastModifiedBy":39712,
	"lcName":"[virtu-approvalsfunctionappfn] -> gettask",
	"modifiedTime":1761640639964,
	"name":"[virtu-ApprovalsFunctionAppFN] -> GetTask",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tLXW3",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":35,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tUSTr",
			"index":2,
			"inputs":{
				"code":"using System.Net;\nusing System.Text.RegularExpressions;\nusing Function.Domain.Models;\nusing Function.Domain.Providers;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing Newtonsoft.Json;\n\nnamespace api.Functions\n{\n    public class GetApproval\n    {\n        private readonly ILogger _logger;\n        private readonly IApprovalProviderFactory _providerFactory;\n\n        public GetApproval(ILoggerFactory loggerFactory, IApprovalProviderFactory providerFactory)\n        {\n            _logger = loggerFactory.CreateLogger<GetApproval>();\n            _providerFactory = providerFactory;\n        }\n\n        [OpenApiOperation(operationId: \"GetApproval\", tags: new[] { \"GetApproval\" }, Summary = \"Get Approvals\", Description = \"Use this method to get approvals for a user\", Visibility = OpenApiVisibilityType.Important)]\n        [OpenApiSecurity(\"function_key\", SecuritySchemeType.ApiKey, Name = \"code\", In = OpenApiSecurityLocationType.Query)]\n        [OpenApiSecurity(\"bearer_auth\", SecuritySchemeType.Http, Scheme = OpenApiSecuritySchemeType.Bearer, BearerFormat = \"JWT\")]\n        [OpenApiParameter(name: \"email\", In = ParameterLocation.Path, Required = true, Type = typeof(string), Summary = \"The email of the user\", Description = \"Valid email of the user\", Visibility = OpenApiVisibilityType.Important)]\n        [OpenApiParameter(name: \"vrtu-approvals-pa-token\", In = ParameterLocation.Header, Required = false, Type = typeof(string), Summary = \"Azure AD Access Token to get Power Automate, Velocity5 and Velocity5 PaaS\", Description = \"Azure AD Access Token to get Power Automate,Velocity5 and Velocity5 PaaS\", Visibility = OpenApiVisibilityType.Important)]\n        [OpenApiParameter(name: \"status\", In = ParameterLocation.Query, Required = false, Type = typeof(string), Summary = \"Filter parameter can be used to filter (e.g. requested etc.) approvals\", Description = \"Filter parameter can be used to filter (e.g. requested etc.) approvals\", Visibility = OpenApiVisibilityType.Advanced)]\n        [OpenApiParameter(name: \"isDescending\", In = ParameterLocation.Query, Required = false, Type = typeof(string), Summary = \"Sort parameter can be used to sort approvals\", Description = \"Sort parameter can be used to sort approvals\", Visibility = OpenApiVisibilityType.Advanced)]\n        [OpenApiResponseWithBody(statusCode: HttpStatusCode.OK, contentType: \"application/json\", bodyType: typeof(ApprovalList), Summary = \"Get Approvals success response\", Description = \"If request is successful then it will show available approvals for the given user. If there are any errors in getting approvals from a particular application then approvals from that application will be omitted in the response\")]\n        [OpenApiResponseWithBody(statusCode: HttpStatusCode.BadRequest, contentType: \"application/json\", bodyType: typeof(string), Summary = \"Get Approvals failure response\", Description = \"If request doesn't have a valid email then error is thrown\")]\n        [Function(\"GetApproval\")]\n        public async Task<HttpResponseData> RunAsync(\n            [HttpTrigger(AuthorizationLevel.Function, \"get\", Route = \"users/{email}/approvals\")] HttpRequestData req, \n            string email, \n            string status, \n            string isDescending)\n        {\n            if (!IsValidEmail(email))\n            {\n                return CreateErrorResponse(req, \"path parameter {email} is not valid. Please provide valid email\");\n            }\n\n            _logger.LogInformation(\"Getting {status} approvals for {email} with isDescending: {isDescending}\", \n                status, email, isDescending);\n\n            var approvalList = await FetchAllApprovalsAsync(req, email);\n            \n            if (!string.IsNullOrEmpty(isDescending) && approvalList.items.Count > 0)\n            {\n                approvalList.items = approvalList.items\n                    .OrderByDescending(x => x.createdDate)\n                    .ToList();\n            }\n\n            return CreateSuccessResponse(req, approvalList);\n        }\n\n        private async Task<ApprovalList> FetchAllApprovalsAsync(HttpRequestData req, string email)\n        {\n            var approvalList = new ApprovalList { items = new List<Approval>() };\n            var paToken = GetHeaderValue(req, \"vrtu-approvals-pa-token\");\n            var authToken = GetBearerToken(req);\n\n            var providers = _providerFactory.GetProviders(email, paToken, authToken);\n\n            foreach (var provider in providers)\n            {\n                try\n                {\n                    var approvals = await provider.GetApprovalsAsync();\n                    approvalList.items.AddRange(approvals);\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, \"Failed to fetch approvals from {ProviderType}\", provider.GetType().Name);\n                }\n            }\n\n            return approvalList;\n        }\n\n        private bool IsValidEmail(string email)\n        {\n            return Regex.IsMatch(email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\", \n                RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));\n        }\n\n        private string GetHeaderValue(HttpRequestData req, string headerName)\n        {\n            return req.Headers.TryGetValues(headerName, out var values) \n                ? values.FirstOrDefault() \n                : null;\n        }\n\n        private string GetBearerToken(HttpRequestData req)\n        {\n            var authHeader = GetHeaderValue(req, \"Authorization\");\n            return authHeader?.Split(\" \").LastOrDefault();\n        }\n\n        private HttpResponseData CreateErrorResponse(HttpRequestData req, string message)\n        {\n            var response = req.CreateResponse(HttpStatusCode.BadRequest);\n            response.WriteString(JsonConvert.SerializeObject(message));\n            return response;\n        }\n\n        private HttpResponseData CreateSuccessResponse(HttpRequestData req, ApprovalList approvalList)\n        {\n            var response = req.CreateResponse(HttpStatusCode.OK);\n            response.Headers.Add(\"Content-Type\", \"application/json; charset=utf-8\");\n            response.WriteString(JsonConvert.SerializeObject(approvalList));\n            return response;\n        }\n    }\n}\n\n// ============================================================================\n// Supporting Interfaces and Classes\n// ============================================================================\n\nnamespace Function.Domain.Providers\n{\n    // Unified interface for all approval providers\n    public interface IApprovalProvider\n    {\n        Task<List<Approval>> GetApprovalsAsync();\n    }\n\n    // Factory to create and configure providers\n    public interface IApprovalProviderFactory\n    {\n        IEnumerable<IApprovalProvider> GetProviders(string email, string paToken, string authToken);\n    }\n\n    public class ApprovalProviderFactory : IApprovalProviderFactory\n    {\n        private readonly INowApprovalDataProvider _nowProvider;\n        private readonly IPAApprovalDataProvider _paProvider;\n        private readonly IV5ApprovalDataProvider _v5Provider;\n        private readonly IV5PaaSApprovalDataProvider _v5PaaSProvider;\n        private readonly ISkillApprovalDataProvider _skillProvider;\n        private readonly ISfdcApprovalDataProvider _sfdcProvider;\n        private readonly ITaleoApprovalDataProvider _taleoProvider;\n        private readonly IOutlookApprovalDataProvider _outlookProvider;\n\n        public ApprovalProviderFactory(\n            INowApprovalDataProvider nowProvider,\n            IPAApprovalDataProvider paProvider,\n            IV5ApprovalDataProvider v5Provider,\n            IV5PaaSApprovalDataProvider v5PaaSProvider,\n            ISkillApprovalDataProvider skillProvider,\n            ISfdcApprovalDataProvider sfdcProvider,\n            ITaleoApprovalDataProvider taleoProvider,\n            IOutlookApprovalDataProvider outlookProvider)\n        {\n            _nowProvider = nowProvider;\n            _paProvider = paProvider;\n            _v5Provider = v5Provider;\n            _v5PaaSProvider = v5PaaSProvider;\n            _skillProvider = skillProvider;\n            _sfdcProvider = sfdcProvider;\n            _taleoProvider = taleoProvider;\n            _outlookProvider = outlookProvider;\n        }\n\n        public IEnumerable<IApprovalProvider> GetProviders(string email, string paToken, string authToken)\n        {\n            var providers = new List<IApprovalProvider>\n            {\n                new EmailBasedProvider(_nowProvider, email),\n                new EmailBasedProvider(_skillProvider, email),\n                new EmailBasedProvider(_sfdcProvider, email),\n                new EmailBasedProvider(_taleoProvider, email)\n            };\n\n            if (!string.IsNullOrEmpty(paToken))\n            {\n                providers.Add(new TokenBasedProvider(_paProvider, paToken));\n                providers.Add(new TokenBasedProvider(_v5Provider, paToken));\n                providers.Add(new TokenBasedProvider(_v5PaaSProvider, paToken));\n            }\n\n            if (!string.IsNullOrEmpty(authToken))\n            {\n                providers.Add(new TokenBasedProvider(_outlookProvider, authToken));\n            }\n\n            return providers;\n        }\n    }\n\n    // Adapter for email-based providers\n    internal class EmailBasedProvider : IApprovalProvider\n    {\n        private readonly dynamic _provider;\n        private readonly string _email;\n\n        public EmailBasedProvider(dynamic provider, string email)\n        {\n            _provider = provider;\n            _email = email;\n        }\n\n        public async Task<List<Approval>> GetApprovalsAsync()\n        {\n            if (_provider is INowApprovalDataProvider nowProvider)\n                return await nowProvider.GetNowApprovalsAsync(_email);\n            if (_provider is ISkillApprovalDataProvider skillProvider)\n                return await skillProvider.GetSKillApprovalsAsync(_email);\n            if (_provider is ISfdcApprovalDataProvider sfdcProvider)\n                return await sfdcProvider.GetSFDCApprovalsAsync(_email);\n            if (_provider is ITaleoApprovalDataProvider taleoProvider)\n                return await taleoProvider.GetTaleoApprovalsAsync(_email);\n            \n            return new List<Approval>();\n        }\n    }\n\n    // Adapter for token-based providers\n    internal class TokenBasedProvider : IApprovalProvider\n    {\n        private readonly dynamic _provider;\n        private readonly string _token;\n\n        public TokenBasedProvider(dynamic provider, string token)\n        {\n            _provider = provider;\n            _token = token;\n        }\n\n        public async Task<List<Approval>> GetApprovalsAsync()\n        {\n            if (_provider is IPAApprovalDataProvider paProvider)\n                return await paProvider.GetPAApprovalsAsync(_token);\n            if (_provider is IV5ApprovalDataProvider v5Provider)\n                return await v5Provider.GetV5ApprovalsAsync(_token);\n            if (_provider is IV5PaaSApprovalDataProvider v5PaaSProvider)\n                return await v5PaaSProvider.GetV5PaaSApprovalsAsync(_token);\n            if (_provider is IOutlookApprovalDataProvider outlookProvider)\n                return await outlookProvider.GetOutlookApprovalsAsync(_token);\n            \n            return new List<Approval>();\n        }\n    }\n}\n\n// ============================================================================\n// Original Provider Interfaces (keep these as-is)\n// ============================================================================\n\nnamespace Function.Domain.Providers\n{\n    public interface INowApprovalDataProvider\n    {\n        Task<List<Approval>> GetNowApprovalsAsync(string email);\n        Task PatchNowApprovalAsync(List<Approval> approvalList, string email);\n    }\n\n    public interface IPAApprovalDataProvider\n    {\n        Task<List<Approval>> GetPAApprovalsAsync(string token);\n        Task PatchPAApprovalAsync(List<Approval> approvalList, string token);\n    }\n\n    public interface IV5ApprovalDataProvider\n    {\n        Task<List<Approval>> GetV5ApprovalsAsync(string token);\n        Task PatchV5ApprovalAsync(List<Approval> approvalList, string token);\n    }\n\n    public interface IV5PaaSApprovalDataProvider\n    {\n        Task<List<Approval>> GetV5PaaSApprovalsAsync(string token);\n        Task PatchV5PaaSApprovalAsync(List<Approval> approvalList, string token);\n    }\n\n    public interface ISkillApprovalDataProvider\n    {\n        Task<List<Approval>> GetSKillApprovalsAsync(string email);\n        Task PatchSkillApprovalAsync(List<Approval> approvalList, string email, string token);\n    }\n\n    public interface ISfdcApprovalDataProvider\n    {\n        Task<List<Approval>> GetSFDCApprovalsAsync(string email);\n        Task PatchSFDCApprovalAsync(List<Approval> approvalList, string token);\n    }\n\n    public interface ITaleoApprovalDataProvider\n    {\n        Task<List<Approval>> GetTaleoApprovalsAsync(string email);\n        Task PatchTaleoApprovalAsync(List<Approval> approvalList);\n    }\n\n    public interface IOutlookApprovalDataProvider\n    {\n        Task<List<Approval>> GetOutlookApprovalsAsync(string token);\n        Task PatchOutlookApprovalAsync(List<Approval> approvalList, string token);\n    }\n}",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":912,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_YoNGn",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39712,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":0
}