{
	"appsUsed":[
		
	],
	"createdTime":1761640639964,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_tLXW3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tUSTr",
			"type":"next"
		},
		{
			"fromNodeId":"n_tUSTr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YoNGn",
			"type":"next"
		}
	],
	"id":"690080bfc85d6a3a6dc259ae",
	"lastModifiedBy":39712,
	"lcName":"[virtu-approvalsfunctionappfn] -> gettask",
	"modifiedTime":1761641109775,
	"name":"[virtu-ApprovalsFunctionAppFN] -> GetTask",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tLXW3",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":35,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tUSTr",
			"index":2,
			"inputs":{
				"code":"  using System.Net;\nusing System.Text.RegularExpressions;\nusing Function.Domain.Models;\nusing Function.Domain.Providers;\nusing Microsoft.Azure.Functions.Worker;\nusing Microsoft.Azure.Functions.Worker.Http;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Attributes;\nusing Microsoft.Azure.WebJobs.Extensions.OpenApi.Core.Enums;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing Newtonsoft.Json;\n\npublic async Task<List<Approval>> GetProjectReleaseFeedbackApprovalsAsync(string email)\n        {\n            _logger.LogInformation(\"starting Project Release Feedback from Dataverse\");\n\n            HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}&resource={2}\", Environment.GetEnvironmentVariable(\"V5ClientScope\"), Environment.GetEnvironmentVariable(\"vrtuvPlusNGAppAppSecret\"), Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.Substring(0, Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.LastIndexOf('/'))), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n            HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"xxxprf_allocationforfeedbacks?$select=xxxprf_employeeid,xxxprf_employeename,xxxprf_projectnumber,xxxprf_projectname,xxxprf_enddate,xxxprf_allocation_id,modifiedon&$filter=(xxxprf_employeetype+eq+'Probationer'+or+xxxprf_employeetype+eq+'Trainee'+or+xxxprf_employeetype+eq+'Permanent')+and+xxxprf_feedbackstatus+eq+'Pending'+and+(Microsoft.Dynamics.CRM.NextXDays(PropertyName='xxxprf_enddate',PropertyValue=60)+or+Microsoft.Dynamics.CRM.OlderThanXDays(PropertyName='xxxprf_enddate',PropertyValue=1))+and+((xxxprf_projectmanageremail+eq+'{0}'+and+xxxprf_projectmanageremail+ne+xxxprf_employeeemail)+or+xxxprf_delegatedempemail+eq+'{0}'+or+(xxxprf_workmanageremail+eq+'{0}'+and+xxxprf_projectmanageremail+eq+xxxprf_employeeemail))\", email));\n            List<Approval> approvalListToSend = new List<Approval>();\n            List<ProjectReleaseFeedbackApproval> projectReleaseFeedbackApprovalList = new List<ProjectReleaseFeedbackApproval>();\n\n            try\n            {\n                HttpResponseMessage projectReleaseFeedbackGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n                if (!projectReleaseFeedbackGetTokenApiResponse.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Response status code does not indicate success. Response : {0}\", projectReleaseFeedbackGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                dynamic objects = JsonConvert.DeserializeObject<dynamic>(projectReleaseFeedbackGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                projectReleaseFeedbackClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n                HttpResponseMessage projectReleaseFeedbackGetUSerApiResponse = await projectReleaseFeedbackClient.SendAsync(getUserRequest);\n                if (!projectReleaseFeedbackGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    _logger.LogError(\"Response status code does not indicate success. Response : {0}\", projectReleaseFeedbackGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n                }\n\n                ProjectReleaseFeedbackApprovalList approvalList = JsonConvert.DeserializeObject<ProjectReleaseFeedbackApprovalList>(projectReleaseFeedbackGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                projectReleaseFeedbackApprovalList.AddRange(approvalList.value!);\n\n                while (!string.IsNullOrEmpty(approvalList.odatanextLink))\n                {\n                    getUserRequest = new HttpRequestMessage(HttpMethod.Get, approvalList.odatanextLink);\n                    projectReleaseFeedbackClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n                    projectReleaseFeedbackGetUSerApiResponse = await projectReleaseFeedbackClient.SendAsync(getUserRequest);\n                    if (!projectReleaseFeedbackGetUSerApiResponse.IsSuccessStatusCode)\n                    {\n                        _logger.LogError(\"Response status code does not indicate success. Response : {0}\", projectReleaseFeedbackGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n                    }\n\n                    approvalList = JsonConvert.DeserializeObject<ProjectReleaseFeedbackApprovalList>(projectReleaseFeedbackGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                    projectReleaseFeedbackApprovalList.AddRange(approvalList.value!);\n                }\n\n                approvalListToSend.AddRange(_projectReleaseFeedbackApprovalDataMapper.MapToApprovalList(projectReleaseFeedbackApprovalList, await GetEnvironmentURLAsync(projectReleaseFeedbackApprovalList)));\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, ex.Message);\n\n            }\n            _logger.LogInformation(\"ending Project Release Feedback from Dataverse\");\n            return approvalListToSend;\n        }\nHttpResponseData response;\n  KeyValuePair<string, IEnumerable<string>> header = req.Headers.ToList().Find(s => s.Key == \"Authorization\");\n\n            if (!Regex.IsMatch(email,\n                    @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\",\n                    RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))\n            {\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                response.WriteString(JsonConvert.SerializeObject(\"path parameter {email} is not valid. Please provide valid email\"));\n            }\n            else if (header.Equals(default(KeyValuePair<string, IEnumerable<string>>)))\n            {\n                response = req.CreateResponse(HttpStatusCode.BadRequest);\n                response.WriteString(JsonConvert.SerializeObject(\"Please provide Authorization header\"));\n            }\n            else\n            {\n                _logger.LogInformation(\"getting {status} tasks for {email} with isDescending : {isDescending}\", status, email, isDescending);\n\n                ApprovalList approvalList = new ApprovalList() { items = new List<Approval>() };\n\n                approvalList.items!.AddRange(await _projectReleaseFeedbackApprovalDataProvider.GetProjectReleaseFeedbackApprovalsAsync(email));\n                approvalList.items!.AddRange(await _workManagerClearanceApprovalDataProvider.GetWorkManagerClearanceApprovalsAsync(email));\n                approvalList.items!.AddRange(await _v5PerformanceEvaluationDataProvider.GetV5PerformanceEvaluationsAsync(header.Value.ToList()[0].Split(\" \").Last(), email));\n\n                response = req.CreateResponse(HttpStatusCode.OK);\n                response.Headers.Add(\"Content-Type\", \"application/json; charset=utf-8\");\n\n                if (!string.IsNullOrEmpty(isDescending) && approvalList.items.Count > 0)\n                {\n                    List<Approval> sortedList = approvalList.items.OrderBy(x => x.createdDate).ToList();\n                    sortedList.Reverse();\n                    approvalList.items.Clear();\n                    approvalList.items.AddRange(sortedList);\n                }\n\n                response.WriteString(JsonConvert.SerializeObject(approvalList));\n            }\n            return response;",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":912,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_YoNGn",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39712,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":2
}