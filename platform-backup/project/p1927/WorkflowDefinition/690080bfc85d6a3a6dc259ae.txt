{
	"appsUsed":[
		
	],
	"createdTime":1761640639964,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_tLXW3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tUSTr",
			"type":"next"
		},
		{
			"fromNodeId":"n_tUSTr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YoNGn",
			"type":"next"
		}
	],
	"id":"690080bfc85d6a3a6dc259ae",
	"lastModifiedBy":39712,
	"lcName":"[virtu-approvalsfunctionappfn] -> gettask",
	"modifiedTime":1761714205368,
	"name":"[virtu-ApprovalsFunctionAppFN] -> GetTask",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tLXW3",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":35,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tUSTr",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Http.Headers;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\n\n// ==================== MODELS ====================\n#region Models\n\npublic class Approval\n{\n    public string? id { get; set; }\n    public string? request { get; set; }\n    public string? requestedBy { get; set; }\n    public string? app { get; set; }\n    public string? appGroup { get; set; }\n    public string? subCategory { get; set; }\n    public string? details { get; set; }\n    public string? requestedByImage { get; set; }\n    public DateTime createdDate { get; set; }\n    public Uri? link { get; set; }\n    public string? status { get; set; }\n    public string? comment { get; set; }\n}\n\npublic class ApprovalList\n{\n    public List<Approval>? items { get; set; }\n}\n\npublic class ProjectReleaseFeedbackApproval\n{\n    public int xxxprf_employeeid { get; set; }\n    public string? xxxprf_employeename { get; set; }\n    public int xxxprf_projectnumber { get; set; }\n    public string? xxxprf_projectname { get; set; }\n    public string? xxxprf_enddate { get; set; }\n    public string? xxxprf_allocation_id { get; set; }\n    public DateTime modifiedon { get; set; }\n    public string? xxxprf_allocationforfeedbackid { get; set; }\n}\n\npublic class ProjectReleaseFeedbackApprovalList\n{\n    public List<ProjectReleaseFeedbackApproval>? value { get; set; }\n\n    [JsonProperty(\"@odata.nextLink\")]\n    public string? odatanextLink { get; set; }\n}\n\npublic class NowApproval\n{\n    [JsonProperty(\"sys_id\")]\n    public string? SysId { get; set; }\n\n    [JsonProperty(\"document_id.short_description\")]\n    public string? SysapprovalShortDescription { get; set; }\n\n    [JsonProperty(\"document_id.description\")]\n    public string? SysapprovalDescription { get; set; }\n\n    [JsonProperty(\"sys_created_on\")]\n    public DateTime SysCreatedOn { get; set; }\n\n    [JsonProperty(\"document_id\")]\n    public DocumentId? DocumentId { get; set; }\n\n    [JsonProperty(\"document_id.sys_class_name\")]\n    public string? DocumentIdSysClassName { get; set; }\n\n    [JsonProperty(\"document_id.name\")]\n    public string? DocumentIdName { get; set; }\n\n    [JsonProperty(\"state\")]\n    public string? State { get; set; }\n\n    [JsonProperty(\"sys_created_by\")]\n    public string? SysCreatedBy { get; set; }\n\n    [JsonProperty(\"source_table\")]\n    public string? SourceTable { get; set; }\n\n    [JsonProperty(\"document_id.requested_for.name\")]\n    public string? RequestedForName { get; set; }\n\n    [JsonProperty(\"document_id.requested_for.email\")]\n    public string? RequestedForEmail { get; set; }\n\n    [JsonProperty(\"document_id.author.name\")]\n    public string? AuthorName { get; set; }\n\n    [JsonProperty(\"document_id.author.email\")]\n    public string? AuthorEmail { get; set; }\n\n    [JsonProperty(\"document_id.requested_by.name\")]\n    public string? RequestedByName { get; set; }\n\n    [JsonProperty(\"document_id.requested_by.email\")]\n    public string? RequestedByEmail { get; set; }\n\n    [JsonProperty(\"document_id.assigned_to.name\")]\n    public string? AssignedToName { get; set; }\n\n    [JsonProperty(\"document_id.assigned_to.email\")]\n    public string? AssignedToEmail { get; set; }\n\n    [JsonProperty(\"document_id.opened_by.name\")]\n    public string? OpenedByName { get; set; }\n\n    [JsonProperty(\"document_id.opened_by.email\")]\n    public string? OpenedByEmail { get; set; }\n\n    public string? short_description { get; set; }\n    public string? u_sd_onboarding { get; set; }\n\n    [JsonProperty(\"request_item.requested_for.name\")]\n    public string? request_itemrequested_forname { get; set; }\n\n    [JsonProperty(\"request_item.u_last_working_date\")]\n    public string? request_itemu_last_working_date { get; set; }\n\n    [JsonProperty(\"request_item.requested_for.employee_number\")]\n    public string? request_itemrequested_foremployee_number { get; set; }\n}\n\npublic class NowApprovalList\n{\n    [JsonProperty(\"result\")]\n    public IList<NowApproval>? Items { get; set; }\n}\n\npublic class DocumentId\n{\n    [JsonProperty(\"link\")]\n    public Uri? Link { get; set; }\n}\n\npublic class V5PerformanceEvaluation\n{\n    public string? PersonNumber { get; set; }\n    public string? PerformanceDocumentName { get; set; }\n    public long AssignmentId { get; set; }\n    public long ManagerId { get; set; }\n    public DateTime StartDate { get; set; }\n    public DateTime EndDate { get; set; }\n    public string? EvalStatus { get; set; }\n    public List<Role>? Roles { get; set; }\n}\n\npublic class Role\n{\n    public string? RoleTypeCode { get; set; }\n    public List<Participant>? Participants { get; set; }\n}\n\npublic class Participant\n{\n    public long PersonId { get; set; }\n    public string? ParticipationStatusCode { get; set; }\n    public string? RoleTypeCode { get; set; }\n    public DateTime? DueDate { get; set; }\n    public List<PerformanceTask>? Tasks { get; set; }\n}\n\npublic class PerformanceTask\n{\n    public DateTime? DueDate { get; set; }\n    public string? TaskName { get; set; }\n    public string? TaskStatus { get; set; }\n}\n\npublic class V5PerformanceEvaluationList\n{\n    public bool hasMore { get; set; }\n    public List<V5PerformanceEvaluation>? items { get; set; }\n    public List<V5Link>? links { get; set; }\n}\n\npublic class V5Link\n{\n    public string? rel { get; set; }\n    public string? href { get; set; }\n}\n\npublic class DataverseEndpointTable\n{\n    public string? xxcmn_endpoint { get; set; }\n}\n\npublic class DataverseEndpointTableList\n{\n    public List<DataverseEndpointTable>? value { get; set; }\n}\n\n#endregion\n\n// ==================== APPROVAL PROCESSOR ====================\npublic class ApprovalProcessor\n{\n    // Static HttpClient instances\n    private static readonly HttpClient dvGetClient = new HttpClient();\n    private static readonly HttpClient accessTokenClient = new HttpClient();\n    private static readonly HttpClient nowTaskGetClient = new HttpClient();\n    private static readonly HttpClient v5PerEvalGetClient = new HttpClient();\n    private static readonly HttpClient employeeClient = new HttpClient();\n\n    static ApprovalProcessor()\n    {\n        // Initialize base addresses for each client\n        string? dvGetUrl = Environment.GetEnvironmentVariable(\"DataverseScope_URL\");\n        if (!string.IsNullOrEmpty(dvGetUrl))\n        {\n            dvGetClient.BaseAddress = new Uri(dvGetUrl);\n        }\n\n        string? accessTokenUrl = Environment.GetEnvironmentVariable(\"AccessTokenURL\");\n        if (!string.IsNullOrEmpty(accessTokenUrl))\n        {\n            accessTokenClient.BaseAddress = new Uri(accessTokenUrl);\n        }\n\n        string? nowTaskUrl = Environment.GetEnvironmentVariable(\"NOWTaskGetURL\");\n        if (!string.IsNullOrEmpty(nowTaskUrl))\n        {\n            nowTaskGetClient.BaseAddress = new Uri(nowTaskUrl);\n        }\n\n        string? v5PerEvalUrl = Environment.GetEnvironmentVariable(\"V5PerEvalGetURL\");\n        if (!string.IsNullOrEmpty(v5PerEvalUrl))\n        {\n            v5PerEvalGetClient.BaseAddress = new Uri(v5PerEvalUrl);\n        }\n\n        string? employeeUrl = Environment.GetEnvironmentVariable(\"EmployeeURL\");\n        if (!string.IsNullOrEmpty(employeeUrl))\n        {\n            employeeClient.BaseAddress = new Uri(employeeUrl);\n        }\n    }\n\n    // ==================== PROVIDER 1: PROJECT RELEASE FEEDBACK ====================\n    public async Task<List<Approval>> GetProjectReleaseFeedbackApprovalsAsync(string email)\n    {\n        // Console.WriteLine(\"starting Project Release Feedback from Dataverse\");\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage()\n        {\n            Method = HttpMethod.Post,\n            Content = new StringContent(\n                string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}&resource={2}\",\n                    Environment.GetEnvironmentVariable(\"V5ClientScope\"),\n                    Environment.GetEnvironmentVariable(\"vrtuvPlusNGAppAppSecret\"),\n                    Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.Substring(0, Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.LastIndexOf('/'))),\n                Encoding.UTF8,\n                \"application/x-www-form-urlencoded\")\n        };\n\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get,\n            string.Format(\"xxxprf_allocationforfeedbacks?$select=xxxprf_employeeid,xxxprf_employeename,xxxprf_projectnumber,xxxprf_projectname,xxxprf_enddate,xxxprf_allocation_id,modifiedon&$filter=(xxxprf_employeetype+eq+'Probationer'+or+xxxprf_employeetype+eq+'Trainee'+or+xxxprf_employeetype+eq+'Permanent')+and+xxxprf_feedbackstatus+eq+'Pending'+and+(Microsoft.Dynamics.CRM.NextXDays(PropertyName='xxxprf_enddate',PropertyValue=60)+or+Microsoft.Dynamics.CRM.OlderThanXDays(PropertyName='xxxprf_enddate',PropertyValue=1))+and+((xxxprf_projectmanageremail+eq+'{0}'+and+xxxprf_projectmanageremail+ne+xxxprf_employeeemail)+or+xxxprf_delegatedempemail+eq+'{0}'+or+(xxxprf_workmanageremail+eq+'{0}'+and+xxxprf_projectmanageremail+eq+xxxprf_employeeemail))\",\n                email));\n\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<ProjectReleaseFeedbackApproval> projectReleaseFeedbackApprovalList = new List<ProjectReleaseFeedbackApproval>();\n\n        try\n        {\n            HttpResponseMessage projectReleaseFeedbackGetTokenApiResponse = await accessTokenClient.SendAsync(getTokenRequest);\n            if (!projectReleaseFeedbackGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                // Console.WriteLine($\"Response status code does not indicate success. Response : {projectReleaseFeedbackGetTokenApiResponse.Content.ReadAsStringAsync().Result}\");\n            }\n\n            dynamic objects = JsonConvert.DeserializeObject<dynamic>(projectReleaseFeedbackGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            \n            getUserRequest.Headers.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpResponseMessage projectReleaseFeedbackGetUSerApiResponse = await dvGetClient.SendAsync(getUserRequest);\n            if (!projectReleaseFeedbackGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // Console.WriteLine($\"Response status code does not indicate success. Response : {projectReleaseFeedbackGetUSerApiResponse.Content.ReadAsStringAsync().Result}\");\n            }\n\n            ProjectReleaseFeedbackApprovalList approvalList = JsonConvert.DeserializeObject<ProjectReleaseFeedbackApprovalList>(projectReleaseFeedbackGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            projectReleaseFeedbackApprovalList.AddRange(approvalList.value!);\n\n            while (!string.IsNullOrEmpty(approvalList.odatanextLink))\n            {\n                getUserRequest = new HttpRequestMessage(HttpMethod.Get, approvalList.odatanextLink);\n                getUserRequest.Headers.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n                projectReleaseFeedbackGetUSerApiResponse = await dvGetClient.SendAsync(getUserRequest);\n                if (!projectReleaseFeedbackGetUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // Console.WriteLine($\"Response status code does not indicate success. Response : {projectReleaseFeedbackGetUSerApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                approvalList = JsonConvert.DeserializeObject<ProjectReleaseFeedbackApprovalList>(projectReleaseFeedbackGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                projectReleaseFeedbackApprovalList.AddRange(approvalList.value!);\n            }\n\n            string environment = await GetProjectReleaseFeedbackEnvironmentURLAsync(projectReleaseFeedbackApprovalList);\n            approvalListToSend.AddRange(MapProjectReleaseFeedbackToApprovalList(projectReleaseFeedbackApprovalList, environment));\n        }\n        catch (Exception ex)\n        {\n            // Console.WriteLine($\"Error in GetProjectReleaseFeedbackApprovalsAsync: {ex.Message}\");\n        }\n\n        // Console.WriteLine(\"ending Project Release Feedback from Dataverse\");\n        return approvalListToSend;\n    }\n\n    private async Task<string> GetProjectReleaseFeedbackEnvironmentURLAsync(List<ProjectReleaseFeedbackApproval> projectReleaseFeedbackApprovalList)\n    {\n        // Console.WriteLine(\"starting endpoint from Dataverse\");\n        string environment = string.Empty;\n\n        if (projectReleaseFeedbackApprovalList.Count > 0)\n        {\n            HttpRequestMessage getTokenRequest = new HttpRequestMessage()\n            {\n                Method = HttpMethod.Post,\n                Content = new StringContent(\n                    string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}&resource={2}\",\n                        Environment.GetEnvironmentVariable(\"V5ClientScope\"),\n                        Environment.GetEnvironmentVariable(\"vrtuvPlusNGAppAppSecret\"),\n                        Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.Substring(0, Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.LastIndexOf('/'))),\n                    Encoding.UTF8,\n                    \"application/x-www-form-urlencoded\")\n            };\n\n            HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, \"xxcmn_endpointtables?$select=xxcmn_endpoint&$filter=xxcmn_applicationname+eq+'ProjectReleaseFeedbackPowerAppURL'\");\n\n            try\n            {\n                HttpResponseMessage projectReleaseFeedbackGetTokenApiResponse = await accessTokenClient.SendAsync(getTokenRequest);\n                if (!projectReleaseFeedbackGetTokenApiResponse.IsSuccessStatusCode)\n                {\n                    // Console.WriteLine($\"Response status code does not indicate success. Response : {projectReleaseFeedbackGetTokenApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                dynamic objects = JsonConvert.DeserializeObject<dynamic>(projectReleaseFeedbackGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                getUserRequest.Headers.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n                HttpResponseMessage getUSerApiResponse = await dvGetClient.SendAsync(getUserRequest);\n                if (!getUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // Console.WriteLine($\"Response status code does not indicate success. Response : {getUSerApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                DataverseEndpointTableList dataverseEndpointTable = JsonConvert.DeserializeObject<DataverseEndpointTableList>(getUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                environment = dataverseEndpointTable.value![0].xxcmn_endpoint!;\n            }\n            catch (Exception ex)\n            {\n                // Console.WriteLine($\"Error in GetProjectReleaseFeedbackEnvironmentURLAsync: {ex.Message}\");\n            }\n        }\n\n        // Console.WriteLine(\"ending endpoint from Dataverse\");\n        return environment;\n    }\n\n    private List<Approval> MapProjectReleaseFeedbackToApprovalList(List<ProjectReleaseFeedbackApproval> projectReleaseFeedbackApprovalList, string environment)\n    {\n        List<Approval> approvalList = new List<Approval>();\n        foreach (ProjectReleaseFeedbackApproval projectReleaseFeedbackApproval in projectReleaseFeedbackApprovalList)\n        {\n            try\n            {\n                approvalList.Add(new Approval\n                {\n                    id = projectReleaseFeedbackApproval.xxxprf_allocationforfeedbackid,\n                    app = \"Velocity 5\",\n                    appGroup = \"Velocity5\",\n                    subCategory = \"Project Release Feedback\",\n                    request = string.Format(\"Project ({0}:{1}) Release Feedback for {2} with allocation end date {3}\",\n                        projectReleaseFeedbackApproval.xxxprf_projectnumber,\n                        projectReleaseFeedbackApproval.xxxprf_projectname,\n                        projectReleaseFeedbackApproval.xxxprf_employeename,\n                        projectReleaseFeedbackApproval.xxxprf_enddate),\n                    details = \"If the release feedback is not shared on time, then the resource allocation will be auto-extended by ONE (1) day. Project cost will increase, and account margin will be impacted.\",\n                    requestedBy = projectReleaseFeedbackApproval.xxxprf_employeename,\n                    createdDate = projectReleaseFeedbackApproval.modifiedon,\n                    link = new Uri(string.Format(\"{0}={1}\", environment, projectReleaseFeedbackApproval.xxxprf_allocation_id)),\n                    status = \"requested\"\n                });\n            }\n            catch (Exception ex)\n            {\n                // Console.WriteLine($\"Error mapping project release feedback: {ex.Message}\");\n            }\n        }\n        return approvalList;\n    }\n\n    // ==================== PROVIDER 2: WORK MANAGER CLEARANCE ====================\n    public async Task<List<Approval>> GetWorkManagerClearanceApprovalsAsync(string email)\n    {\n        // Console.WriteLine(\"starting Line Manager Clearance from ServiceNow\");\n\n        List<Approval> approvalListToSend = new List<Approval>();\n\n        HttpRequestMessage getTokenRequest = new HttpRequestMessage()\n        {\n            Method = HttpMethod.Post,\n            Content = new StringContent(\n                string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\",\n                    Environment.GetEnvironmentVariable(\"V5ClientID\"),\n                    Environment.GetEnvironmentVariable(\"V5ClientSecret\")),\n                Encoding.UTF8,\n                \"application/x-www-form-urlencoded\")\n        };\n\n        HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get,\n            string.Format(\"get-task-by-on-u-sd-boarding/Line Manager Clearance﻿?sysparm_query=assigned_to.email={0}^stateIN-5,1^active=true&sysparm_fields=sys_id,short_description,sys_created_on,u_sd_onboarding,request_item.requested_for.name,request_item.requested_for.employee_number,request_item.u_last_working_date\",\n                email));\n\n        try\n        {\n            HttpResponseMessage paGetTokenApiResponse = await accessTokenClient.SendAsync(getTokenRequest);\n            if (!paGetTokenApiResponse.IsSuccessStatusCode)\n            {\n                // Console.WriteLine($\"Response status code does not indicate success. Response : {paGetTokenApiResponse.Content.ReadAsStringAsync().Result}\");\n            }\n\n            dynamic objects = JsonConvert.DeserializeObject<dynamic>(paGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n            getUserRequest.Headers.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n            HttpResponseMessage nowGetUSerApiResponse = await nowTaskGetClient.SendAsync(getUserRequest);\n            if (!nowGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // Console.WriteLine($\"Response status code does not indicate success. Response : {nowGetUSerApiResponse.Content.ReadAsStringAsync().Result}\");\n            }\n\n            NowApprovalList nowApprovalList = JsonConvert.DeserializeObject<NowApprovalList>(nowGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            string environment = await GetWorkManagerClearanceEnvironmentURLAsync(nowApprovalList.Items!);\n            approvalListToSend.AddRange(MapWorkManagerClearanceToApprovalList(nowApprovalList.Items!, environment));\n        }\n        catch (Exception ex)\n        {\n            // Console.WriteLine($\"Error in GetWorkManagerClearanceApprovalsAsync: {ex.Message}\");\n        }\n\n        // Console.WriteLine(\"ending Line Manager Clearance from ServiceNow\");\n        return approvalListToSend;\n    }\n\n    private async Task<string> GetWorkManagerClearanceEnvironmentURLAsync(IList<NowApproval> workManagerClearanceApprovalList)\n    {\n        // Console.WriteLine(\"starting endpoint from Dataverse\");\n        string environment = string.Empty;\n\n        if (workManagerClearanceApprovalList.Count > 0)\n        {\n            HttpRequestMessage getTokenRequest = new HttpRequestMessage()\n            {\n                Method = HttpMethod.Post,\n                Content = new StringContent(\n                    string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}&resource={2}\",\n                        Environment.GetEnvironmentVariable(\"V5ClientScope\"),\n                        Environment.GetEnvironmentVariable(\"vrtuvPlusNGAppAppSecret\"),\n                        Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.Substring(0, Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.LastIndexOf('/'))),\n                    Encoding.UTF8,\n                    \"application/x-www-form-urlencoded\")\n            };\n\n            HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, \"xxcmn_endpointtables?$select=xxcmn_endpoint&$filter=xxcmn_applicationname+eq+'ManagerClearanceAppLink'\");\n\n            try\n            {\n                HttpResponseMessage projectReleaseFeedbackGetTokenApiResponse = await accessTokenClient.SendAsync(getTokenRequest);\n                if (!projectReleaseFeedbackGetTokenApiResponse.IsSuccessStatusCode)\n                {\n                    // Console.WriteLine($\"Response status code does not indicate success. Response : {projectReleaseFeedbackGetTokenApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                dynamic objects = JsonConvert.DeserializeObject<dynamic>(projectReleaseFeedbackGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                getUserRequest.Headers.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n                HttpResponseMessage getUSerApiResponse = await dvGetClient.SendAsync(getUserRequest);\n                if (!getUSerApiResponse.IsSuccessStatusCode)\n                {\n                    // Console.WriteLine($\"Response status code does not indicate success. Response : {getUSerApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                DataverseEndpointTableList dataverseEndpointTable = JsonConvert.DeserializeObject<DataverseEndpointTableList>(getUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                environment = dataverseEndpointTable.value![0].xxcmn_endpoint!;\n            }\n            catch (Exception ex)\n            {\n                // Console.WriteLine($\"Error in GetWorkManagerClearanceEnvironmentURLAsync: {ex.Message}\");\n            }\n        }\n\n        // Console.WriteLine(\"ending endpoint from Dataverse\");\n        return environment;\n    }\n\n    private List<Approval> MapWorkManagerClearanceToApprovalList(IList<NowApproval> nowApprovalList, string environment)\n    {\n        List<Approval> approvalList = new List<Approval>();\n        foreach (NowApproval nowApproval in nowApprovalList)\n        {\n            try\n            {\n                approvalList.Add(new Approval()\n                {\n                    id = nowApproval.SysId,\n                    app = \"Velocity 5\",\n                    appGroup = \"Velocity5\",\n                    subCategory = nowApproval.u_sd_onboarding?.Trim(new char[] { '﻿' }),\n                    request = string.Format(\"Line Manager Clearance required for {0}({1}) whose LWD is {2}\",\n                        nowApproval.request_itemrequested_forname,\n                        nowApproval.request_itemrequested_foremployee_number,\n                        nowApproval.request_itemu_last_working_date),\n                    details = nowApproval.short_description,\n                    requestedBy = nowApproval.request_itemrequested_forname,\n                    createdDate = DateTime.SpecifyKind(nowApproval.SysCreatedOn, DateTimeKind.Utc),\n                    link = new Uri(string.Format(\"{0}&tasksysid={1}\", environment, nowApproval.SysId)),\n                    status = nowApproval.State\n                });\n            }\n            catch (Exception ex)\n            {\n                // Console.WriteLine($\"Error mapping work manager clearance: {ex.Message}\");\n            }\n        }\n        return approvalList;\n    }\n\n    // ==================== PROVIDER 3: V5 PERFORMANCE EVALUATION ====================\n    public async Task<List<Approval>> GetV5PerformanceEvaluationsAsync(string token, string email)\n    {\n        // Console.WriteLine(\"starting Performance Evaluations from Velocity5\");\n        List<Approval> approvalListToSend = new List<Approval>();\n\n        string personId = await GetPersonId(token, email);\n        approvalListToSend.AddRange(await GetWorkerPerformanceEvaluationTasks(token, personId));\n        approvalListToSend.AddRange(await GetManagerPerformanceEvaluationTasks(token, personId));\n\n        // Console.WriteLine(\"ending Performance Evaluations from Velocity5\");\n        return approvalListToSend;\n    }\n\n    private async Task<List<Approval>> GetWorkerPerformanceEvaluationTasks(string token, string personId)\n    {\n        // Console.WriteLine(\"starting Worker Performance Evaluations from Velocity5\");\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<V5PerformanceEvaluation> v5PerformanceEvaluationList = new List<V5PerformanceEvaluation>();\n        int offset = 0;\n\n        string link = \"performanceEvaluations?limit=100&offset={0}&onlyData=true&expand=Roles,Roles.Participants,Roles.Participants.Tasks&q=EvalStatus!=Completed;{1}={2};{3}\";\n\n        try\n        {\n            using (HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(link, offset, \"PersonId\", personId, GetCurrentFinancialYear())))\n            {\n                getUserRequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                HttpResponseMessage getUserResponse = await v5PerEvalGetClient.SendAsync(getUserRequest);\n                if (!getUserResponse.IsSuccessStatusCode)\n                {\n                    // Console.WriteLine($\"Response status code does not indicate success. Response : {getUserResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                V5PerformanceEvaluationList performanceList = JsonConvert.DeserializeObject<V5PerformanceEvaluationList>(getUserResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                v5PerformanceEvaluationList.AddRange(performanceList.items!);\n\n                while (performanceList.hasMore)\n                {\n                    offset += 100;\n                    using (HttpRequestMessage getUserRequest2 = new HttpRequestMessage(HttpMethod.Get, string.Format(link, offset, \"PersonId\", personId, GetCurrentFinancialYear())))\n                    {\n                        getUserRequest2.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                        getUserResponse = await v5PerEvalGetClient.SendAsync(getUserRequest2);\n                        if (!getUserResponse.IsSuccessStatusCode)\n                        {\n                            // Console.WriteLine($\"Response status code does not indicate success. Response : {getUserResponse.Content.ReadAsStringAsync().Result}\");\n                        }\n\n                        performanceList = JsonConvert.DeserializeObject<V5PerformanceEvaluationList>(getUserResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                        v5PerformanceEvaluationList.AddRange(performanceList.items!);\n                    }\n                }\n\n                Uri uri = new Uri(performanceList.links?[0].href!);\n                approvalListToSend.AddRange(MapV5PerformanceEvaluationToApprovalList(v5PerformanceEvaluationList, string.Format(\"{0}://{1}:{2}\", uri.Scheme, uri.Host, uri.Port), \"WORKER\"));\n            }\n        }\n        catch (Exception ex)\n        {\n            // Console.WriteLine($\"Error in GetWorkerPerformanceEvaluationTasks: {ex.Message}\");\n        }\n\n        // Console.WriteLine(\"ending Worker Performance Evaluations from Velocity5\");\n        return approvalListToSend;\n    }\n\n    private async Task<List<Approval>> GetManagerPerformanceEvaluationTasks(string token, string personId)\n    {\n        // Console.WriteLine(\"starting Manager Performance Evaluations from Velocity5\");\n        List<Approval> approvalListToSend = new List<Approval>();\n        List<V5PerformanceEvaluation> v5PerformanceEvaluationList = new List<V5PerformanceEvaluation>();\n        int offset = 0;\n\n        string link = \"performanceEvaluations?limit=100&offset={0}&onlyData=true&expand=Roles,Roles.Participants,Roles.Participants.Tasks&q=EvalStatus!=Completed;{1}={2};{3}\";\n\n        try\n        {\n            using (HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(link, offset, \"ManagerId\", personId, GetCurrentFinancialYear())))\n            {\n                getUserRequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                HttpResponseMessage getUserResponse = await v5PerEvalGetClient.SendAsync(getUserRequest);\n                if (!getUserResponse.IsSuccessStatusCode)\n                {\n                    // Console.WriteLine($\"Response status code does not indicate success. Response : {getUserResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                V5PerformanceEvaluationList performanceList = JsonConvert.DeserializeObject<V5PerformanceEvaluationList>(getUserResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                v5PerformanceEvaluationList.AddRange(performanceList.items!);\n\n                while (performanceList.hasMore)\n                {\n                    offset += 100;\n                    using (HttpRequestMessage getUserRequest2 = new HttpRequestMessage(HttpMethod.Get, string.Format(link, offset, \"ManagerId\", personId, GetCurrentFinancialYear())))\n                    {\n                        getUserRequest2.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n                        getUserResponse = await v5PerEvalGetClient.SendAsync(getUserRequest2);\n                        if (!getUserResponse.IsSuccessStatusCode)\n                        {\n                            // Console.WriteLine($\"Response status code does not indicate success. Response : {getUserResponse.Content.ReadAsStringAsync().Result}\");\n                        }\n\n                        performanceList = JsonConvert.DeserializeObject<V5PerformanceEvaluationList>(getUserResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n                        v5PerformanceEvaluationList.AddRange(performanceList.items!);\n                    }\n                }\n\n                Uri uri = new Uri(performanceList.links?[0].href!);\n                approvalListToSend.AddRange(MapV5PerformanceEvaluationToApprovalList(v5PerformanceEvaluationList, string.Format(\"{0}://{1}:{2}\", uri.Scheme, uri.Host, uri.Port), \"MANAGER\"));\n            }\n        }\n        catch (Exception ex)\n        {\n            // Console.WriteLine($\"Error in GetManagerPerformanceEvaluationTasks: {ex.Message}\");\n        }\n\n        // Console.WriteLine(\"ending Manager Performance Evaluations from Velocity5\");\n        return approvalListToSend;\n    }\n\n    private async Task<string> GetPersonId(string token, string email)\n    {\n        // Console.WriteLine(\"starting user from Velocity5\");\n        string personId = \"0\";\n\n        try\n        {\n            using (HttpRequestMessage getPersonNumberUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"?onlyData=true&q=upper(emails.EmailAddress)='{0}'&fields=PersonId\", email.ToUpper())))\n            {\n                getPersonNumberUserRequest.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);\n\n                HttpResponseMessage getPersonNumberApiResponse = await employeeClient.SendAsync(getPersonNumberUserRequest);\n                if (!getPersonNumberApiResponse.IsSuccessStatusCode)\n                {\n                    // Console.WriteLine($\"Response status code does not indicate success. Response : {getPersonNumberApiResponse.Content.ReadAsStringAsync().Result}\");\n                }\n\n                dynamic person = JsonConvert.DeserializeObject<dynamic>(getPersonNumberApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n                if (person.items.Count == 1)\n                {\n                    personId = person.items[0].PersonId.ToString();\n                }\n            }\n        }\n        catch (Exception ex)\n        {\n            // Console.WriteLine($\"Error in GetPersonId: {ex.Message}\");\n        }\n\n        // Console.WriteLine(\"ending user from Velocity5\");\n        return personId;\n    }\n\n    private string GetCurrentFinancialYear()\n    {\n        DateTime currentDate = DateTime.Now;\n        int currentYear = currentDate.Year;\n\n        DateTime financialYearStartDate;\n        DateTime financialYearEndDate;\n\n        if (currentDate.Month >= 4)\n        {\n            financialYearStartDate = new DateTime(currentYear, 4, 1);\n            financialYearEndDate = new DateTime(currentYear + 1, 3, 31);\n        }\n        else\n        {\n            financialYearStartDate = new DateTime(currentYear - 1, 4, 1);\n            financialYearEndDate = new DateTime(currentYear, 3, 31);\n        }\n\n        return string.Format(\"StartDate>='{0}';EndDate<='{1}'\", financialYearStartDate.ToString(\"yyyy-MM-dd\"), financialYearEndDate.ToString(\"yyyy-MM-dd\"));\n    }\n\n    private List<Approval> MapV5PerformanceEvaluationToApprovalList(IList<V5PerformanceEvaluation> v5PerformanceEvaluationList, string environment, string roleType)\n    {\n        List<Approval> approvalList = new List<Approval>();\n\n        try\n        {\n            List<PerformanceTask> performanceTasks = v5PerformanceEvaluationList\n                .SelectMany(perfEval => perfEval.Roles!)\n                .Where(role => role.RoleTypeCode == roleType)\n                .SelectMany(role => role.Participants!)\n                .Where(participant => participant.ParticipationStatusCode != \"COMP\")\n                .SelectMany(participant => participant.Tasks!)\n                .Where(task => task.TaskStatus != \"Completed\")\n                .ToList();\n\n            if (performanceTasks.Count > 0)\n            {\n                string task = roleType == \"WORKER\" ? \"Employee Assessment\" : roleType == \"MANAGER\" ? \"Primary Appraiser\" : \"\";\n\n                approvalList.Add(new Approval()\n                {\n                    app = \"Velocity 5\",\n                    appGroup = \"Velocity5\",\n                    subCategory = task,\n                    request = string.Format(\"You have pending {0} task(s) of Performance Document\", task),\n                    details = \"Please note that completion of these assessments on velocity 5 is mandatory. Failure to complete these assessments on time will significantly affect your performance reviews and overall professional development. We urge everyone to prioritize the completion of these assessments\",\n                    createdDate = DateTime.Now.ToUniversalTime(),\n                    link = new Uri(string.Concat(environment, string.Format(\"/fscmUI/faces/deeplink?objType={0}_EVALUATION&action=NONE\", roleType)))\n                });\n            }\n        }\n        catch (Exception ex)\n        {\n            // Console.WriteLine($\"Error in MapV5PerformanceEvaluationToApprovalList: {ex.Message}\");\n        }\n\n        return approvalList;\n    }\n}\n\n// ==================== MAIN FUNCTION ====================\npublic async Task<IDictionary<string, object>> mainFunction(dynamic payload)\n{\n    string email = payload.email;\n    string isDescending = payload.isDescending ?? \"\";\n    string authHeader = payload.authorization ?? \"\";\n    \n    Dictionary<string, object> response;\n    ApprovalProcessor processor = new ApprovalProcessor();\n\n    // Validate email\n    if (!Regex.IsMatch(email, @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\", RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))\n    {\n        response = new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"path parameter {email} is not valid. Please provide valid email\" }\n        };\n    }\n    else if (string.IsNullOrEmpty(authHeader))\n    {\n        response = new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Please provide Authorization header\" }\n        };\n    }\n    else\n    {\n        try\n        {\n            ApprovalList approvalList = new ApprovalList() { items = new List<Approval>() };\n\n            string token = authHeader.Split(\" \").Last();\n\n            approvalList.items!.AddRange(await processor.GetProjectReleaseFeedbackApprovalsAsync(email));\n            approvalList.items!.AddRange(await processor.GetWorkManagerClearanceApprovalsAsync(email));\n            approvalList.items!.AddRange(await processor.GetV5PerformanceEvaluationsAsync(token, email));\n\n            if (!string.IsNullOrEmpty(isDescending) && approvalList.items.Count > 0)\n            {\n                List<Approval> sortedList = approvalList.items.OrderBy(x => x.createdDate).ToList();\n                sortedList.Reverse();\n                approvalList.items.Clear();\n                approvalList.items.AddRange(sortedList);\n            }\n\n            response = new Dictionary<string, object>\n            {\n                { \"statusCode\", 200 },\n                { \"body\", approvalList },\n                { \"headers\", new Dictionary<string, string> { { \"Content-Type\", \"application/json; charset=utf-8\" } } }\n            };\n        }\n        catch (Exception ex)\n        {\n            response = new Dictionary<string, object>\n            {\n                { \"statusCode\", 500 },\n                { \"body\", $\"Internal server error: {ex.Message}\" }\n            };\n        }\n    }\n\n    return response;\n}\n\n// Execute the function with provided payload\nvar result = await mainFunction(payload);\nresult;",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":912,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_YoNGn",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39712,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":21
}