{
	"appsUsed":[
		
	],
	"createdTime":1761640639964,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_tLXW3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tUSTr",
			"type":"next"
		},
		{
			"fromNodeId":"n_tUSTr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YoNGn",
			"type":"next"
		}
	],
	"id":"690080bfc85d6a3a6dc259ae",
	"lastModifiedBy":39712,
	"lcName":"[virtu-approvalsfunctionappfn] -> gettask",
	"modifiedTime":1761643512597,
	"name":"[virtu-ApprovalsFunctionAppFN] -> GetTask",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tLXW3",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":35,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tUSTr",
			"index":2,
			"inputs":{
				"code":"using System.Net;\nusing System.Text.RegularExpressions;\nusing Newtonsoft.Json;\n\npublic class Approval\n{\n    public string? id { get; set; }\n    public string? request { get; set; }\n    public string? requestedBy { get; set; }\n    public string? app { get; set; }\n    public string? appGroup { get; set; }\n    public string? subCategory { get; set; }\n    public string? details { get; set; }\n    public string? requestedByImage { get; set; }\n    public DateTime createdDate { get; set; }\n    public Uri? link { get; set; }\n    public string? status { get; set; }\n    public string? comment { get; set; }\n}\n\npublic class ApprovalList\n{\n    public List<Approval>? items { get; set; }\n}\n\npublic class ProjectReleaseFeedbackApproval\n{\n    public int xxxprf_employeeid { get; set; }\n    public string? xxxprf_employeename { get; set; }\n    public int xxxprf_projectnumber { get; set; }\n    public string? xxxprf_projectname { get; set; }\n    public string? xxxprf_enddate { get; set; }\n    public string? xxxprf_allocation_id { get; set; }\n    public DateTime modifiedon { get; set; }\n    public string? xxxprf_allocationforfeedbackid { get; set; }\n}\n\npublic class ProjectReleaseFeedbackApprovalList\n{\n    public List<ProjectReleaseFeedbackApproval>? value { get; set; }\n\n    [JsonProperty(\"@odata.nextLink\")]\n    public string? odatanextLink { get; set; }\n}\n\npublic async Task<List<Approval>> GetProjectReleaseFeedbackApprovalsAsync(string email)\n{\n    // _logger.LogInformation(\"starting Project Release Feedback from Dataverse\");\n\n    HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}&resource={2}\", Environment.GetEnvironmentVariable(\"V5ClientScope\"), Environment.GetEnvironmentVariable(\"vrtuvPlusNGAppAppSecret\"), Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.Substring(0, Environment.GetEnvironmentVariable(\"DataverseScope_URL\")!.LastIndexOf('/'))), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n    HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"xxxprf_allocationforfeedbacks?$select=xxxprf_employeeid,xxxprf_employeename,xxxprf_projectnumber,xxxprf_projectname,xxxprf_enddate,xxxprf_allocation_id,modifiedon&$filter=(xxxprf_employeetype+eq+'Probationer'+or+xxxprf_employeetype+eq+'Trainee'+or+xxxprf_employeetype+eq+'Permanent')+and+xxxprf_feedbackstatus+eq+'Pending'+and+(Microsoft.Dynamics.CRM.NextXDays(PropertyName='xxxprf_enddate',PropertyValue=60)+or+Microsoft.Dynamics.CRM.OlderThanXDays(PropertyName='xxxprf_enddate',PropertyValue=1))+and+((xxxprf_projectmanageremail+eq+'{0}'+and+xxxprf_projectmanageremail+ne+xxxprf_employeeemail)+or+xxxprf_delegatedempemail+eq+'{0}'+or+(xxxprf_workmanageremail+eq+'{0}'+and+xxxprf_projectmanageremail+eq+xxxprf_employeeemail))\", email));\n    List<Approval> approvalListToSend = new List<Approval>();\n    List<ProjectReleaseFeedbackApproval> projectReleaseFeedbackApprovalList = new List<ProjectReleaseFeedbackApproval>();\n\n    try\n    {\n        HttpResponseMessage projectReleaseFeedbackGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n        if (!projectReleaseFeedbackGetTokenApiResponse.IsSuccessStatusCode)\n        {\n            // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", projectReleaseFeedbackGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n        }\n\n        dynamic objects = JsonConvert.DeserializeObject<dynamic>(projectReleaseFeedbackGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n        projectReleaseFeedbackClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n        HttpResponseMessage projectReleaseFeedbackGetUSerApiResponse = await projectReleaseFeedbackClient.SendAsync(getUserRequest);\n        if (!projectReleaseFeedbackGetUSerApiResponse.IsSuccessStatusCode)\n        {\n            // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", projectReleaseFeedbackGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n        }\n\n        ProjectReleaseFeedbackApprovalList approvalList = JsonConvert.DeserializeObject<ProjectReleaseFeedbackApprovalList>(projectReleaseFeedbackGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n        projectReleaseFeedbackApprovalList.AddRange(approvalList.value!);\n\n        while (!string.IsNullOrEmpty(approvalList.odatanextLink))\n        {\n            getUserRequest = new HttpRequestMessage(HttpMethod.Get, approvalList.odatanextLink);\n            projectReleaseFeedbackClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n            projectReleaseFeedbackGetUSerApiResponse = await projectReleaseFeedbackClient.SendAsync(getUserRequest);\n            if (!projectReleaseFeedbackGetUSerApiResponse.IsSuccessStatusCode)\n            {\n                // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", projectReleaseFeedbackGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n            }\n\n            approvalList = JsonConvert.DeserializeObject<ProjectReleaseFeedbackApprovalList>(projectReleaseFeedbackGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n            projectReleaseFeedbackApprovalList.AddRange(approvalList.value!);\n        }\n\n        approvalListToSend.AddRange(_projectReleaseFeedbackApprovalDataMapper.MapToApprovalList(projectReleaseFeedbackApprovalList, await GetEnvironmentURLAsync(projectReleaseFeedbackApprovalList)));\n    }\n    catch (Exception ex)\n    {\n        // _logger.LogError(ex, ex.Message);\n    }\n    // _logger.LogInformation(\"ending Project Release Feedback from Dataverse\");\n    return approvalListToSend;\n}\n\npublic async Task<List<Approval>> GetWorkManagerClearanceApprovalsAsync(string email)\n{\n    // _logger.LogInformation(\"starting Line Manager Clearance from ServiceNow\");\n    List<Approval> approvalListToSend = new List<Approval>();\n\n    HttpRequestMessage getTokenRequest = new HttpRequestMessage() { Method = HttpMethod.Post, Content = new StringContent(string.Format(\"client_id={0}&grant_type=client_credentials&client_secret={1}\", Environment.GetEnvironmentVariable(\"V5ClientID\"), Environment.GetEnvironmentVariable(\"V5ClientSecret\")), Encoding.UTF8, \"application/x-www-form-urlencoded\") };\n\n    HttpRequestMessage getUserRequest = new HttpRequestMessage(HttpMethod.Get, string.Format(\"get-task-by-on-u-sd-boarding/Line Manager Clearanceï»¿?sysparm_query=assigned_to.email={0}^stateIN-5,1^active=true&sysparm_fields=sys_id,short_description,sys_created_on,u_sd_onboarding,request_item.requested_for.name,request_item.requested_for.employee_number,request_item.u_last_working_date\", email));\n\n    try\n    {\n        HttpResponseMessage paGetTokenApiResponse = await tokenClient.SendAsync(getTokenRequest);\n        if (!paGetTokenApiResponse.IsSuccessStatusCode)\n        {\n            // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", paGetTokenApiResponse.Content.ReadAsStringAsync().Result);\n        }\n\n        dynamic objects = JsonConvert.DeserializeObject<dynamic>(paGetTokenApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n        nowClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(objects.token_type.ToString(), objects.access_token.ToString());\n\n        HttpResponseMessage nowGetUSerApiResponse = await nowClient.SendAsync(getUserRequest);\n        if (!nowGetUSerApiResponse.IsSuccessStatusCode)\n        {\n            // _logger.LogError(\"Response status code does not indicate success. Response : {0}\", nowGetUSerApiResponse.Content.ReadAsStringAsync().Result);\n        }\n\n        NowApprovalList nowApprovalList = JsonConvert.DeserializeObject<NowApprovalList>(nowGetUSerApiResponse.EnsureSuccessStatusCode().Content.ReadAsStringAsync().Result)!;\n\n        approvalListToSend.AddRange(_workManagerClearanceApprovalDataMapper.MapToApprovalList(nowApprovalList.Items!, await GetEnvironmentURLAsync(nowApprovalList.Items!)));\n    }\n    catch (Exception ex)\n    {\n        // _logger.LogError(ex, ex.Message);\n    }\n    // _logger.LogInformation(\"ending Line Manager Clearance from ServiceNow\");\n\n    return approvalListToSend;\n}\n\npublic async Task<List<Approval>> GetV5PerformanceEvaluationsAsync(string token, string email)\n{\n    // _logger.LogInformation(\"starting Performance Evaluations from Velocity5\");\n    List<Approval> approvalListToSend = new List<Approval>();\n\n    string personId = await GetPersonId(token, email);\n    approvalListToSend.AddRange(await GetWorkerPerformanceEvaluationTasks(token, personId));\n    approvalListToSend.AddRange(await GetManagerPerformanceEvaluationTasks(token, personId));\n\n    // _logger.LogInformation(\"ending Performance Evaluations from Velocity5\");\n    return approvalListToSend;\n}\n\nHttpResponseData response;\nKeyValuePair<string, IEnumerable<string>> header = req.Headers.ToList().Find(s => s.Key == \"Authorization\");\n\nif (!Regex.IsMatch(email,\n        @\"^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$\",\n        RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250)))\n{\n    response = req.CreateResponse(HttpStatusCode.BadRequest);\n    response.WriteString(JsonConvert.SerializeObject(\"path parameter {email} is not valid. Please provide valid email\"));\n}\nelse if (header.Equals(default(KeyValuePair<string, IEnumerable<string>>)))\n{\n    response = req.CreateResponse(HttpStatusCode.BadRequest);\n    response.WriteString(JsonConvert.SerializeObject(\"Please provide Authorization header\"));\n}\nelse\n{\n    // _logger.LogInformation(\"getting {status} tasks for {email} with isDescending : {isDescending}\", status, email, isDescending);\n\n    ApprovalList approvalList = new ApprovalList() { items = new List<Approval>() };\n\n    approvalList.items!.AddRange(await GetProjectReleaseFeedbackApprovalsAsync(email));\n    approvalList.items!.AddRange(await GetWorkManagerClearanceApprovalsAsync(email));\n    approvalList.items!.AddRange(await GetV5PerformanceEvaluationsAsync(header.Value.ToList()[0].Split(\" \").Last(), email));\n\n    response = req.CreateResponse(HttpStatusCode.OK);\n    response.Headers.Add(\"Content-Type\", \"application/json; charset=utf-8\");\n\n    if (!string.IsNullOrEmpty(isDescending) && approvalList.items.Count > 0)\n    {\n        List<Approval> sortedList = approvalList.items.OrderBy(x => x.createdDate).ToList();\n        sortedList.Reverse();\n        approvalList.items.Clear();\n        approvalList.items.AddRange(sortedList);\n    }\n\n    response.WriteString(JsonConvert.SerializeObject(approvalList));\n}\nreturn response;",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":912,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_YoNGn",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39712,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":9
}