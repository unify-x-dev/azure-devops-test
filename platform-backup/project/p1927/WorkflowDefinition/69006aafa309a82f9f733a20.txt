{
	"appsUsed":[
		
	],
	"createdTime":1761634991505,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_tLXW3",
			"priority":0,
			"skip":false,
			"toNodeId":"n_tUSTr",
			"type":"next"
		},
		{
			"fromNodeId":"n_tUSTr",
			"priority":0,
			"skip":false,
			"toNodeId":"n_YoNGn",
			"type":"next"
		}
	],
	"id":"69006aafa309a82f9f733a20",
	"lastModifiedBy":39712,
	"lcName":"[virtu-approvalsfunctionappfn] -> getapproval",
	"modifiedTime":1761636415689,
	"name":"[virtu-ApprovalsFunctionAppFN] -> GetApproval",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1155,
				"resourceName":"callables_from_api"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tLXW3",
			"index":1,
			"inputs":{
				"request":{
					"contentType":"application/json"
				},
				"endpointType":"REST",
				"response":[
					{
						"status":200,
						"contentType":"application/json",
						"textBody":{
							"type":"string"
						},
						"body":{
							"type":"object",
							"properties":{
								"result":{
									"type":"string",
									"title":"Result"
								}
							},
							"additionalProperties":false,
							"required":[]
						}
					}
				],
				"streamingResponse":false
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via API",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":35,
				"resourceName":"code_by_unifyapps_csharp",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_tUSTr",
			"index":2,
			"inputs":{
				"code":"using System;\nusing System.IO;\nusing System.Threading.Tasks;\n// Added for JsonSerializer\nusing System.Text.Json; \n// Added for dummy interfaces/classes to run\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\n\n public enum ComparisonGroups : short {\n        None = 0,\n        Tier = 1 << 0,\n        Designation = 1 << 1,\n        Location = 1 << 2,\n        BusinessUnit = 1 << 3}\n\npublic class EvaluationCategory : BaseEntity<int> {\n        public string Name { get; set; }\n        public int Weightage { get; set; }\n        public string ImageName { get; set; }\n        public short DefaultRating { get; set; }\n        public ComparisonGroups ComparisonGroups { get; set; }\n        public IReadOnlyCollection<RepsActivity> RepsActivities { get; set; } }\n\npublic enum CalculationStrategy {\n        None = 0,\n        IndividualMetric = 1,\n        DeliveryProjectMetric = 2 }\n\npublic enum CappingStrategy : short {\n        None = 0,\n        ActivityCountBased = 1,\n        AverageBased = 2,\n        RevisedScoreBased = 3,\n        ScoreBased = 4 }\n\npublic class CapLimit : BaseEntity<int> {\n        public int RepsActivityId { get; set; }\n        public RepsActivity RepsActivity { get; set; }\n        public short Limit { get; set; }\n        public short Frequency { get; set; }\n        public CappingStrategy CappingStrategy { get; set; } }\n\n public class RepsActivity : BaseEntity<int> {\n        public string ActivityName { get; set; }\n        public string Description { get; set; }\n        public int Points { get; set; }\n        public bool IsActive { get; set; }\n        public string FocusArea { get; set; }\n        public string RepsSize { get; set; }\n        public int? CapLimitId { get; set; }\n        public CapLimit CapLimit { get; set; }\n        public CalculationStrategy CalculationStrategy { get; set; }\n        public EvaluationCategory EvaluationCategory { get; set; }\n        public int EvaluationCategoryId { get; set; }\n        public bool ShouldAggregate { get; set; }\n        public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities { get; set; } }\n\npublic class EmployeeRepsActivity : BaseEntity<long> {\n        public long EmployeeId { get; set; }\n        public string UserName { get; set; }\n        public int RepsActivityId { get; set; }\n        public int Points { get; set; }\n        public DateTime EffectiveDate { get; set; }\n        public string ReferenceNumber { get; set; } // need to revisit\n        public RepsActivity RepsActivity { get; set; }\n        public Employee Employee { get; set; }\n        public bool IsAggregated { get; set; }}\n\npublic class Tier : BaseEntity<int>\n    {\n        public string Name { get; set; }\n        public string ReferenceNumber { get; set; }\n        public IReadOnlyCollection<EmployeeTier> EmployeeTiers { get; set; }\n    }\n\npublic abstract class BaseEntity<T> {\n    public T Id { get; set; } }\n\npublic class Account : BaseEntity<int> {\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeAccount> EmployeeAccounts { get; set; } }\n\npublic class EmployeeAccount : BaseEntity<int> {\n    public long EmployeeId { get; set;}\n    public string EmployeeNumber { get; set;}\n    public Employee Employee { get; set;}\n    public int AccountId { get; set;}\n    public Account Account { get; set;}\n    public string ReferenceNumber { get; set; }}\n\n\npublic class Designation : BaseEntity<int> {\n    public string Name { get; set; }\n    public string ReferenceNumber { get; set; }\n    public IReadOnlyCollection<EmployeeDesignation> EmployeeDesignations { get; set; } }\n\n\npublic class EmployeeDesignation : BaseEntity<int> {\n    public long EmployeeId { get; set; }\n    public string EmployeeNumber { get; set; }\n    public Employee Employee { get; set; }\n    public int DesignationId { get; set; }\n    public Designation Designation { get; set; }\n    public string ReferenceNumber { get; set; } }\n\npublic class BusinessUnit : BaseEntity<int> {\n        public string Name { get; set; }\n        public string ReferenceNumber { get; set; }\n        public IReadOnlyCollection<EmployeeBusinessUnit> EmployeeBusinessUnits { get; set; } }\n\npublic class EmployeeBusinessUnit : BaseEntity<int> {\n        public long EmployeeId { get; set; }\n        public string EmployeeNumber { get; set; }\n        public Employee Employee { get; set; }\n        public int BusinessUnitId { get; set; }\n        public BusinessUnit BusinessUnit { get; set; }\n        public string ReferenceNumber { get; set; } }\n\n public class EmployeeTier : BaseEntity<int> {\n        public long EmployeeId { get; set; }\n        public string EmployeeNumber { get; set; }\n        public Employee Employee { get; set; }\n        public int TierId { get; set; }\n        public Tier Tier { get; set; }\n        public string ReferenceNumber { get; set;}}\n\npublic class Location : BaseEntity<int> {\n        public string Name { get; set; }\n        public string ReferenceNumber { get; set; }\n        public IReadOnlyCollection<EmployeeLocation> EmployeeLocations { get; set; } }\n\n public class EmployeeLocation : BaseEntity<int> {\n        public long EmployeeId { get; set; }\n        public string EmployeeNumber { get; set; }\n        public Employee Employee { get; set; }\n        public int LocationId { get; set; }\n        public Location Location { get; set; }\n        public string ReferenceNumber { get; set; }}\n\npublic class Employee : BaseEntity<int> {\n    public long EmployeeId { get; set; }\n    public string UserName { get; set; }\n    public string FullName { get; set; }\n    \n    public string EmployeeNumber { get; set; }\n    public string Email { get; set; }\n    public bool IsActive { get; set; }\n    public string Status { get; set; }\n    public Employee Manager { get; set; }\n    public string ManagerEmployeeNumber { get; set; }\n    public long? ManagerId { get; set; }\n    public EmployeeDesignation EmployeeDesignation { get; set; }\n    public EmployeeAccount EmployeeAccount { get; set; }\n    public EmployeeBusinessUnit EmployeeBusinessUnit { get; set; }\n    public EmployeeLocation EmployeeLocation { get; set; }\n    public EmployeeTier EmployeeTier { get; set; }\n    readonly List<EmployeeRepsActivity> _employeeRepsActivities = new List<EmployeeRepsActivity>();\n    public IReadOnlyCollection<EmployeeRepsActivity> EmployeeRepsActivities => _employeeRepsActivities.AsReadOnly();\n\n    public void AddRepsActivity(EmployeeRepsActivity employeeRepsActivity) {\n        _employeeRepsActivities.Add(employeeRepsActivity); } }\n\npublic interface IAsyncRepository<TEntity, TKey> where TEntity : BaseEntity<TKey> {\n        Task<TEntity> AddAsync(TEntity entity);\n        Task UpdateAsync(TEntity entity);\n        Task DeleteAsync(TEntity entity);\n        Task<TEntity> FirstOrDefaultAsync(ISpecification<TEntity, TKey> spec);\n        Task<int> CountAsync(ISpecification<TEntity, TKey> spec);\n        Task<IReadOnlyList<TEntity>> ListAsync(ISpecification<TEntity, TKey> spec); }\n\npublic interface ISpecification<TEntity,TKey> where TEntity : BaseEntity<TKey> {\n        Expression<Func<TEntity, bool>> Criteria { get; }\n        List<Expression<Func<TEntity, object>>> Includes { get; }\n        List<string> IncludeStrings { get; }\n        Expression<Func<TEntity, object>> OrderBy { get; }\n        Expression<Func<TEntity, object>> OrderByDescending { get; }\n        Expression<Func<TEntity, object>> OrderThenBy { get; }\n        int? Take { get; }\n        int? Skip { get; } }\n\npublic interface IEmployeeService {\n        Task AddOrUpdateAsync(Employee employee);\n        Task DeleteAsync(string userName);\n        Task<long?> GetEmployeeIdByUsername(string userName); }\n\n\n public class EmployeeService : IEmployeeService {\nreadonly IAsyncRepository<Employee, int> _employeeRepository;\nconst string DomainName = \"virtusa.com\";\npublic EmployeeService(IAsyncRepository<Employee, int> employeeRepository){\n    _employeeRepository = employeeRepository;}\npublic async Task AddOrUpdateAsync(Employee employee) {\n    // should not process when username is empty\n    ValidateEmployeeNumber(employee.EmployeeNumber);\n\n    if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber)) {\n        // provided manager should exist prior to add or update employee\n        await ProcessManagerAsync(employee.ManagerEmployeeNumber); }\n\n    //adding manager id to the employee object\n    await AddManagerIdAsync(employee);\n\n    // adding employee when employee not exist, updating employee if exist\n    await ProcessEmployeeAsync(employee); }\n\nasync Task AddManagerIdAsync(Employee employee) {\n    if (!string.IsNullOrEmpty(employee.ManagerEmployeeNumber)){\n        var manager = await GetEmployeeAsync(employee.ManagerEmployeeNumber).ConfigureAwait(false);\n        employee.ManagerId = manager?.EmployeeId;}}\n\npublic async Task DeleteAsync(string employeeNumber) {\n    // should not process when username is empty\n    ValidateEmployeeNumber(employeeNumber);\n\n    var isExistingEmployee = await IsExistingEmployee(employeeNumber);\n\n    if (isExistingEmployee) {\n        var existingEmployee = await GetEmployeeAsync(employeeNumber);\n        var reporteesSpecification = new ReporteesByEmployeeNumberSpecification(employeeNumber);\n        var reportees = await _employeeRepository.ListAsync(reporteesSpecification).ConfigureAwait(false);\n\n        foreach (var reportee in reportees) {\n            reportee.ManagerId = null;\n            await _employeeRepository.UpdateAsync(reportee).ConfigureAwait(false); }\n\n        await _employeeRepository.DeleteAsync(existingEmployee).ConfigureAwait(false);} }\n\nasync Task ProcessManagerAsync(string managerEmployeeNumber) {\n    // check whether manager is already exist\n    bool isExistingEmployee = await IsExistingEmployee(managerEmployeeNumber);\n    if (!isExistingEmployee) {\n        // if manager not exist, add manager as inactive user with username\n        var manager = new Employee {\n            UserName = managerEmployeeNumber,\n            EmployeeNumber = managerEmployeeNumber,\n            IsActive = false };\n\n        // format user with the username\n        await AddEmployeeAsync(manager).ConfigureAwait(false); } }\n\nasync Task ProcessEmployeeAsync(Employee employee){\n    // check whether user is already exist\n    bool isExistingEmployee = await IsExistingEmployee(employee.EmployeeNumber);\n    if (!isExistingEmployee){\n        await AddEmployeeAsync(employee).ConfigureAwait(false);}\n    else{\n        // get existing employee\n        var existingEmployee = await GetEmployeeAsync(employee.EmployeeNumber).ConfigureAwait(false);\n\n        // update details of the active employee\n        if (employee.IsActive){\n            FormatEmployee(employee);\n            existingEmployee.FullName = employee.FullName;\n            existingEmployee.Email = employee.Email;\n            existingEmployee.UserName = employee.UserName;\n            existingEmployee.ManagerId = employee.ManagerId;\n\n            existingEmployee.IsActive = employee.IsActive;\n            await _employeeRepository.UpdateAsync(existingEmployee).ConfigureAwait(false);}\n        else{\n            existingEmployee.Email = employee.Email;\n            existingEmployee.UserName = employee.UserName;\n\n            existingEmployee.IsActive = employee.IsActive;\n            await _employeeRepository.UpdateAsync(existingEmployee).ConfigureAwait(false);}}}\n\nasync Task AddEmployeeAsync(Employee employee) {\n    FormatEmployee(employee);\n    await _employeeRepository.AddAsync(employee).ConfigureAwait(false); }\n\n\n/// <summary>Format missing information of the user.</summary>\n/// <param name=\"employee\">The employee.</param>\nvoid FormatEmployee(Employee employee) {\n    employee.FullName = string.IsNullOrEmpty(employee.FullName) ? employee.EmployeeNumber : employee.FullName;\n    employee.Email = string.IsNullOrEmpty(employee.Email) ? $\"{employee.EmployeeNumber}@{DomainName}\" : employee.Email; }\n\nasync Task<Employee> GetEmployeeAsync(string employeeNumber) {\n    var specification = new EmployeeByEmployeeNumberSpecification(employeeNumber);\n    return await _employeeRepository.FirstOrDefaultAsync(specification).ConfigureAwait(false); }\n\n/// <summary>Validate username of the user to check whether it is a null or empty value.</summary>\n/// <param name=\"userName\">UserName of the user.</param>\n/// <exception cref=\"ArgumentException\">UserName</exception>\nvoid ValidateEmployeeNumber(string employeeNumber) {\n    if (string.IsNullOrEmpty(employeeNumber)) {\n        throw new ArgumentException(\"Value cannot be null or empty\", nameof(Employee.EmployeeNumber)); } }\n\nasync Task<bool> IsExistingEmployee(string employeeNumber) {\n    var specification = new EmployeeByEmployeeNumberSpecification(employeeNumber);\n    int employeeCount = await _employeeRepository.CountAsync(specification).ConfigureAwait(false);\n    return employeeCount == 1; }\n\npublic async Task<long?> GetEmployeeIdByUsername(string userName) {\n    if (userName == null) {\n        return null; }\n\n    var employee = await _employeeRepository.FirstOrDefaultAsync(new EmployeeByUserNameSpecification(userName));\n    return employee?.EmployeeId; } }\n\nasync Task<IDictionary<string, object>> mainFunction(string requestBody) {\n    var employee = JsonSerializer.Deserialize<Employee>(requestBody);\n    // return employee;\n\n    // var successBody = new {\n    //     message = $\"Successfully processed for {employee.UserName} employee\"};\n    // // return employee;}\n    \n    // return new Dictionary<string, object> {\n    //     { \"statusCode\", 200 },\n    //     { \"body\", employee } };\n\n    if (employee == null) {\n        // Replaced BadRequestObjectResult\n        return new Dictionary<string, object>\n        {\n            { \"statusCode\", 400 },\n            { \"body\", \"Please pass valid employee to sync\" }};}\n    // if (string.IsNullOrEmpty(employee.EmployeeNumber)) {\n    //     // Replaced BadRequestObjectResult\n    //     return new Dictionary<string, object> {\n    //         { \"statusCode\", 400 },\n    //         { \"body\", \"Invalid Employee Number\" }};}\n    if (string.IsNullOrEmpty(employee.Status)){\n        // Replaced BadRequestObjectResult\n        return new Dictionary<string, object>{\n            { \"statusCode\", 400 },\n            { \"body\", \"Employee Status is empty\"}};}\n    // else {\n    //     if (employee.Status == \"Cancelled\") {\n    //         await DeleteAsync(employee.EmployeeNumber); }\n    //     else {\n    //         await AddOrUpdateAsync(new Employee {\n    //             UserName = employee.UserName,\n    //             Email = employee.Email,\n    //             FullName = employee.FullName,\n    //             ManagerEmployeeNumber = employee.ManagerEmployeeNumber,\n    //             EmployeeNumber = employee.EmployeeNumber,\n    //             IsActive = employee.Status == \"Active\" }); } }\n\n    // Replaced OkObjectResult\n    // We create an anonymous object for the body, just like before\n    var successBody = new {\n        message = $\"Successfully processed for {employee.UserName} employee\"};\n    // return employee;}\n    \n    return new Dictionary<string, object> {\n        { \"statusCode\", 200 },\n        { \"body\", successBody } };\n}\nstring requestBody = @\"{\n  \"\"Email\"\": \"\"susheeln@invalid.virtusa.com\"\",\n  \"\"EmployeeNumber\"\": \"\"8028960\"\",\n  \"\"FullName\"\": \"\"Susheel Narlawar_PERF02\"\",\n  \"\"ManagerEmployeeNumber\"\": \"\"8030855\"\",\n  \"\"Status\"\": \"\"Active\"\",\n  \"\"UserName\"\": \"\"susheeln\"\"\n}\";\n// How you call this async function depends on your environment.\n// In many C# script/hosting environments, you would 'await' it.\nvar resultObject = await mainFunction(requestBody);\n// var resultObject = requestBody;\n\nresultObject",
				"isAsync":false
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute CSharp script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":912,
				"resourceName":"callables_return_response_to_api",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"_2RQln-1",
			"id":"n_YoNGn",
			"index":3,
			"inputs":{
				"streamingCompleted":true,
				"responseName":"200_undefined",
				"status":200
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to API request",
			"type":"STOP"
		}
	],
	"ownerUserId":39712,
	"projectId":1927,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":1
}