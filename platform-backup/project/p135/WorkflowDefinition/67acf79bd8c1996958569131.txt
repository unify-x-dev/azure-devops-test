{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1739388827900,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296285261,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd5d672fcc41fb70f384",
		"status":"DEPLOYED",
		"version":52,
		"workflowVersion":96
	},
	"edges":[
		{
			"fromNodeId":"ICSAq",
			"priority":0,
			"skip":false,
			"toNodeId":"n_IT6TV",
			"type":"next"
		},
		{
			"fromNodeId":"n_IT6TV",
			"priority":0,
			"skip":false,
			"toNodeId":"a9Vuj",
			"type":"next"
		},
		{
			"fromNodeId":"a9Vuj",
			"priority":0,
			"skip":false,
			"toNodeId":"Eck9U",
			"type":"next"
		},
		{
			"fromNodeId":"Eck9U",
			"priority":0,
			"skip":false,
			"toNodeId":"dw2UB",
			"type":"next"
		},
		{
			"fromNodeId":"dw2UB",
			"priority":0,
			"skip":false,
			"toNodeId":"fKcmZ",
			"type":"next"
		},
		{
			"fromNodeId":"fKcmZ",
			"priority":0,
			"skip":false,
			"toNodeId":"k2BU8",
			"type":"next"
		},
		{
			"fromNodeId":"k2BU8",
			"priority":0,
			"skip":false,
			"toNodeId":"W1NEY",
			"type":"next"
		},
		{
			"fromNodeId":"W1NEY",
			"priority":0,
			"skip":false,
			"toNodeId":"F9dYq",
			"type":"next"
		},
		{
			"fromNodeId":"F9dYq",
			"priority":0,
			"skip":false,
			"toNodeId":"HbZNP",
			"type":"next"
		},
		{
			"fromNodeId":"HbZNP",
			"priority":0,
			"skip":false,
			"toNodeId":"ODnjA",
			"type":"next"
		},
		{
			"fromNodeId":"ODnjA",
			"priority":0,
			"skip":false,
			"toNodeId":"N9JXC",
			"type":"next"
		},
		{
			"fromNodeId":"N9JXC",
			"priority":0,
			"skip":false,
			"toNodeId":"Vc8F4",
			"type":"loop"
		},
		{
			"fromNodeId":"Vc8F4",
			"priority":0,
			"skip":false,
			"toNodeId":"astB4",
			"type":"next"
		},
		{
			"fromNodeId":"astB4",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"N9JXC",
			"type":"next"
		},
		{
			"fromNodeId":"N9JXC",
			"priority":0,
			"skip":false,
			"toNodeId":"BTI0b",
			"type":"next"
		},
		{
			"fromNodeId":"BTI0b",
			"priority":0,
			"skip":false,
			"toNodeId":"wDS65",
			"type":"next"
		},
		{
			"fromNodeId":"wDS65",
			"priority":0,
			"skip":false,
			"toNodeId":"7JXWc",
			"type":"next"
		},
		{
			"fromNodeId":"7JXWc",
			"priority":0,
			"skip":false,
			"toNodeId":"vhfba",
			"type":"next"
		},
		{
			"fromNodeId":"vhfba",
			"priority":0,
			"skip":false,
			"toNodeId":"HhDcC",
			"type":"next"
		},
		{
			"fromNodeId":"HhDcC",
			"priority":0,
			"skip":false,
			"toNodeId":"Aomox",
			"type":"next"
		},
		{
			"fromNodeId":"Aomox",
			"priority":0,
			"skip":false,
			"toNodeId":"rWQoV",
			"type":"next"
		},
		{
			"fromNodeId":"rWQoV",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"zvC0F",
			"type":"if"
		},
		{
			"fromNodeId":"zvC0F",
			"priority":0,
			"skip":false,
			"toNodeId":"UPUqx",
			"type":"next"
		},
		{
			"fromNodeId":"RSDHv",
			"priority":0,
			"skip":false,
			"toNodeId":"UPUqx",
			"type":"next"
		},
		{
			"fromNodeId":"rWQoV",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"UPUqx",
			"type":"next"
		},
		{
			"fromNodeId":"UPUqx",
			"priority":0,
			"skip":false,
			"toNodeId":"vAl0Y",
			"type":"loop"
		},
		{
			"fromNodeId":"vAl0Y",
			"priority":0,
			"skip":false,
			"toNodeId":"mluGv",
			"type":"next"
		},
		{
			"fromNodeId":"mluGv",
			"priority":0,
			"skip":false,
			"toNodeId":"RSDHv",
			"type":"next"
		},
		{
			"fromNodeId":"UPUqx",
			"priority":0,
			"skip":false,
			"toNodeId":"fWYGv",
			"type":"next"
		},
		{
			"fromNodeId":"fWYGv",
			"priority":0,
			"skip":false,
			"toNodeId":"h2AiL",
			"type":"next"
		},
		{
			"fromNodeId":"h2AiL",
			"priority":0,
			"skip":false,
			"toNodeId":"gugc2",
			"type":"next"
		},
		{
			"fromNodeId":"gugc2",
			"priority":0,
			"skip":false,
			"toNodeId":"hpB9E",
			"type":"loop"
		},
		{
			"fromNodeId":"hpB9E",
			"priority":0,
			"skip":false,
			"toNodeId":"1m7kd",
			"type":"loop"
		},
		{
			"fromNodeId":"1m7kd",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"sIzlv",
			"type":"if"
		},
		{
			"fromNodeId":"sIzlv",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"hpB9E",
			"type":"next"
		},
		{
			"fromNodeId":"1m7kd",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"hpB9E",
			"type":"next"
		},
		{
			"fromNodeId":"hpB9E",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"gugc2",
			"type":"next"
		},
		{
			"fromNodeId":"gugc2",
			"priority":0,
			"skip":false,
			"toNodeId":"PDKD0",
			"type":"next"
		},
		{
			"fromNodeId":"PDKD0",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"VheYj",
			"type":"if"
		},
		{
			"fromNodeId":"VheYj",
			"priority":0,
			"skip":false,
			"toNodeId":"O734S",
			"type":"next"
		},
		{
			"fromNodeId":"PDKD0",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"O734S",
			"type":"next"
		},
		{
			"fromNodeId":"O734S",
			"priority":0,
			"skip":false,
			"toNodeId":"n_DBPWL",
			"type":"next"
		},
		{
			"fromNodeId":"n_DBPWL",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_o2wUL",
			"type":"if"
		},
		{
			"fromNodeId":"n_o2wUL",
			"priority":0,
			"skip":false,
			"toNodeId":"eP3GW",
			"type":"next"
		},
		{
			"fromNodeId":"eP3GW",
			"priority":0,
			"skip":false,
			"toNodeId":"kAW68",
			"type":"next"
		},
		{
			"fromNodeId":"3B2aZ",
			"priority":0,
			"skip":false,
			"toNodeId":"kAW68",
			"type":"next"
		},
		{
			"fromNodeId":"kHTmt",
			"priority":0,
			"skip":false,
			"toNodeId":"kAW68",
			"type":"next"
		},
		{
			"fromNodeId":"n_DBPWL",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"kAW68",
			"type":"next"
		},
		{
			"fromNodeId":"kAW68",
			"priority":0,
			"skip":false,
			"toNodeId":"nGqrB",
			"type":"loop"
		},
		{
			"fromNodeId":"nGqrB",
			"priority":0,
			"skip":false,
			"toNodeId":"3B2aZ",
			"type":"next"
		},
		{
			"fromNodeId":"3B2aZ",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"kHTmt",
			"type":"error"
		},
		{
			"fromNodeId":"kAW68",
			"priority":0,
			"skip":false,
			"toNodeId":"CQKch",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"67acf79bd8c1996958569131",
	"lastModifiedBy":0,
	"lcName":"upsert graph (hybrid+async) | graphrag",
	"modifiedTime":1761722837239,
	"name":"Upsert Graph (Hybrid+Async) | GraphRAG",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root.setup":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":49,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"ICSAq",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"completion_flag":{
							"type":"boolean",
							"title":"completion_flag",
							"default":false
						},
						"finalNodeTypes":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"finalNodeTypes"
						},
						"nodeIDs":{
							"type":"array",
							"items":{
								"type":"integer"
							},
							"title":"nodeIDs"
						}
					},
					"additionalProperties":false,
					"required":[
						"finalNodeTypes",
						"nodeIDs"
					]
				},
				"setup":{
					"type":"object",
					"properties":{
						"relationships":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"relationships"
						},
						"entities":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"Name"
									},
									"description":{
										"type":"string",
										"title":"Description"
									},
									"sourceChunkID":{
										"type":"string",
										"title":"Source Chunk ID"
									},
									"type":{
										"type":"string",
										"title":"Type"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"entities"
						},
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"batchSize":{
							"type":"integer",
							"title":"batchSize",
							"default":"20"
						}
					},
					"additionalProperties":false,
					"required":[
						"entities",
						"relationships",
						"graphId",
						"batchSize"
					]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger from automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":107,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"n_IT6TV",
			"index":2,
			"inputs":{
				"automationId":"6889ce2bac75fa6f1c5c0ca4",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"batchSize":"20",
					"relationships":{
						"source":"{{ ICSAq.outputs.relationships }}",
						"ua:type":"mappedArray",
						"items":"{{ ICSAq.outputs.relationships[0] }}"
					},
					"entities":{
						"source":"{{ ICSAq.outputs.entities }}",
						"ua:type":"mappedArray",
						"items":{
							"name":"{{ ICSAq.outputs.entities[0].name }}",
							"description":"{{ ICSAq.outputs.entities[0].description }}",
							"sourceChunkID":"{{ ICSAq.outputs.entities[0].sourceChunkID }}",
							"type":"{{ ICSAq.outputs.entities[0].type }}"
						}
					},
					"graphId":"{{ ICSAq.outputs.graphId }}"
				}
			},
			"skip":true,
			"subTitle":"[TEMP] - TESTING V2",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":158,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"a9Vuj",
			"index":3,
			"inputs":{
				"code":"# TODO: Implement logic for updating node/relationship descriptions when repeated\n\n# TODO: Look into de-duplication in case of exact duplicate entities/relationships. How are the descriptions updated in that case.\n\n# TODO: Move upsertion logic to chunk level upsertion in the graph extraction automation itself",
				"isAsync":false
			},
			"skip":true,
			"subTitle":"TODO",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":245,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"Eck9U",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"repeatedNodesQuery":{
							"type":"string",
							"title":"repeatedNodesQuery"
						}
					},
					"additionalProperties":false,
					"required":[
						"repeatedNodesQuery"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"nodes"
						},
						"graphId":{
							"type":"string",
							"title":"graphId"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodes",
						"graphId"
					]
				},
				"code":"cypher_query = \"WITH [\\n\"\n\n# Build array of {etype: ..., ename: ...} maps\nmaps = []\nfor entity in nodes:\n    etype = entity['type'].replace(\"'\", \"\\\\'\")\n    ename = entity['name'].replace(\"'\", \"\\\\'\")\n    desc = entity['description'].replace(\"'\", \"\\\\'\")\n    source = entity['sourceChunkID']\n    maps.append(\n      \"{type: \"\n      f\"'{etype}', name: '{ename}', source: '{source}', description: '{desc}'\"\n      \"}\"\n    )\n\n# Join them as a single Cypher list\ncypher_query += \",\\n\".join(maps)\ncypher_query += \"] AS entityList\\n\"\n\ncypher_query += f\"\"\"\nUNWIND entityList AS entity\nOPTIONAL MATCH (n:{graphId}_NODE)\nWHERE n.type = entity.type\n  AND n.name = entity.name\nWITH entity.type AS type, \n     entity.name AS name, \n     entity.source AS source, \n     entity.description AS description, \n     collect(n) AS nodes\nRETURN type, \n       name,\n       source, \n       description, \"\"\" + \"[node IN nodes | {id: id(node), description: node.description, sourceChunks: node.sourceChunkID}] AS duplicateNodes\"\n# \"CASE  WHEN size(nodes) > 1 THEN [node IN nodes | {id: id(node), description: node.description, sourceChunks: node.sourceChunkID}] AS duplicateNodes ELSE [] END AS duplicateNodes\"\n\nresult = {\n  'repeatedNodesQuery': cypher_query\n}",
				"isAsync":false,
				"parameters":{
					"nodes":{
						"source":"{{ ICSAq.outputs.entities }}",
						"ua:type":"mappedArray",
						"items":"{{ ICSAq.outputs.entities[0] }}"
					},
					"graphId":"{{ ICSAq.outputs.graphId }}"
				}
			},
			"skip":true,
			"subTitle":"Find Repeated Nodes",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{}
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"dw2UB",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"repeatedNodesQuery":{
							"type":"string",
							"title":"repeatedNodesQuery"
						}
					},
					"additionalProperties":false,
					"required":[
						"repeatedNodesQuery"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"nodes"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodes",
						"graphId"
					]
				},
				"compile_static":false,
				"code":"// Begin building the Cypher query\ndef cypher_query = \"WITH [\\n\"\n\n// Build array of {etype: ..., ename: ...} maps\ndef maps = []\n\n// Take input using binding or default to empty list\ndef nodes = binding.hasVariable(\"nodes\") ? binding.getVariable(\"nodes\") : []\n\nfor (entity in nodes) {\n    def etype = entity['type']?.replace(\"'\", \"\\\\'\")\n    def ename = entity['name']?.replace(\"'\", \"\\\\'\")\n    def desc = entity['description']?.replace(\"'\", \"\\\\'\")\n    def source = entity['sourceChunkID']\n    maps << \"{type: '${etype}', name: '${ename}', source: '${source}', description: '${desc}'}\"\n}\n\n// Join them as a single Cypher list\ncypher_query += maps.join(\",\\n\")\ncypher_query += \"] AS entityList\\n\"\n\n// Get graphId from binding (or empty string)\ndef graphId = binding.hasVariable(\"graphId\") ? binding.getVariable(\"graphId\") : \"\"\n\n// Continue building the Cypher query\ncypher_query += \"\"\"\nUNWIND entityList AS entity\nOPTIONAL MATCH (n:${graphId}_NODE)\nWHERE toUpper(n.type) = toUpper(entity.type)\n  AND toUpper(n.name) = toUpper(entity.name)\nWITH entity.type AS type, \n     entity.name AS name, \n     entity.source AS source, \n     entity.description AS description, \n     collect(n) AS nodes\nRETURN type, \n       name,\n       source, \n       description, [node IN nodes | {id: id(node), description: node.description, sourceChunks: node.sourceChunkID}] AS duplicateNodes\n\"\"\"\n\n// Package final result in a map\ndef result = [\n  'repeatedNodesQuery': cypher_query.toString()\n]",
				"parameters":{
					"graphId":"{{ ICSAq.outputs.graphId }}",
					"nodes":{
						"source":"{{ ICSAq.outputs.entities }}",
						"ua:type":"mappedArray",
						"items":"{{ ICSAq.outputs.entities[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Find Repeated Nodes",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":278,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"fKcmZ",
			"index":6,
			"inputs":{
				"automationId":"67a9e903bdf95a2dab1df8cb",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"cypherQuery":"{{ dw2UB.outputs.result.repeatedNodesQuery }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Neo4j: Nodes",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":245,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"k2BU8",
			"index":7,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"refinedEntities":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"refinedEntities"
						}
					},
					"additionalProperties":false,
					"required":[
						"refinedEntities"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"dbOutput":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"dbOutput"
						}
					},
					"additionalProperties":false,
					"required":[
						"dbOutput"
					]
				},
				"code":"# This code does:\n# If node doesn't exist in graph, create a new one\n# If it nodes exists (same name&type), then update the existing node\n# This is done by using the exsiting node's id\n\nrefined_entities = []\nfor node in dbOutput:\n  # Ideally, this should be a list with <= 1 element, if it's not, I will just work with the first one (if it exists)\n  duplicated_node = node['duplicateNodes'][0] if len(node['duplicateNodes']) > 0 else {}\n  \n  all_sources = duplicated_node.get('sourceChunks', [])\n  if not isinstance(all_sources, list):\n    all_sources = [all_sources] \n  all_sources.append(node['source'])\n  new_description = duplicated_node.get('description', '') + '\\n' + node['description']\n\n  duplicated_node['sourceChunkID'] = list(set(all_sources))\n  duplicated_node['type'] = node['type']\n  duplicated_node['name'] = node['name']\n  duplicated_node['description'] = new_description # TODO: This description might need to be summarized by an LLM\n  duplicated_node.pop('sourceChunks', None)\n\n  refined_entities.append(duplicated_node)\n\nresult = {\n  'refinedEntities': refined_entities\n}",
				"isAsync":false,
				"parameters":{
					"dbOutput":{
						"source":"{{ fKcmZ.outputs.blocks }}",
						"ua:type":"mappedArray",
						"items":"{{ fKcmZ.outputs.blocks[0] }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Get Refined Nodes",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{}
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"W1NEY",
			"index":8,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"refinedEntities":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"refinedEntities"
						}
					},
					"additionalProperties":false,
					"required":[
						"refinedEntities"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"dbOutput":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"dbOutput"
						}
					},
					"additionalProperties":false,
					"required":[
						"dbOutput"
					]
				},
				"compile_static":false,
				"code":"// This code does:\n// If node doesn't exist in graph, create a new one\n// If it nodes exists (same name&type), then update the existing node\n// This is done by using the exsiting node's id\n\ndef dbOutput = binding.hasVariable(\"dbOutput\") ? binding.getVariable(\"dbOutput\") : []\ndef refined_entities = []\nfor (node in dbOutput) {\n  // Ideally, this should be a list with <= 1 element, if it's not, I will just work with the first one (if it exists)\n  def duplicated_node = (node['duplicateNodes'] && node['duplicateNodes'].size() > 0) ? node['duplicateNodes'][0] : [:]\n\n  def all_sources = duplicated_node.containsKey('sourceChunks') ? duplicated_node['sourceChunks'] : []\n  if (!(all_sources instanceof List)) {\n    all_sources = [all_sources]\n  }\n  all_sources << node['source']\n  def new_description = (duplicated_node.containsKey('description') ? duplicated_node['description'] : '') + '\\n' + node['description']\n\n  duplicated_node['sourceChunkID'] = all_sources.toSet().toList()\n  duplicated_node['type'] = node['type']\n  duplicated_node['name'] = node['name']\n  duplicated_node['description'] = new_description // TODO: This description might need to be summarized by an LLM\n  duplicated_node.remove('sourceChunks')\n\n  refined_entities << duplicated_node\n}\n\ndef result = [\n  refinedEntities: refined_entities\n]",
				"parameters":{
					"dbOutput":{
						"source":"{{ fKcmZ.outputs.blocks }}",
						"ua:type":"mappedArray",
						"items":"{{ fKcmZ.outputs.blocks[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Get Refined Nodes",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":266,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"F9dYq",
			"index":9,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object",
									"properties":{},
									"additionalProperties":false,
									"required":[]
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"nodeIDs",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"nodeIDs",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{},
								"required":[]
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Node IDs",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":160,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"HbZNP",
			"index":10,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodeBatchQueries":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeBatchQueries"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodeBatchQueries"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"entities":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"entities"
						},
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"batchSize":{
							"type":"integer",
							"title":"batchSize"
						}
					},
					"additionalProperties":false,
					"required":[
						"entities",
						"graphId",
						"batchSize"
					]
				},
				"code":"# TODO, insert nodes here, and then use the same ids for opensearch\nbatch_queries = []\n\ncurrent_batch_statements = []\ncurrent_batch_nodes = []  # Track current batch node aliases (used in cypher query)\nnode_texts = []\nbatch_size = batchSize\n\nfor i, entity in enumerate(entities):\n    etype = entity['type'].replace(\"'\", \"\\\\'\")\n    ename = entity['name'].replace(\"'\", \"\\\\'\")\n    edesc = entity['description'].replace(\"'\", \"\\\\'\")\n    source = entity['sourceChunkID']\n    node_id = entity.get('id', None)\n\n    node_label = graphId + '_NODE'\n    node_alias = f\"n{i}\"\n    current_batch_nodes.append(node_alias)\n\n    if isinstance(source, str):\n        source = [source]\n\n    # If node_id is present, we MATCH by internal id(...) and SET the properties.\n    # Otherwise, MERGE a new node.\n    if node_id is not None:\n        # For existing node:\n        match_and_set = (\n            f\"MATCH ({node_alias}:{node_label}) \"\n            f\"WHERE id({node_alias}) = {node_id} \"\n            f\"SET {node_alias}.name = '{ename}', \"\n            f\"{node_alias}.type = '{etype}', \"\n            f\"{node_alias}.description = '{edesc}', \"\n            f\"{node_alias}.sourceChunkID = {source} \"\n            # Chain to next statement with WITH:\n            f\"WITH {', '.join(current_batch_nodes)}\"\n        )\n        current_batch_statements.append(match_and_set)\n    else:\n        # For brand-new node:\n        merge_statement = (\n            f\"MERGE ({node_alias}:{node_label} \"\n            \"{ \"\n            f\"name: '{ename}', \"\n            f\"type: '{etype}', \"\n            f\"description: '{edesc}', \"\n            f\"sourceChunkID: {source} \"\n            \"}) \"\n            # Chain with WITH:\n            f\"WITH {', '.join(current_batch_nodes)}\"\n        )\n        current_batch_statements.append(merge_statement)\n\n\n    # Batching:\n    if len(current_batch_statements) == batch_size or i == len(entities) - 1:\n        # Create a WITH clause to pass all node aliases to the UNWIND step\n        with_clause = \"WITH \" + \", \".join(current_batch_nodes)\n\n        # Build the UNWIND clause to return fields for each node\n        unwind_list = []\n        for node_alias in current_batch_nodes:\n            # Return both name and internal id:\n            unwind_list.append(\n                (\n                    \"{ \"\n                    f\"name: {node_alias}.name, \"\n                    f\"id: id({node_alias}) \"\n                    \"}\"\n                )\n            )\n\n        unwind_clause = (\n            \"UNWIND [\"\n            + \", \".join(unwind_list)\n            + \"] AS row \"\n            + \"RETURN row.name AS name, row.id AS id\"\n        )\n\n        merges_str = \" \".join(current_batch_statements)\n        batch_query = f\"{merges_str} {with_clause} {unwind_clause}\"\n\n        batch_queries.append(batch_query)\n\n        current_batch_statements = []\n        current_batch_nodes = []\n\nresult = {\n    'nodeBatchQueries': batch_queries\n}",
				"isAsync":false,
				"parameters":{
					"graphId":"{{ ICSAq.outputs.graphId }}",
					"batchSize":"{{ ICSAq.outputs.batchSize }}",
					"entities":{
						"ua:type":"mappedArray",
						"source":"{{ W1NEY.outputs.result.refinedEntities }}",
						"items":"{{ W1NEY.outputs.result.refinedEntities[0] }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Insert Nodes Queries",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"ODnjA",
			"index":11,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodeBatchQueries":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeBatchQueries"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodeBatchQueries"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"batchSize":{
							"type":"integer",
							"title":"batchSize"
						},
						"entities":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"entities"
						},
						"graphId":{
							"type":"string",
							"title":"graphId"
						}
					},
					"additionalProperties":false,
					"required":[
						"batchSize",
						"entities",
						"graphId"
					]
				},
				"compile_static":false,
				"code":"// TODO, insert nodes here, and then use the same ids for opensearch\ndef batch_queries = []\n\ndef current_batch_statements = []\ndef current_batch_nodes = [] // Track current batch node aliases (used in cypher query)\ndef node_texts = []\n\n// Use binding for inputs\ndef entities = binding.hasVariable(\"entities\") ? binding.getVariable(\"entities\") : []\ndef batchSize = binding.hasVariable(\"batchSize\") ? binding.getVariable(\"batchSize\") : 0\ndef graphId = binding.hasVariable(\"graphId\") ? binding.getVariable(\"graphId\") : \"\"\n\n// Always insure strings for aliases\ndef batch_size = batchSize\n\nfor (int i = 0; i < entities.size(); i++) {\n    def entity = entities[i]\n    def etype = entity['type']?.replace(\"'\", \"\\\\'\")?.toString()\n    def ename = entity['name']?.replace(\"'\", \"\\\\'\")?.toString()\n    def edesc = entity['description']?.replace(\"'\", \"\\\\'\")?.toString()\n    def source = entity['sourceChunkID']\n    def node_id = entity.containsKey('id') ? entity['id'] : null\n\n    def node_label = (graphId + '_NODE').toString()\n    def node_alias = \"n${i}\".toString()\n    current_batch_nodes << node_alias\n\n    // If source is a string, wrap in list\n    if (source instanceof String) {\n        source = [source]\n    }\n\n    // Format sourceChunkID so array prints as ['val1', 'val2'] with single quotes\n    def sourceStr\n    if (source instanceof Collection) {\n        sourceStr = \"[\" + source.collect { s -> \"'${s.toString().replace(\"'\", \"\\\\'\")}'\" }.join(\", \").toString() + \"]\"\n    } else {\n        sourceStr = \"'${source?.toString()?.replace(\"'\", \"\\\\'\")}'\"\n    }\n\n    // If node_id is present, we MATCH by internal id(...) and SET the properties.\n    // Otherwise, MERGE a new node.\n    if (node_id != null) {\n        // For existing node:\n        def match_and_set = (\n            \"MATCH (${node_alias}:${node_label}) \" +\n            \"WHERE id(${node_alias}) = ${node_id.toString()} \" +\n            \"SET ${node_alias}.name = '${ename}', \" +\n            \"${node_alias}.type = '${etype}', \" +\n            \"${node_alias}.description = '${edesc}', \" +\n            \"${node_alias}.sourceChunkID = ${sourceStr} \" +\n            // Chain to next statement with WITH:\n            \"WITH ${current_batch_nodes.join(', ').toString()}\"\n        ).toString()\n        current_batch_statements << match_and_set\n    } else {\n        // For brand-new node:\n        def merge_statement = (\n            \"MERGE (${node_alias}:${node_label} \" +\n            \"{ \" +\n            \"name: '${ename}', \" +\n            \"type: '${etype}', \" +\n            \"description: '${edesc}', \" +\n            \"sourceChunkID: ${sourceStr} \" +\n            \"}) \" +\n            // Chain with WITH:\n            \"WITH ${current_batch_nodes.join(', ').toString()}\"\n        ).toString()\n        current_batch_statements << merge_statement\n    }\n\n    // Batching:\n    if (current_batch_statements.size() == batch_size || i == entities.size() - 1) {\n        // Create a WITH clause to pass all node aliases to the UNWIND step\n        def with_clause = \"WITH \" + current_batch_nodes.join(', ').toString()\n\n        // Build the UNWIND clause to return fields for each node\n        def unwind_list = []\n        for (def alias : current_batch_nodes) { // Ensure different variable than 'node_alias'\n            // Return both name and internal id:\n            unwind_list << (\n                \"{ \" +\n                \"name: ${alias}.name, \" +\n                \"id: id(${alias}) \" +\n                \"}\"\n            ).toString()\n        }\n\n        def unwind_clause = (\n            \"UNWIND [\" +\n            unwind_list.join(', ').toString() +\n            \"] AS row \" +\n            \"RETURN row.name AS name, row.id AS id\"\n        ).toString()\n\n        def merges_str = current_batch_statements.join(\" \").toString()\n        def batch_query = \"${merges_str} ${with_clause} ${unwind_clause}\".toString()\n\n        batch_queries << batch_query.toString()\n\n        current_batch_statements = []\n        current_batch_nodes = []\n    }\n}\n\ndef result = [\n    nodeBatchQueries: batch_queries.collect { it.toString() }\n]",
				"parameters":{
					"entities":{
						"source":"{{ W1NEY.outputs.result.refinedEntities }}",
						"ua:type":"mappedArray",
						"items":"{{ W1NEY.outputs.result.refinedEntities[0] }}"
					},
					"graphId":"{{ ICSAq.outputs.graphId }}",
					"batchSize":"{{ ICSAq.outputs.batchSize }}"
				}
			},
			"skip":false,
			"subTitle":"Insert Nodes Queries",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":234,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"N9JXC",
			"index":12,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ ODnjA.outputs.result.nodeBatchQueries }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop (Neo4j)",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":278,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"N9JXC@0EVdK-1@l",
			"id":"Vc8F4",
			"index":13,
			"inputs":{
				"automationId":"67a9e903bdf95a2dab1df8cb",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"cypherQuery":"{{ N9JXC.outputs.item }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Neo4j: Nodes",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemsToAdd.items.name",
					"root.itemsToAdd.items.id",
					"root.itemsToAdd.items.type"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":204,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"N9JXC@0EVdK-1@l",
			"id":"astB4",
			"index":14,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ Vc8F4.outputs.blocks }}",
					"items":"{{ Vc8F4.outputs.blocks[0] }}"
				},
				"listName":"{{ F9dYq.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Extend node IDs",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":160,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"BTI0b",
			"index":15,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"insertRelQuery":{
							"type":"string",
							"title":"insertRelQuery"
						},
						"nodeToIdMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Node To Id Map"
						}
					},
					"additionalProperties":false,
					"required":[
						"insertRelQuery"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"relationships":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"relationships"
						},
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"nodeIDs":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"nodeIDs"
						}
					},
					"additionalProperties":false,
					"required":[
						"relationships",
						"graphId",
						"nodeIDs"
					]
				},
				"code":"def rel_to_cypher_map(d):\n    return (\n        \"{ \"\n        f\"sourceId: {d['sourceId']}, \"\n        f\"targetId: {d['targetId']}, \"\n        f\"description: '{d['description']}', \"\n        f\"sourceChunkID: '{d['sourceChunkID']}' \"\n        \"}\"\n    )\n\nname_to_id_map = { record[\"name\"]: record[\"id\"] for record in nodeIDs }\n\nrel_data = []\nfor r in relationships:\n    src_name = r['source_node_name']\n    tgt_name = r['target_node_name']\n    \n    if src_name not in name_to_id_map or tgt_name not in name_to_id_map:\n        continue\n    \n    source_id = name_to_id_map[src_name]\n    target_id = name_to_id_map[tgt_name]\n    desc = r['description'].replace(\"'\", \"\\\\'\")\n    source_chunk_id = r['sourceChunkID']\n    \n    # Collect the relationship info in Python\n    rel_data.append({\n        \"sourceId\": source_id,\n        \"targetId\": target_id,\n        \"description\": desc,\n        \"sourceChunkID\": source_chunk_id\n    })\n\ncypher_map_array = \"[\" + \", \".join(\"{\" + f\"sourceId: {d['sourceId']}, targetId: {d['targetId']}, description: '{d['description']}', sourceChunkID: '{d['sourceChunkID']}' \" + \"}\" for d in rel_data) + \"]\"\n\n# Relationship label, e.g. MYGRAPH_REL\nrel_type = f\"{graphId}_REL\"\n\n# Final single query using UNWIND\none_relationship_query = (\n    f\"UNWIND {cypher_map_array} AS r \" \n    \"MATCH (s) WHERE id(s) = r.sourceId \"\n    \"MATCH (t) WHERE id(t) = r.targetId \"\n    f\"MERGE (s)-[:{rel_type} \"\n    \"{\"\n    \"sourceChunkID: r.sourceChunkID, \"\n    \"description: r.description \"\n    \"}]->(t)\"\n)\n\nresult = {\n    'insertRelQuery': one_relationship_query,\n    'nodeToIdMap': name_to_id_map\n}",
				"isAsync":false,
				"parameters":{
					"relationships":{
						"source":"{{ ICSAq.outputs.relationships }}",
						"ua:type":"mappedArray",
						"items":"{{ ICSAq.outputs.relationships[0] }}"
					},
					"graphId":"{{ ICSAq.outputs.graphId }}",
					"nodeIDs":{
						"source":"{{ F9dYq.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ F9dYq.outputs.items[0] }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Rel Query & Node Mappings",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"wDS65",
			"index":16,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"insertRelQuery":{
							"type":"string",
							"title":"insertRelQuery"
						},
						"nodeToIdMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Node To Id Map"
						}
					},
					"additionalProperties":false,
					"required":[
						"insertRelQuery"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"nodeIDs":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"nodeIDs"
						},
						"relationships":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"relationships"
						}
					},
					"additionalProperties":false,
					"required":[
						"graphId",
						"nodeIDs",
						"relationships"
					]
				},
				"compile_static":false,
				"code":"// Helper to simulate optional input\ndef nodeIDs = binding.hasVariable(\"nodeIDs\") ? binding.getVariable(\"nodeIDs\") : []\ndef relationships = binding.hasVariable(\"relationships\") ? binding.getVariable(\"relationships\") : []\ndef graphId = binding.hasVariable(\"graphId\") ? binding.getVariable(\"graphId\") : \"\"\n\n// Build name to id map from nodeIDs\n// Equivalent of: name_to_id_map = { record[\"name\"]: record[\"id\"] for record in nodeIDs }\ndef name_to_id_map = [:]\nnodeIDs.each { record ->\n    name_to_id_map[record[\"name\"]] = record[\"id\"]\n}\n\ndef rel_data = []\nrelationships.each { r ->\n    def src_name = r['source_node_name']\n    def tgt_name = r['target_node_name']\n    \n    if (!name_to_id_map.containsKey(src_name) || !name_to_id_map.containsKey(tgt_name)) {\n        return // continue\n    }\n    \n    def source_id = name_to_id_map[src_name]\n    def target_id = name_to_id_map[tgt_name]\n    // Escape single quotes in description\n    def desc = r['description']?.replace(\"'\", \"\\\\'\")\n    def source_chunk_id = r['sourceChunkID']\n    \n    // Collect the relationship info in Groovy\n    rel_data << [\n        sourceId: source_id,\n        targetId: target_id,\n        description: desc,\n        sourceChunkID: source_chunk_id\n    ]\n}\n\n// Manually build the Cypher map array string (equivalent to list comprehension)\ndef maps = rel_data.collect { d ->\n    \"{sourceId: ${d['sourceId']}, targetId: ${d['targetId']}, description: '${d['description']}', sourceChunkID: '${d['sourceChunkID']}' }\"\n}\ndef cypher_map_array = \"[\" + maps.join(\", \") + \"]\"\n\n// Relationship label, e.g. MYGRAPH_REL\ndef rel_type = \"${graphId}_REL\"\n\n// Final single query using UNWIND\ndef one_relationship_query =\n    \"UNWIND ${cypher_map_array} AS r \" +\n    \"MATCH (s) WHERE id(s) = r.sourceId \" +\n    \"MATCH (t) WHERE id(t) = r.targetId \" +\n    \"MERGE (s)-[:${rel_type} {sourceChunkID: r.sourceChunkID, description: r.description }]->(t)\"\n\n// Output result as in Python\ndef result = [\n    insertRelQuery: one_relationship_query.toString(),\n    nodeToIdMap: name_to_id_map\n]",
				"parameters":{
					"graphId":"{{ ICSAq.outputs.graphId }}",
					"relationships":{
						"source":"{{ ICSAq.outputs.relationships }}",
						"ua:type":"mappedArray",
						"items":"{{ ICSAq.outputs.relationships[0] }}"
					},
					"nodeIDs":{
						"source":"{{ F9dYq.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ F9dYq.outputs.items[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Rel Query & Node Mappings",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":278,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"7JXWc",
			"index":17,
			"inputs":{
				"automationId":"67a9e903bdf95a2dab1df8cb",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"cypherQuery":"{{ wDS65.outputs.result.insertRelQuery }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Neo4j: Rels",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":160,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"vhfba",
			"index":18,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodeTexts":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeTexts"
						},
						"id_list":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Id List"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodeTexts",
						"id_list"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"entities":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"entities"
						},
						"nodeToIdMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Node To Id Map"
						}
					},
					"additionalProperties":false,
					"required":[
						"entities"
					]
				},
				"code":"node_texts = []\nid_list = []\n\n\nfor i, entity in enumerate(entities):\n    etype = entity['type']\n    ename = entity['name']\n    edesc = entity['description']\n\n    node_text = f\"Entity: {ename} [{etype}]\\nDescription: {edesc}\"\n    node_texts.append(node_text)\n    id_list.append(str(nodeToIdMap[ename]))\n\nresult = {\n    'nodeTexts': node_texts,\n    'id_list': id_list\n}",
				"isAsync":false,
				"parameters":{
					"entities":{
						"ua:type":"mappedArray",
						"source":"{{ W1NEY.outputs.result.refinedEntities }}",
						"items":"{{ W1NEY.outputs.result.refinedEntities[0] }}"
					},
					"nodeToIdMap":"{{ wDS65.outputs.result.nodeToIdMap }}"
				}
			},
			"skip":true,
			"subTitle":"Node Texts & ID List",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{}
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"HhDcC",
			"index":19,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"id_list":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"id_list"
						},
						"nodeTexts":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeTexts"
						}
					},
					"additionalProperties":false,
					"required":[
						"id_list",
						"nodeTexts"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"entities":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"entities"
						},
						"nodeToIdMap":{
							"type":"object",
							"properties":{},
							"title":"nodeToIdMap",
							"additionalProperties":false,
							"required":[]
						}
					},
					"additionalProperties":false,
					"required":[
						"entities"
					]
				},
				"compile_static":false,
				"code":"// Initialize lists\ndef node_texts = []\ndef id_list = []\n\n// Assume 'entities' and 'nodeToIdMap' are provided via binding\ndef entities = binding.hasVariable(\"entities\") ? binding.getVariable(\"entities\") : []\ndef nodeToIdMap = binding.hasVariable(\"nodeToIdMap\") ? binding.getVariable(\"nodeToIdMap\") : [:]\n\n// Iterate over entities with index\nfor (int i = 0; i < entities.size(); i++) {\n    // Access entity elements\n    def entity = entities[i]\n    def etype = entity['type']\n    def ename = entity['name']\n    def edesc = entity['description']\n\n    // Compose node text\n    def node_text = \"Entity: ${ename} [${etype}]\\nDescription: ${edesc}\"\n    node_texts << node_text.toString()\n    id_list << nodeToIdMap[ename]?.toString()\n}\n\n// Compose result\ndef result = [\n    nodeTexts: node_texts,\n    id_list: id_list\n]",
				"parameters":{
					"nodeToIdMap":"{{ wDS65.outputs.result.nodeToIdMap }}",
					"entities":{
						"source":"{{ W1NEY.outputs.result.refinedEntities }}",
						"ua:type":"mappedArray",
						"items":"{{ W1NEY.outputs.result.refinedEntities[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Node Texts & ID List",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":381,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"Aomox",
			"index":20,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"signalsList",
				"ua:list_type":"STRING"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"signalsList",
							"disableActions":true,
							"items":{
								"type":"string"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"signals",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":371,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"rWQoV",
			"index":21,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ HhDcC.outputs.result.nodeTexts }})",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"No nodeTexts?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":383,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"rWQoV@0EVdK-1@y",
			"id":"zvC0F",
			"index":22,
			"inputs":{
				"result":{
					"completion_flag":false
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":2,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"UPUqx",
			"index":23,
			"inputs":{
				"repeatMode":"BATCH",
				"listSource":"{{ HhDcC.outputs.result.nodeTexts }}",
				"captureIterations":false,
				"batchSize":8
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":381,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"UPUqx@0EVdK-1@l",
			"id":"vAl0Y",
			"index":24,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"signalId":{
							"type":"string",
							"title":"Signal Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"import java.util.UUID\n\ndef uuid = UUID.randomUUID().toString()\n\nreturn [\n  \"signalId\": uuid\n]\n"
			},
			"skip":false,
			"subTitle":"Generate signal id",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":384,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"UPUqx@0EVdK-1@l",
			"id":"mluGv",
			"index":25,
			"inputs":{
				"automationId":"6835fee20c98860093446f9c",
				"runtimeConnections":{},
				"synchronous":false,
				"triggerWorkflowWithRuntimeType":"IN_MEMORY",
				"version":"-1",
				"parameters":{
					"signalProperties":{
						"signalId":"{{ vAl0Y.outputs.result.signalId }}",
						"waitingInstanceId":"{{ __RUN__.outputs.executionId }}",
						"waitingInstanceRunTimeType":"{{ __RUN__.outputs.workflowRunTimeType }}"
					},
					"textBatch":{
						"ua:type":"mappedArray",
						"source":"{{ UPUqx.outputs.item }}",
						"items":"{{ UPUqx.outputs.item[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Embeddings",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":2,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"UPUqx@0EVdK-1@l",
			"id":"RSDHv",
			"index":26,
			"inputs":{
				"itemToAdd":"{{ vAl0Y.outputs.result.signalId }}",
				"insertLocation":"END",
				"listName":"{{ Aomox.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"signals_by_unifyapps",
				"resourceVersion":376,
				"resourceName":"signals_by_unifyapps_wait_for_signals",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"fWYGv",
			"index":27,
			"inputs":{
				"duration":10,
				"unit":"MINUTES",
				"signal_ids":{
					"source":"{{ Aomox.outputs.items }}",
					"ua:type":"mappedArray",
					"items":"{{ Aomox.outputs.items[0] }}"
				},
				"signal_payload":{
					"type":"object",
					"properties":{
						"embeddings":{
							"type":"array",
							"items":{
								"type":"integer"
							},
							"title":"embeddings"
						},
						"embedding_batch":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"index":{
										"type":"integer",
										"title":"index"
									},
									"embeddings":{
										"type":"array",
										"items":{
											"type":"integer"
										},
										"title":"embeddings"
									}
								},
								"additionalProperties":false
							},
							"title":"embedding_batch"
						}
					},
					"additionalProperties":false
				}
			},
			"skip":false,
			"subTitle":"Signals by UnifyApps",
			"title":"Wait for fetch embeddings",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":2,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"h2AiL",
			"index":28,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object",
									"properties":{
										"embeddings":{
											"type":"array",
											"items":{
												"type":"number"
											},
											"title":"embeddings"
										}
									},
									"additionalProperties":false
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"embedding_batch",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"embedding_batch",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"embeddings":{
										"type":"array",
										"items":{
											"type":"number"
										},
										"title":"embeddings"
									}
								}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"embedding_batch",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":3,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"gugc2",
			"index":29,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ Aomox.outputs.items }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":2,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"gugc2@0EVdK-1@l",
			"id":"hpB9E",
			"index":30,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ fWYGv.outputs.signals }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"iterate on signals",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":3,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"hpB9E@gugc2@0EVdK-1@l@l",
			"id":"1m7kd",
			"index":31,
			"inputs":{
				"filters":[
					{
						"property":"{{ hpB9E.outputs.item.signal_id }}",
						"filter":{
							"operator":"EQUAL",
							"value":"{{ gugc2.outputs.item }}"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemsToAdd.items.embeddings.items"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":2,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"1m7kd@hpB9E@gugc2@0EVdK-1@l@l@y",
			"id":"sIzlv",
			"index":32,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ hpB9E.outputs.item.signal_payload.embedding_batch }}",
					"items":{
						"embeddings":{
							"source":"{{ hpB9E.outputs.item.signal_payload.embedding_batch[0].embeddings }}",
							"ua:type":"mappedArray",
							"items":"{{ hpB9E.outputs.item.signal_payload.embedding_batch[0].embeddings[0] }}"
						}
					}
				},
				"listName":"{{ h2AiL.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"embedding_batch",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":371,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"PDKD0",
			"index":33,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ h2AiL.outputs.items }})",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"No embeddings?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":383,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"PDKD0@0EVdK-1@y",
			"id":"VheYj",
			"index":34,
			"inputs":{
				"result":{
					"completion_flag":false
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":205,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"O734S",
			"index":35,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"normalizedVectors":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"embedding":{
										"type":"array",
										"items":{
											"type":"number"
										},
										"title":"embedding"
									}
								},
								"additionalProperties":false,
								"required":[
									"embedding"
								]
							},
							"title":"Normalized Vectors"
						}
					},
					"additionalProperties":false,
					"required":[
						"normalizedVectors"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"vectors":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Vectors"
						}
					},
					"additionalProperties":false,
					"required":[
						"vectors"
					]
				},
				"compile_static":false,
				"code":"def normalizedVectors = vectors.collect { dict ->\n    def vector = dict.embeddings\n    def magnitude = Math.sqrt(vector.collect { it * it }.sum())\n    def normalizedVector = vector.collect { it / magnitude }\n    [embedding: normalizedVector]\n}\n\nreturn [\"normalizedVectors\": normalizedVectors]",
				"parameters":{
					"vectors":{
						"ua:type":"mappedArray",
						"source":"{{ h2AiL.outputs.items }}",
						"items":"{{ h2AiL.outputs.items[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Normalize Vectors",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":439,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"n_DBPWL",
			"index":36,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ HhDcC.outputs.result.id_list }})",
						"filter":{
							"operator":"GT",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_DBPWL@0EVdK-1@y",
			"id":"n_o2wUL",
			"index":37,
			"inputs":{
				"input":{
					"type":"object",
					"properties":{
						"idsList":{
							"type":"string",
							"title":"Ids List"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"return [\n  \"idsList\": idsList\n]",
				"parameters":{
					"idsList":"{{ HhDcC.outputs.result.id_list }}"
				}
			},
			"skip":false,
			"subTitle":"debug remove this",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":374,
				"resourceName":"storage_by_unifyapps_delete_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"n_DBPWL@0EVdK-1@y",
			"id":"eP3GW",
			"index":38,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"IN",
								"value":"{{ HhDcC.outputs.result.id_list }}"
							}
						}
					],
					"operator":"AND"
				},
				"writeThroughSessionVariables":false,
				"object_type":"graph_rag_node_vector_store",
				"numberOfRecordsToDelete":"MULTIPLE",
				"page":{
					"limit":1000,
					"offset":0
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":5,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Delete prev nodes by id",
			"title":"Delete records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":375,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"kAW68",
			"index":39,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ O734S.outputs.result.normalizedVectors }}",
				"captureIterations":true
			},
			"skip":false,
			"subTitle":"Loop (OpenSearch)",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.id_list.items",
					"root.parameters.node_texts.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":374,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kAW68@0EVdK-1@l",
			"id":"nGqrB",
			"index":40,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"cur_id":{
							"type":"string",
							"title":"Cur Id"
						},
						"cur_text":{
							"type":"string",
							"title":"Cur Text"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"idx":{
							"type":"integer",
							"title":"Idx"
						},
						"id_list":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Id List"
						},
						"node_texts":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Node Texts"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"return [\n  cur_id: id_list[idx],\n  cur_text: node_texts[idx]\n]",
				"parameters":{
					"idx":"{{ kAW68.outputs.index }}",
					"node_texts":{
						"ua:type":"mappedArray",
						"source":"{{ HhDcC.outputs.result.nodeTexts }}",
						"items":"{{ HhDcC.outputs.result.nodeTexts[0] }}"
					},
					"id_list":{
						"ua:type":"mappedArray",
						"source":"{{ HhDcC.outputs.result.id_list }}",
						"items":"{{ HhDcC.outputs.result.id_list[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Cur Node ID & text",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":372,
				"resourceName":"storage_by_unifyapps_create_record",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"kAW68@0EVdK-1@l",
			"id":"3B2aZ",
			"index":41,
			"inputs":{
				"writeThroughSessionVariables":false,
				"object_type":"graph_rag_node_vector_store",
				"record":{
					"graphId":"{{ ICSAq.outputs.graphId }}",
					"nodeId":"{{ nGqrB.outputs.result.cur_id }}",
					"nodeText":"{{ nGqrB.outputs.result.cur_text }}",
					"embeddings":{
						"source":"{{ kAW68.outputs.item.embedding }}",
						"ua:type":"mappedArray",
						"items":"{{ kAW68.outputs.item.embedding[0] }}"
					}
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Create record",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.record.embeddings.items"
				]
			},
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":79,
				"resourceName":"storage_by_unifyapps_create_record",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"3B2aZ@kAW68@0EVdK-1@l@error",
			"id":"kHTmt",
			"index":42,
			"inputs":{
				"writeThroughSessionVariables":false,
				"object_type":"dummy_embed",
				"record":{
					"graphId":"{{ ICSAq.outputs.graphId }}",
					"nodeId":"{{ nGqrB.outputs.result.cur_id }}",
					"nodeText":"{{ nGqrB.outputs.result.cur_text }}",
					"embeddings":{
						"source":"{{ kAW68.outputs.item.embedding }}",
						"ua:type":"mappedArray",
						"items":"{{ kAW68.outputs.item.embedding[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Create record",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":45,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"0EVdK-1",
			"id":"CQKch",
			"index":43,
			"inputs":{
				"result":{
					"completion_flag":true,
					"finalNodeTypes":{
						"source":"1",
						"ua:type":"mappedArray",
						"items":"1"
					},
					"nodeIDs":{
						"ua:type":"mappedArray",
						"source":"{{ HhDcC.outputs.result.id_list }}",
						"items":"{{ HhDcC.outputs.result.id_list[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":2620,
	"projectId":135,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"GraphRAG"
	],
	"version":98
}