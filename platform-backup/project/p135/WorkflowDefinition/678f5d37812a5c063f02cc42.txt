{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1737448759086,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296328348,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd88d60dd816d77991a8",
		"status":"DEPLOYED",
		"version":90,
		"workflowVersion":182
	},
	"edges":[
		{
			"fromNodeId":"Zbdng",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Og65l",
			"type":"next"
		},
		{
			"fromNodeId":"n_Og65l",
			"priority":0,
			"skip":false,
			"toNodeId":"JPkno",
			"type":"next"
		},
		{
			"fromNodeId":"JPkno",
			"priority":0,
			"skip":false,
			"toNodeId":"aqzOV",
			"type":"next"
		},
		{
			"fromNodeId":"aqzOV",
			"priority":0,
			"skip":false,
			"toNodeId":"RSrF8",
			"type":"next"
		},
		{
			"fromNodeId":"RSrF8",
			"priority":0,
			"skip":false,
			"toNodeId":"h26Do",
			"type":"next"
		},
		{
			"fromNodeId":"h26Do",
			"priority":0,
			"skip":false,
			"toNodeId":"s5OIX",
			"type":"next"
		},
		{
			"fromNodeId":"s5OIX",
			"priority":0,
			"skip":false,
			"toNodeId":"nBz8e",
			"type":"next"
		},
		{
			"fromNodeId":"nBz8e",
			"priority":0,
			"skip":false,
			"toNodeId":"v1Ad1",
			"type":"next"
		},
		{
			"fromNodeId":"v1Ad1",
			"priority":0,
			"skip":false,
			"toNodeId":"HFQRq",
			"type":"next"
		},
		{
			"fromNodeId":"HFQRq",
			"priority":0,
			"skip":false,
			"toNodeId":"rO3Y0",
			"type":"next"
		},
		{
			"fromNodeId":"rO3Y0",
			"priority":0,
			"skip":false,
			"toNodeId":"FMDKy",
			"type":"loop"
		},
		{
			"fromNodeId":"FMDKy",
			"priority":0,
			"skip":false,
			"toNodeId":"49M7r",
			"type":"next"
		},
		{
			"fromNodeId":"49M7r",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"onYjb",
			"type":"if"
		},
		{
			"fromNodeId":"onYjb",
			"priority":0,
			"skip":false,
			"toNodeId":"Mdtg2",
			"type":"next"
		},
		{
			"fromNodeId":"49M7r",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"Mdtg2",
			"type":"next"
		},
		{
			"fromNodeId":"Mdtg2",
			"priority":0,
			"skip":false,
			"toNodeId":"0hMHS",
			"type":"next"
		},
		{
			"fromNodeId":"0hMHS",
			"priority":0,
			"skip":false,
			"toNodeId":"2pZiR",
			"type":"next"
		},
		{
			"fromNodeId":"2pZiR",
			"priority":0,
			"skip":false,
			"toNodeId":"pLXz9",
			"type":"next"
		},
		{
			"fromNodeId":"pLXz9",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"rO3Y0",
			"type":"next"
		},
		{
			"fromNodeId":"rO3Y0",
			"priority":0,
			"skip":false,
			"toNodeId":"2Kox6",
			"type":"next"
		},
		{
			"fromNodeId":"2Kox6",
			"priority":0,
			"skip":false,
			"toNodeId":"VwaUy",
			"type":"next"
		},
		{
			"fromNodeId":"VwaUy",
			"priority":0,
			"skip":false,
			"toNodeId":"cUU1W",
			"type":"next"
		},
		{
			"fromNodeId":"cUU1W",
			"priority":0,
			"skip":false,
			"toNodeId":"DKuhl",
			"type":"next"
		},
		{
			"fromNodeId":"DKuhl",
			"priority":0,
			"skip":false,
			"toNodeId":"FXGmb",
			"type":"next"
		},
		{
			"fromNodeId":"FXGmb",
			"priority":0,
			"skip":false,
			"toNodeId":"XWiUu",
			"type":"next"
		},
		{
			"fromNodeId":"XWiUu",
			"priority":0,
			"skip":false,
			"toNodeId":"2t2pg",
			"type":"next"
		},
		{
			"fromNodeId":"2t2pg",
			"priority":0,
			"skip":false,
			"toNodeId":"Ov5or",
			"type":"next"
		},
		{
			"fromNodeId":"Ov5or",
			"priority":0,
			"skip":false,
			"toNodeId":"PXUiF",
			"type":"next"
		},
		{
			"fromNodeId":"PXUiF",
			"priority":0,
			"skip":false,
			"toNodeId":"dsa85",
			"type":"next"
		},
		{
			"fromNodeId":"dsa85",
			"priority":0,
			"skip":false,
			"toNodeId":"3VIIw",
			"type":"loop"
		},
		{
			"fromNodeId":"3VIIw",
			"priority":0,
			"skip":false,
			"toNodeId":"4IIfo",
			"type":"next"
		},
		{
			"fromNodeId":"4IIfo",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"dsa85",
			"type":"next"
		},
		{
			"fromNodeId":"dsa85",
			"priority":0,
			"skip":false,
			"toNodeId":"HyE7E",
			"type":"next"
		},
		{
			"fromNodeId":"HyE7E",
			"priority":0,
			"skip":false,
			"toNodeId":"q9zTf",
			"type":"next"
		},
		{
			"fromNodeId":"q9zTf",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"WXx2P",
			"type":"if"
		},
		{
			"fromNodeId":"q9zTf",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"I1BEf",
			"type":"next"
		},
		{
			"fromNodeId":"I1BEf",
			"priority":0,
			"skip":false,
			"toNodeId":"mxyBG",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"678f5d37812a5c063f02cc42",
	"lastModifiedBy":0,
	"lcName":"query ppr | graphrag",
	"modifiedTime":1761722884272,
	"name":"Query PPR | GraphRAG",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":195,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"Zbdng",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"response":{
							"type":"string",
							"title":"response"
						},
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"content":{
										"type":"string",
										"title":"Content"
									},
									"chunk_metadata":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Chunk Metadata"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"chunks"
						}
					},
					"additionalProperties":false,
					"required":[
						"response",
						"chunks"
					]
				},
				"setup":{
					"type":"object",
					"properties":{
						"query":{
							"type":"string",
							"title":"query"
						},
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"limitPageRankNodes":{
							"type":"integer",
							"title":"limitPageRankNodes",
							"default":"30"
						},
						"limitSeedNodes":{
							"type":"integer",
							"title":"limitSeedNodes",
							"default":"20"
						},
						"limitChunks":{
							"type":"integer",
							"title":"limitChunks",
							"default":"8"
						},
						"userEmail":{
							"type":"string",
							"title":"User Email"
						},
						"caseId":{
							"type":"string",
							"title":"Case Id"
						},
						"aiAgentId":{
							"type":"string",
							"title":"Ai Agent Id"
						}
					},
					"additionalProperties":false,
					"required":[
						"query"
					]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":464,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"n_Og65l",
			"index":2,
			"inputs":{
				"automationId":"688b55616a9b22fd7644868a",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"limitPageRankNodes":"{{ Zbdng.outputs.limitPageRankNodes }}",
					"limitSeedNodes":"2{{ Zbdng.outputs.limitSeedNodes }}",
					"limitChunks":"{{ Zbdng.outputs.limitChunks }}",
					"query":"{{ Zbdng.outputs.query }}",
					"graphId":"{{ Zbdng.outputs.graphId }}",
					"userEmail":"{{ Zbdng.outputs.userEmail }}",
					"caseId":"{{ Zbdng.outputs.caseId }}",
					"aiAgentId":"{{ Zbdng.outputs.aiAgentId }}"
				}
			},
			"skip":true,
			"subTitle":"[TEST] - V2",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":167,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"JPkno",
			"index":3,
			"inputs":{
				"code":"# 1. Inline citations (add sourceChunkId in context string)\n# 2. Ranking relationships and chunks\n# 3. Truncation (should be easy after ranking)",
				"isAsync":false
			},
			"skip":true,
			"subTitle":"TODO",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":3,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"aqzOV",
			"index":4,
			"inputs":{
				"automationId":"682c6f948d04422e007feda1",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1"
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":211,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"RSrF8",
			"index":5,
			"inputs":{
				"automationId":"68318db64c1192163379af38",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"query":"{{ Zbdng.outputs.query }}",
					"metadata":"{{ aqzOV.outputs.context }}"
				}
			},
			"skip":false,
			"subTitle":"Keywords",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":158,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"h26Do",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"keywordsList":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"keywordsList"
						}
					},
					"additionalProperties":false,
					"required":[
						"keywordsList"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"keywordsDict":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"keywordsDict"
						}
					},
					"additionalProperties":false,
					"required":[
						"keywordsDict"
					]
				},
				"code":"# TODO: Can leverage the keyword level info here\n\nall_keywords = []\nfor low_level_keyword in keywordsDict['low']:\n  all_keywords.append('Entity: ' + low_level_keyword)\n\nfor high_level_keyword in keywordsDict['high']:\n  all_keywords.append('Entity: ' + high_level_keyword)\n\nresult = {\n  'keywordsList': all_keywords\n}",
				"isAsync":false,
				"parameters":{
					"keywordsDict":"{{ RSrF8.outputs.keywords }}"
				}
			},
			"skip":true,
			"subTitle":"Flatten Keywords",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"s5OIX",
			"index":7,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"keywordsList":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"keywordsList"
						}
					},
					"additionalProperties":false,
					"required":[
						"keywordsList"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"keywordsDict":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"keywordsDict",
							"required":[]
						}
					},
					"additionalProperties":false,
					"required":[
						"keywordsDict"
					]
				},
				"compile_static":false,
				"code":"// TODO: Can leverage the keyword level info here\n\ndef keywordsDict = binding.hasVariable(\"keywordsDict\") ? binding.getVariable(\"keywordsDict\") : [:]\n\n// Initialize list to hold all keywords\ndef all_keywords = []\n\n// Iterate over low level keywords and add to all_keywords\nfor (low_level_keyword in keywordsDict['low']) {\n    all_keywords.add('Entity: ' + low_level_keyword)\n}\n\n// Iterate over high level keywords and add to all_keywords\nfor (high_level_keyword in keywordsDict['high']) {\n    all_keywords.add('Entity: ' + high_level_keyword)\n}\n\n// Prepare the result map\ndef result = [\n    'keywordsList': all_keywords\n]",
				"parameters":{
					"keywordsDict":"{{ RSrF8.outputs.keywords }}"
				}
			},
			"skip":false,
			"subTitle":"Flatten Keywords",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":382,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"nBz8e",
			"index":8,
			"inputs":{
				"automationId":"6784b9216fb83f0972c5625d",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"text_batch":{
						"ua:type":"mappedArray",
						"source":"{{ s5OIX.outputs.result.keywordsList }}",
						"items":"{{ s5OIX.outputs.result.keywordsList[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Keyword Embeddings",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":158,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"v1Ad1",
			"index":9,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"similarityQueries":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"similarityQueries"
						}
					},
					"additionalProperties":false,
					"required":[
						"similarityQueries"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"keywordsList":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"keywordsList"
						},
						"graphId":{
							"type":"string",
							"title":"graphId"
						},
						"limitSeedNodes":{
							"type":"integer",
							"title":"limitSeedNodes"
						},
						"embeddingObjects":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"embeddingObjects"
						}
					},
					"additionalProperties":false,
					"required":[
						"keywordsList",
						"graphId",
						"limitSeedNodes",
						"embeddingObjects"
					]
				},
				"code":"def format_vector_similarity_query(\n    query_entity: str,\n    embedding: list[float],\n    vector_index_name: str='person_embedding_index',\n    limit: int=10\n) -> str:\n\n    query_entity = query_entity.replace('\\'', '_')\n    query = (\n        f\"WITH ['{query_entity}'] AS queryEntities, [{embedding}] AS embeddings \"\n        \"WITH [i IN range(0, size(queryEntities) - 1) | { \"\n        \"        entity: queryEntities[i], \"\n        \"        embedding: embeddings[i] \"\n        \"    }] AS entityEmbeddings \"\n        \"UNWIND entityEmbeddings AS entityData \"\n        f\"CALL db.index.vector.queryNodes('{vector_index_name}', 100, entityData.embedding) \"\n        \"YIELD node, score \"\n        \"WITH node, score, entityData.entity AS searchEntity, size(node.sourceChunkID) AS chunkCount \"\n        \"WITH collect({ \"\n        \"        node: node, \"\n        \"        score: score, \"\n        \"        searchEntity: searchEntity, \"\n        \"        nodeSpecificity: case when chunkCount > 0 then 1.0 / chunkCount else 1.0 end\"\n        \"    }) AS similarityResults \"\n        \"UNWIND similarityResults AS result \"\n        \"RETURN \"\n        \"    result.node.name AS nodeName, \"\n        \"    ID(result.node) AS nodeID, \"\n        \"    result.node.description AS nodeDesc, \"\n        \"    result.score AS simScore, \"\n        \"    result.nodeSpecificity AS nodeSpecificity, \"\n        \"    result.searchEntity AS searchEntity \"\n        f\"ORDER BY result.score DESC \"\n        f\"LIMIT {limit}\"\n    )\n\n    return query\n\n# vindex name\nif graphId:\n    vindex = 'vindex_' + graphId\nelse:\n    vindex = 'dummy_vector_index'\n\n# Create a list to hold the similarity queries\nsimilarityQueries = []\n\n# Generate separate queries for each keyword and embedding pair\nfor query_entity, embedding in zip(keywordsList, embeddingObjects):\n    if query_entity.endswith(']'):  # Named entity\n        query = format_vector_similarity_query(query_entity, embedding['embedding'], vector_index_name=vindex, limit=3)\n    else:\n        # query = format_vector_similarity_query(query_entity, embedding['embedding'], vector_index_name=vindex, limit=1)\n        continue\n\n    similarityQueries.append(query)\n\nresult = {\n   'similarityQueries': similarityQueries\n}",
				"isAsync":false,
				"parameters":{
					"keywordsList":{
						"source":"{{ h26Do.outputs.result.keywordsList }}",
						"ua:type":"mappedArray",
						"items":"{{ h26Do.outputs.result.keywordsList[0] }}"
					},
					"graphId":"{{ Zbdng.outputs.graphId }}",
					"limitSeedNodes":"{{ Zbdng.outputs.limitSeedNodes }}"
				}
			},
			"skip":true,
			"subTitle":"Seed Nodes Queries",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":342,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"HFQRq",
			"index":10,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"seedNodesDbOutput"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"seedNodesDbOutput",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Seed Nodes DB output",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":313,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"rO3Y0",
			"index":11,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ nBz8e.outputs.embedding_batch }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":378,
				"resourceName":"storage_by_unifyapps_semantic_query_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"rO3Y0@9DRJN-1@l",
			"id":"FMDKy",
			"index":12,
			"inputs":{
				"hybridSearch":false,
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_graphId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ Zbdng.outputs.graphId }}"
							}
						}
					],
					"operator":"AND"
				},
				"searchField":{
					"op":"KNN",
					"field":"properties.embeddings",
					"values":"{{ rO3Y0.outputs.item.embeddings }}"
				},
				"object_type":"graph_rag_node_vector_store",
				"numberOfRecordsToFetch":100
			},
			"skip":false,
			"subTitle":"Seed Nodes",
			"title":"Semantic search records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":370,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"rO3Y0@9DRJN-1@l",
			"id":"49M7r",
			"index":13,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ FMDKy.outputs.objects }})",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Empty Response?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"continue",
				"resourceVersion":371,
				"resourceName":"continue",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"49M7r@rO3Y0@9DRJN-1@l@y",
			"id":"onYjb",
			"index":14,
			"inputs":{
				"loop":"rO3Y0",
				"conditions":{
					"filters":[
						{
							"property":"1",
							"filter":{
								"operator":"EQUAL",
								"value":"1"
							}
						}
					],
					"operator":"AND"
				}
			},
			"skip":false,
			"subTitle":"Continue",
			"title":"Continue",
			"type":"CONTINUE"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.similarNodes.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":376,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"rO3Y0@9DRJN-1@l",
			"id":"Mdtg2",
			"index":15,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"cypherQuery":{
							"type":"string",
							"title":"Cypher Query"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"similarNodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Similar Nodes"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"code":"def format_node_specificity_query(similar_nodes):\n    \"\"\"\n    similar_nodes: List[dict]\n        Each item:\n        {\n          \"document\": {\n            ...\n            \"properties\": { \"nodeId\": \"76\" },\n            ...\n          },\n          \"score\": 1.2974728\n        }\n    Returns:\n        Cypher query string.\n    \"\"\"\n\n    def cypher_repr(obj):\n        \"\"\"\n        Convert a Python dict with simple (str/float) values into Cypher map literal.\n        \"\"\"\n        items = []\n        for k, v in obj.items():\n            # string values need single quotes, numeric as is\n            if isinstance(v, str):\n                v_str = f\"'{v}'\"\n            else:\n                v_str = str(v)\n            items.append(f\"{k}: {v_str}\")\n        return \"{\" + \", \".join(items) + \"}\"\n\n    scored_nodes = [\n        {\n            \"nodeId\": str(node[\"document\"][\"properties\"][\"nodeId\"]).replace(\"'\", \"_\"),\n            \"simScore\": node[\"score\"]\n        }\n        for node in similar_nodes\n        if node.get(\"document\", {}).get(\"properties\", {}).get(\"nodeId\") is not None\n    ]\n\n    cypher_list_of_maps = \"[\" + \", \".join(cypher_repr(sn) for sn in scored_nodes) + \"]\"\n\n    cypher_query = (\n        f\"WITH {cypher_list_of_maps} AS scoredNodes\\n\"\n        f\"UNWIND scoredNodes AS entry\\n\"\n        f\"MATCH (n) WHERE toString(ID(n)) = entry.nodeId\\n\"\n        f\"WITH ID(n) AS nodeId, entry.simScore AS simScore,\\n\"\n        f\"     CASE WHEN size(n.sourceChunkID) > 0 THEN 1.0 / size(n.sourceChunkID) ELSE 1.0 END AS nodeSpecificity\\n\"\n        f\"RETURN nodeId, simScore, nodeSpecificity\\n\"\n        f\"ORDER BY simScore DESC\"\n    )\n\n    return cypher_query\n\nsimilarNodes = similarNodes[:3]\nresult = {\n    'cypherQuery': format_node_specificity_query(similarNodes)\n}",
				"isAsync":false,
				"parameters":{
					"similarNodes":{
						"source":"{{ FMDKy.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ FMDKy.outputs.objects[0] }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.similarNodes.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"rO3Y0@9DRJN-1@l",
			"id":"0hMHS",
			"index":16,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"cypherQuery":{
							"type":"string",
							"title":"cypherQuery"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"similarNodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"similarNodes"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"// similar_nodes: List of maps\n// Each item:\n// {\n//   \"document\": {\n//     ...\n//     \"properties\": { \"nodeId\": \"76\" },\n//     ...\n//   },\n//   \"score\": 1.2974728\n// }\n// Returns:\n//     Cypher query string.\n\n// Use binding for input\ndef similarNodes = binding.hasVariable(\"similarNodes\") ? binding.getVariable(\"similarNodes\") : []\n\n// Only keep the first 3 nodes\nsimilarNodes = similarNodes.take(3)\n\n// Helper to convert a Groovy map with simple (String/Number) values into Cypher map literal\ndef cypher_repr = { obj ->\n    // string values need single quotes, numeric as is\n    def items = []\n    obj.each { k, v ->\n        def v_str\n        if (v instanceof String) {\n            v_str = \"'${v}'\"\n        } else {\n            v_str = \"${v}\"\n        }\n        items << \"${k}: ${v_str}\"\n    }\n    \"{\" + items.join(\", \") + \"}\"\n}\n\n// Format main scored_nodes list\ndef scored_nodes = []\nsimilarNodes.each { node ->\n    // Defensive get for nested properties\n    def nodeId = node?.document?.properties?.nodeId\n    if (nodeId != null) {\n        // Always convert nodeId to string and replace any single quotes as in Python code\n        scored_nodes << [\n            nodeId  : nodeId.toString().replace(\"'\", \"_\"),\n            simScore: node.score\n        ]\n    }\n}\n\n// Generate the Cypher list of maps string\ndef cypher_list_of_maps = \"[\" + scored_nodes.collect { cypher_repr(it) }.join(\", \") + \"]\"\n\n// Final Cypher query assembly\ndef cypher_query =\n    \"WITH ${cypher_list_of_maps} AS scoredNodes\\n\" +\n    \"UNWIND scoredNodes AS entry\\n\" +\n    \"MATCH (n) WHERE toString(ID(n)) = entry.nodeId\\n\" +\n    \"WITH ID(n) AS nodeId, entry.simScore AS simScore, n.name as name,\\n\" +\n    \"     CASE WHEN size(n.sourceChunkID) > 0 THEN 1.0 / size(n.sourceChunkID) ELSE 1.0 END AS nodeSpecificity\\n\" +\n    \"RETURN nodeId, simScore, name, nodeSpecificity\\n\" +\n    \"ORDER BY simScore DESC\"\n\n// Output result map\ndef result = [\n    cypherQuery: cypher_query.toString()\n]",
				"parameters":{
					"similarNodes":{
						"source":"{{ FMDKy.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ FMDKy.outputs.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":278,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"rO3Y0@9DRJN-1@l",
			"id":"2pZiR",
			"index":17,
			"inputs":{
				"automationId":"67a9e903bdf95a2dab1df8cb",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"cypherQuery":"{{ 0hMHS.outputs.result.cypherQuery }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":2.0,
					"captureRetries":false,
					"count":3,
					"enabled":true,
					"initialDelay":3000,
					"maxDelay":10000
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Neo4j: Node Specificity",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":279,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"rO3Y0@9DRJN-1@l",
			"id":"pLXz9",
			"index":18,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ 2pZiR.outputs.blocks }}",
					"items":"{{ 2pZiR.outputs.blocks[0] }}"
				},
				"listName":"{{ HFQRq.outputs.items[0] }}"
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Extend Seed Nodes",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":159,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"2Kox6",
			"index":19,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodeIDs":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeIDs"
						},
						"simScores":{
							"type":"array",
							"items":{
								"type":"number"
							},
							"title":"simScores"
						},
						"nodeSpecificities":{
							"type":"array",
							"items":{
								"type":"number"
							},
							"title":"nodeSpecificities"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodeIDs",
						"simScores",
						"nodeSpecificities"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"nodes"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodes"
					]
				},
				"code":"unique_nodes = {}\n\n# Iterate over each node to populate the dictionary with unique nodes\nfor node in nodes:\n    node_id = node['nodeId']\n    # Update or add the node data in the dictionary using nodeID as the key\n    unique_nodes[node_id] = {\n        'simScore': node['simScore'],\n        'nodeSpecificity': node['nodeSpecificity']\n    }\n\nnode_ids = list(unique_nodes.keys())\nsim_scores = [data['simScore'] for data in unique_nodes.values()]\nnode_specs = [data['nodeSpecificity'] for data in unique_nodes.values()]\n\n# Create the result dictionary\nresult = {\n  'nodeIDs': node_ids,\n  'simScores': sim_scores,\n  'nodeSpecificities': node_specs\n}",
				"isAsync":false,
				"parameters":{
					"nodes":{
						"source":"{{ HFQRq.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ HFQRq.outputs.items[0] }}"
					}
				}
			},
			"skip":true,
			"subTitle":"Extract Node IDs and specificity",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.nodes.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"VwaUy",
			"index":20,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"nodeIDs":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"nodeIDs"
						},
						"simScores":{
							"type":"array",
							"items":{
								"type":"number"
							},
							"title":"simScores"
						},
						"nodeSpecificities":{
							"type":"array",
							"items":{
								"type":"number"
							},
							"title":"nodeSpecificities"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Nodes"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def uniqueNodes = [:]\n\n// Iterate over each node to populate the map with unique nodes\nnodes.each { node ->\n    def nodeId = node['nodeId']\n    // Update or add the node data in the map using nodeId as the key\n    uniqueNodes[nodeId] = [\n        simScore: node['simScore'],\n        nodeSpecificity: node['nodeSpecificity']\n    ]\n}\n\ndef nodeIds = uniqueNodes.keySet() as List\ndef simScores = uniqueNodes.values().collect { it['simScore'] }\ndef nodeSpecs = uniqueNodes.values().collect { it['nodeSpecificity'] }\n\n// Create the result map\ndef result = [\n    nodeIDs: nodeIds,\n    simScores: simScores,\n    nodeSpecificities: nodeSpecs\n]",
				"parameters":{
					"nodes":{
						"source":"{{ HFQRq.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ HFQRq.outputs.items[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Extract Node IDs and specificity",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":211,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"cUU1W",
			"index":21,
			"inputs":{
				"automationId":"678f7985ea6abd513c727a08",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"limitNodes":"{{ Zbdng.outputs.limitPageRankNodes }}",
					"graphId":"{{ Zbdng.outputs.graphId }}",
					"seedNodes":{
						"source":"{{ VwaUy.outputs.result.nodeIDs }}",
						"ua:type":"mappedArray",
						"items":"{{ VwaUy.outputs.result.nodeIDs[0] }}"
					},
					"simScores":{
						"source":"{{ VwaUy.outputs.result.simScores }}",
						"ua:type":"mappedArray",
						"items":"{{ VwaUy.outputs.result.simScores[0] }}"
					},
					"nodeSpecificities":{
						"source":"{{ VwaUy.outputs.result.nodeSpecificities }}",
						"ua:type":"mappedArray",
						"items":"{{ VwaUy.outputs.result.nodeSpecificities[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"PPR",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":263,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"DKuhl",
			"index":22,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{
										"chunk_content":{
											"type":"string",
											"title":"Chunk Content"
										},
										"chunk_metadata":{
											"type":"object",
											"properties":{},
											"additionalProperties":false,
											"title":"Chunk Metadata"
										}
									},
									"required":[]
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"chunkList",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"chunkList",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"chunk_content":{
										"type":"string",
										"title":"Chunk Content"
									},
									"chunk_metadata":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Chunk Metadata"
									}
								},
								"required":[]
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Chunks",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":167,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"FXGmb",
			"index":23,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"chunkIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"chunkIds"
						},
						"chunkIdsWithScores":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"chunkIdsWithScores"
						}
					},
					"additionalProperties":false,
					"required":[
						"chunkIds",
						"chunkIdsWithScores"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"nodes"
						},
						"limitChunks":{
							"type":"integer",
							"title":"limitChunks"
						}
					},
					"additionalProperties":false,
					"required":[
						"nodes",
						"limitChunks"
					]
				},
				"code":"map_chunk_ids_to_scores = {}\nchunk_ids_with_scores = []\nfor node in nodes:\n  # chunk_id = node['chunkID']  # This is a list now\n  chunk_ids = node['chunkID']\n  chunk_score = node['score']\n  for chunk_id in chunk_ids:\n    if not chunk_id in map_chunk_ids_to_scores:\n      map_chunk_ids_to_scores[chunk_id] = 0\n    map_chunk_ids_to_scores[chunk_id] += chunk_score\n\nfor key, val in map_chunk_ids_to_scores.items():\n  chunk_ids_with_scores.append([key, val])\n\nchunk_ids_with_scores = sorted(chunk_ids_with_scores, key = lambda x : -x[1])\nchunk_ids = []\n\nchunk_ids_with_scores = chunk_ids_with_scores[:int(limitChunks)]\n\nfor chunk in chunk_ids_with_scores:\n  chunk_ids.append(chunk[0])\n\nresult = {\n  'chunkIds': chunk_ids,\n  'chunkIdsWithScores': chunk_ids_with_scores\n}",
				"isAsync":false,
				"parameters":{
					"nodes":{
						"ua:type":"mappedArray",
						"source":"{{ cUU1W.outputs.rankedNodes }}",
						"items":"{{ cUU1W.outputs.rankedNodes[0] }}"
					},
					"limitChunks":"{{ Zbdng.outputs.limitChunks }}"
				}
			},
			"skip":true,
			"subTitle":"Chunk Ranking",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.nodes.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":393,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"XWiUu",
			"index":24,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"chunkIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"chunkIds"
						},
						"chunkIdsWithScores":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"chunkIdsWithScores"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"nodes":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"nodes"
						},
						"limitChunks":{
							"type":"integer",
							"title":"limitChunks"
						}
					},
					"additionalProperties":false
				},
				"compile_static":false,
				"code":"def mapChunkIdsToScores = [:]\ndef chunkIdsWithScores = []\n\nnodes.each { node ->\n    // 1) Skip if 'chunkID' key does not exist or is null\n    if (!node.containsKey('chunkID') || node['chunkID'] == null) {\n        return\n    }\n    def chunkIds = node['chunkID']\n    // 2) Handle empty chunkIds (skip)\n    if (!chunkIds || chunkIds.size() == 0) {\n        return\n    }\n    def chunkScore = node['score']\n    def normalizedScore = chunkScore / chunkIds.size()\n    chunkIds.each { chunkId ->\n        if (!mapChunkIdsToScores.containsKey(chunkId)) {\n            mapChunkIdsToScores[chunkId] = 0\n        }\n        mapChunkIdsToScores[chunkId] += normalizedScore\n    }\n}\n\nmapChunkIdsToScores.each { key, val ->\n    chunkIdsWithScores << [key, val]\n}\n\nchunkIdsWithScores = chunkIdsWithScores.sort { -it[1] }\n\ndef chunkIds = []\nchunkIdsWithScores = chunkIdsWithScores.take(limitChunks as int)\n\nchunkIdsWithScores.each { chunk ->\n    chunkIds << chunk[0]\n}\n\ndef result = [\n    chunkIds: chunkIds,\n    chunkIdsWithScores: chunkIdsWithScores\n]",
				"parameters":{
					"nodes":{
						"source":"{{ cUU1W.outputs.rankedNodes }}",
						"ua:type":"mappedArray",
						"items":"{{ cUU1W.outputs.rankedNodes[0] }}"
					},
					"limitChunks":"{{ Zbdng.outputs.limitChunks }}"
				}
			},
			"skip":false,
			"subTitle":"Chunk Ranking",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":20,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"2t2pg",
			"index":25,
			"inputs":{
				"automationId":"679c6123a6583456a71988d2",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"caseId":"{{ Zbdng.outputs.caseId }}",
					"aiAgentId":"{{ Zbdng.outputs.aiAgentId }}"
				}
			},
			"skip":false,
			"subTitle":"Fetch applicable knowledges",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":382,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"Ov5or",
			"index":26,
			"inputs":{
				"automationId":"6704f23182227947dd32e79c",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"knowledgeIds":{
						"source":"{{ 2t2pg.outputs.knowledges }}",
						"ua:type":"mappedArray",
						"items":"=MAPGET({{ 2t2pg.outputs.knowledges }},\"id\")"
					},
					"userEmailAddress":"{{ Zbdng.outputs.userEmail }}"
				}
			},
			"skip":false,
			"subTitle":"RBAC",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.sharedWithIds.items",
					"root.parameters.knowledgeList.items.id",
					"root.parameters.knowledgeList.items.version",
					"root.parameters.knowledgeList.items.sourceType"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":52,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"PXUiF",
			"index":27,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"filter":{
							"type":"object",
							"title":"filter"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"sharedWithIds":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"sharedWithIds"
						},
						"additionalFilter":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Additional Filter"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def combinedFilter = [\n    op: 'AND',\n    values: []\n]\n\ndef sharedFilter = null\nif (binding.hasVariable('sharedWithIds')) {\n    sharedFilter = [\n        field: 'properties.sharedWithIds',\n        op: 'IN',\n        values: sharedWithIds\n    ]    \n    combinedFilter['values'].add(sharedFilter)\n}\n\nif(binding.hasVariable('additionalFilter') && additionalFilter != null){\n   combinedFilter['values'].add(additionalFilter)\n}\n\nreturn ['filter': combinedFilter['values'].size() > 0 ? combinedFilter : null]\n",
				"isAsync":false,
				"parameters":{
					"sharedWithIds":{
						"ua:type":"mappedArray",
						"source":"{{ Ov5or.outputs.sharedWithIds }}",
						"items":"{{ Ov5or.outputs.sharedWithIds[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Rbacfilter",
			"title":"Execute groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":230,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"dsa85",
			"index":28,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ XWiUu.outputs.result.chunkIds }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2187,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"dsa85@9DRJN-1@l",
			"id":"3VIIw",
			"index":29,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ dsa85.outputs.item }}"
							}
						},
						{
							"resolvedFilter":{
								"filter":"{{ PXUiF.outputs.result.filter }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"ai_agent_chunk",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"page":{
					"paginateBy":"OFFSET",
					"limit":20
				},
				"numberOfRecordsToFetch":"SINGLE",
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":204,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"dsa85@9DRJN-1@l",
			"id":"4IIfo",
			"index":30,
			"inputs":{
				"itemToAdd":{
					"chunk_content":"{{ 3VIIw.outputs.properties.text }}",
					"chunk_metadata":"{{ 3VIIw.outputs.properties.chunkMetadata }}"
				},
				"insertLocation":"END",
				"listName":"{{ DKuhl.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.chunks.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":380,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"HyE7E",
			"index":31,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"finalChunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"content":{
										"type":"string",
										"title":"Content"
									},
									"metadata":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Metadata"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Final Chunks"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Chunks"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"List transform(List chunks) {\n\n    /* 0. keep only the chunks that actually contain chunk_metadata  */\n    List validChunks = chunks.findAll { chunk ->\n        chunk?.chunk_metadata                      // present & not null\n    }\n\n    /* 1-3. transform the remaining chunks                           */\n    return validChunks.collect { chunk ->\n\n        /* 1. defensive copy of the existing metadata                */\n        Map meta = [:] + chunk.chunk_metadata\n\n        /* 2. add the new key whose value is a one-element list      */\n        meta.chunkContents = [ chunk.chunk_content ]\n\n        /* 3. build the transformed element                          */\n        [\n            content : chunk.chunk_content,\n            metadata: meta\n        ]\n    }\n}\n\nreturn [\n    finalChunks: transform(chunks)\n]",
				"parameters":{
					"chunks":{
						"source":"{{ DKuhl.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ DKuhl.outputs.items[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Chunk List Formatting",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":264,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"9DRJN-1",
			"id":"q9zTf",
			"index":32,
			"inputs":{
				"filters":[
					{
						"property":"1",
						"filter":{
							"operator":"EQUAL",
							"value":"1"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"RetrieverMode?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":183,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"q9zTf@9DRJN-1@y",
			"id":"WXx2P",
			"index":33,
			"inputs":{
				"result":{
					"response":"dummy",
					"chunks":{
						"source":"{{ HyE7E.outputs.result.finalChunks }}",
						"ua:type":"mappedArray",
						"items":{
							"content":"{{ HyE7E.outputs.result.finalChunks[0].content }}",
							"chunk_metadata":"{{ HyE7E.outputs.result.finalChunks[0].metadata }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":211,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"q9zTf@9DRJN-1@n",
			"id":"I1BEf",
			"index":34,
			"inputs":{
				"automationId":"678f914b4a762011ccfae8c1",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"entities":{
						"source":"{{ cUU1W.outputs.rankedNodes }}",
						"ua:type":"mappedArray",
						"items":"{{ cUU1W.outputs.rankedNodes[0] }}"
					},
					"relationships":{
						"source":"{{ cUU1W.outputs.rankedRelationships }}",
						"ua:type":"mappedArray",
						"items":"{{ cUU1W.outputs.rankedRelationships[0] }}"
					},
					"chunks":{
						"source":"{{ DKuhl.outputs.items }}",
						"ua:type":"mappedArray",
						"items":"{{ DKuhl.outputs.items[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Context Aggr.",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":183,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"q9zTf@9DRJN-1@n",
			"id":"mxyBG",
			"index":35,
			"inputs":{
				"result":{
					"chunks":{
						"ua:type":"mappedArray",
						"source":"{{ DKuhl.outputs.items }}",
						"items":{
							"content":"{{ DKuhl.outputs.items[0].chunk_content }}",
							"chunk_metadata":"{{ DKuhl.outputs.items[0].chunk_metadata }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":2620,
	"projectId":135,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"GraphRAG"
	],
	"version":184
}