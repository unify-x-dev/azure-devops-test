{
	"appsUsed":[
		
	],
	"createdTime":1761219306778,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761233657176,
		"deployedBy":115477,
		"deployedDefinitionId":"68fa4af967cb9a3225566b29",
		"status":"DEPLOYED",
		"version":5,
		"workflowVersion":7
	},
	"edges":[
		{
			"fromNodeId":"n_PQRFu",
			"priority":0,
			"skip":false,
			"toNodeId":"n_h8DaG",
			"type":"next"
		},
		{
			"fromNodeId":"n_h8DaG",
			"priority":0,
			"skip":false,
			"toNodeId":"n_txMg9",
			"type":"next"
		},
		{
			"fromNodeId":"n_txMg9",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nQDPb",
			"type":"if"
		},
		{
			"fromNodeId":"n_txMg9",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_z1p2M",
			"type":"next"
		}
	],
	"id":"68fa12ead0e8762b65d27c4a",
	"lastModifiedBy":115477,
	"lcName":"best practices | check issue",
	"modifiedTime":1761233657177,
	"name":"Best Practices | Check Issue",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":1053,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_z6eK1-1",
			"id":"n_PQRFu",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"status"
					],
					"properties":{
						"entityVersion":{
							"type":"integer",
							"title":"entityVersion"
						},
						"entities":{
							"type":"object",
							"properties":{
								"blockIds":{
									"type":"array",
									"items":{
										"type":"string"
									},
									"title":"blockIds"
								},
								"variables":{
									"type":"array",
									"items":{
										"type":"string"
									},
									"title":"variables"
								},
								"functions":{
									"type":"array",
									"items":{
										"type":"string"
									},
									"title":"functions"
								},
								"dataSources":{
									"type":"array",
									"items":{
										"type":"string"
									},
									"title":"dataSources"
								}
							},
							"title":"entities",
							"additionalProperties":false
						},
						"entityType":{
							"type":"string",
							"title":"entityType"
						},
						"entityId":{
							"type":"string",
							"title":"entityId"
						},
						"checkId":{
							"type":"string",
							"title":"checkId"
						},
						"status":{
							"type":"string",
							"title":"status"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"data_sources":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Data Sources"
						},
						"checks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"checkId":{
										"type":"string",
										"title":"checkId"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Checks"
						},
						"page":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"page_schema":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"page_schema"
									},
									"id":{
										"type":"string",
										"title":"Id"
									},
									"entityType":{
										"type":"string",
										"title":"entityType"
									},
									"page_version":{
										"type":"string",
										"title":"page_version"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Page"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_z6eK1-1",
			"id":"n_h8DaG",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"outputList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"status":{
										"type":"string",
										"title":"status"
									},
									"pageId":{
										"type":"string",
										"title":"Page Id"
									},
									"blockId":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"blockId"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"outputList"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"Pages":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"page_schema":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"page_schema"
									},
									"id":{
										"type":"string",
										"title":"id"
									}
								},
								"additionalProperties":false,
								"required":[
									"page_schema",
									"id"
								]
							},
							"title":"Pages"
						}
					}
				},
				"code":"// 'page' is assumed to be the single page object provided as input\ndef outputList = []\n\n/**\n * Recursive function to traverse all blocks and nested blocks\n * to find \"Repeatable\" components and check their pagination.\n * (Note: Added fix for recursive map context and slot traversal)\n */\ndef checkBlocks\ncheckBlocks = { blocksMap, pageId ->\n    // Initial call uses the provided blocksMap as the full context\n    checkBlocks(blocksMap, pageId, blocksMap)\n}\n\n// Overloaded version for recursion, carrying the full map\ncheckBlocks = { blocksToCheckMap, pageId, fullBlocksMap ->\n    def results = []\n    blocksToCheckMap.each { blockId, blockData ->\n        def comp = blockData?.component\n        if (!comp) return // Skip if component data is missing\n\n        // 1. Check if the component is a \"Repeatable\"\n        if (comp?.componentType == \"Repeatable\") {\n            // 2. Check if it has the pagination add-on\n            def hasPagination = comp?.content?.addOns?.page != null\n            // Add the full details temporarily\n            results << [\n                pageId        : pageId,\n                componentId   : blockId ?: \"\",\n                ComponentName : blockData?.displayName ?: \"\",\n                status        : hasPagination ? \"Pass\" : \"Fail\"\n            ]\n        }\n\n        // 3. Recursively check any nested blocks via content.blockIds\n        def nestedIds = comp?.content?.blockIds ?: []\n        nestedIds.each { nestedId ->\n            def nestedBlockData = fullBlocksMap[nestedId] // Look up in the full map\n            if (nestedBlockData) {\n                // Pass the specific block to check, pageId, and the full map for context\n                results.addAll(checkBlocks([(nestedId): nestedBlockData], pageId, fullBlocksMap))\n            }\n        }\n\n        // 4. Recursively check nested blocks via slots\n        def slots = comp?.slots ?: [:]\n        slots.each { slotName, slotData ->\n             def slotBlockId = slotData?.blockId\n             if (slotBlockId) {\n                 def slotBlockData = fullBlocksMap[slotBlockId] // Look up in the full map\n                 if (slotBlockData) {\n                    results.addAll(checkBlocks([(slotBlockId): slotBlockData], pageId, fullBlocksMap))\n                 }\n             }\n        }\n    }\n    return results\n}\n\n\n// --- Process the Single Page ---\ndef pageId = page?.id ?: \"\"\ndef schema = page?.page_schema ?: [:]\ndef blocks = schema?.blocks ?: [:] // This is the full map of blocks\n\n// Run the check starting with the top-level blocks\ndef pageResults = checkBlocks(blocks, pageId) // Initial call uses the simplified signature\noutputList.addAll(pageResults)\n\n// --- Filter and Format the Output ---\n// Find only the blocks that failed the pagination check\ndef failedBlocks = outputList.findAll { it.status == \"Fail\" }\ndef finalOutput = [:] // Initialize as empty map\n\n// Only populate the output map if failures were found\nif (!failedBlocks.isEmpty()) {\n    // If some blocks failed, output page ID, failed status, and the IDs of failed blocks\n    def failedBlockIds = failedBlocks.collect { it.componentId }\n    finalOutput = [\n        pageID: pageId,\n        status: \"failed\",\n        blocksIDs: failedBlockIds\n    ]\n}\n// If failedBlocks is empty, finalOutput remains an empty map {}\n\n// Return the map (either populated with failure info or empty)\nreturn finalOutput",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"Pages":{
						"ua:type":"mappedArray",
						"items":{
							"page_schema":"{{ n_PQRFu.outputs.page[0].page_schema }}",
							"id":"{{ n_PQRFu.outputs.page[0].id }}"
						},
						"source":"{{ n_PQRFu.outputs.page }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Repeatable + pagination",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":791,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_z6eK1-1",
			"id":"n_txMg9",
			"index":3,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ n_h8DaG.outputs.result.outputList }})",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1089,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_txMg9@_z6eK1-1@y",
			"id":"n_nQDPb",
			"index":4,
			"inputs":{
				"result":{
					"entityType":"{{ n_PQRFu.outputs.page[0].entityType }}",
					"entityId":"{{ n_PQRFu.outputs.page[0].id }}",
					"checkId":"{{ n_PQRFu.outputs.checks[0].checkId }}",
					"status":"successful",
					"entities":{
						"blockIds":{
							"source":"{{ n_h8DaG.outputs.result.outputList[0].blockId }}",
							"ua:type":"mappedArray",
							"items":"{{ n_h8DaG.outputs.result.outputList[0].blockId[0] }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1089,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_txMg9@_z6eK1-1@n",
			"id":"_z1p2M",
			"index":5,
			"inputs":{
				"result":{
					"entityType":"{{ n_PQRFu.outputs.page[0].entityType }}",
					"entityId":"{{ n_h8DaG.outputs.result.outputList[0].pageId }}",
					"checkId":"{{ n_PQRFu.outputs.checks[0].checkId }}",
					"status":"{{ n_h8DaG.outputs.result.outputList[0].status }}",
					"entities":{
						"blockIds":{
							"source":"{{ n_h8DaG.outputs.result.outputList[0].blockId }}",
							"ua:type":"mappedArray",
							"items":"{{ n_h8DaG.outputs.result.outputList[0].blockId[0] }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":115477,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":7
}