{
	"appsUsed":[
		
	],
	"createdTime":1743778349843,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296224916,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd200c3d19149a9e3567",
		"status":"DEPLOYED",
		"version":58,
		"workflowVersion":107
	},
	"edges":[
		{
			"fromNodeId":"Ix6Ef",
			"priority":0,
			"skip":false,
			"toNodeId":"feEsX",
			"type":"next"
		},
		{
			"fromNodeId":"feEsX",
			"priority":0,
			"skip":false,
			"toNodeId":"Q2r1I",
			"type":"next"
		},
		{
			"fromNodeId":"Q2r1I",
			"priority":0,
			"skip":false,
			"toNodeId":"o7Ioh",
			"type":"next"
		},
		{
			"fromNodeId":"o7Ioh",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"Q002k",
			"type":"if"
		},
		{
			"fromNodeId":"Q002k",
			"priority":0,
			"skip":false,
			"toNodeId":"kT3jR",
			"type":"next"
		},
		{
			"fromNodeId":"o7Ioh",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"kT3jR",
			"type":"next"
		},
		{
			"fromNodeId":"kT3jR",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"Hfci9",
			"type":"if"
		},
		{
			"fromNodeId":"Hfci9",
			"priority":0,
			"skip":false,
			"toNodeId":"b6k0i",
			"type":"next"
		},
		{
			"fromNodeId":"kT3jR",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"b6k0i",
			"type":"next"
		},
		{
			"fromNodeId":"b6k0i",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"UNRh9",
			"type":"if"
		},
		{
			"fromNodeId":"UNRh9",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"iWnAv",
			"type":"error"
		},
		{
			"fromNodeId":"UNRh9",
			"priority":0,
			"skip":false,
			"toNodeId":"YJRqM",
			"type":"next"
		},
		{
			"fromNodeId":"iWnAv",
			"priority":0,
			"skip":false,
			"toNodeId":"YJRqM",
			"type":"next"
		},
		{
			"fromNodeId":"b6k0i",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"YJRqM",
			"type":"next"
		},
		{
			"fromNodeId":"YJRqM",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"Bxz9p",
			"type":"if"
		},
		{
			"fromNodeId":"Bxz9p",
			"priority":0,
			"skip":false,
			"toNodeId":"54n8Q",
			"type":"next"
		},
		{
			"fromNodeId":"YJRqM",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"54n8Q",
			"type":"next"
		},
		{
			"fromNodeId":"54n8Q",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"IfSxr",
			"type":"if"
		},
		{
			"fromNodeId":"IfSxr",
			"name":"error",
			"priority":0,
			"skip":false,
			"toNodeId":"SBVx4",
			"type":"error"
		},
		{
			"fromNodeId":"IfSxr",
			"priority":0,
			"skip":false,
			"toNodeId":"8JA3B",
			"type":"next"
		},
		{
			"fromNodeId":"SBVx4",
			"priority":0,
			"skip":false,
			"toNodeId":"8JA3B",
			"type":"next"
		},
		{
			"fromNodeId":"54n8Q",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"8JA3B",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"67e70e734827981dba0472c0",
	"lastModifiedBy":0,
	"lcName":"json parse and stream content | ai agent",
	"modifiedTime":1761722763872,
	"name":"JSON Parse and Stream Content | AI Agent",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"Ix6Ef",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"partialBuffer":{
							"type":"string",
							"title":"partialBuffer"
						},
						"updatedMessageState":{
							"type":"string",
							"title":"updatedMessageState"
						},
						"isLastSlashModified":{
							"type":"boolean",
							"title":"isLastSlashModified"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"$schema":"http://json-schema.org/draft-07/schema#",
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"messageState":{
							"type":"string",
							"title":"Message State"
						},
						"currentBuffer":{
							"type":"string",
							"title":"currentBuffer"
						},
						"sessionId":{
							"type":"string",
							"title":"sessionId"
						},
						"isLastSlash":{
							"type":"boolean",
							"title":"isLastSlash"
						},
						"aiAgentId":{
							"type":"string",
							"title":"Ai Agent Id"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":163,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"feEsX",
			"index":2,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"event_type":{
							"type":"string",
							"title":"event_type"
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"event_type":"message_delta"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"event_type":{
							"type":"string",
							"title":"event_type"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{},
				"visibleOptionalFields":[
					"root.parameters.items.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":73,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"Q2r1I",
			"index":3,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"messageStateUpdated"
					],
					"properties":{
						"chunkContent":{
							"type":"string",
							"title":"Chunk Content"
						},
						"updatedMessageState":{
							"type":"string",
							"title":"Updated Message State"
						},
						"messageStateUpdated":{
							"type":"boolean",
							"title":"Message State Updated"
						},
						"answer":{
							"type":"string",
							"title":"Answer"
						},
						"partialBuffer":{
							"type":"string",
							"title":"partialBuffer"
						},
						"thoughtChunkContent":{
							"type":"string",
							"title":"thoughtChunkContent"
						},
						"isLastSlashModified":{
							"type":"boolean",
							"title":"isLastSlashModified"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"messageState":{
							"type":"string",
							"title":"Message State"
						},
						"currentBuffer":{
							"type":"string",
							"title":"currentBuffer"
						},
						"isLastSlash":{
							"type":"boolean",
							"title":"isLastSlash"
						}
					}
				},
				"code":"import java.util.regex.Pattern\nimport java.util.regex.Matcher\n\nfinal String THINK_MARKER_FULL        = \"<think>\"\nfinal String THINK_END_MARKER_FULL    = \"</think>\"\nfinal String THOUGHT_MARKER_FULL      = \"\\\"thought\\\":\"\nfinal String FINAL_ANSWER_MARKER_FULL = \"\\\"final_answer\\\":\"\nfinal String TOOL_CALL_MARKER_FULL    = \"\\\"tool_call\\\":\"\nfinal String THOUGHT_XML_MARKER_FULL     = \"<thought>\"\nfinal String THOUGHT_XML_END_MARKER_FULL = \"</thought>\"\nfinal String FINAL_ANSWER_TEXT_MARKER_1 = \"finalanswer:\"\nfinal String FINAL_ANSWER_TEXT_MARKER_2 = \"final answer:\"\nfinal String FOLLOWUPS_TEXT_MARKER = \"followups\"\n\nfinal List<Map<String, Object>> PARTIAL_MARKERS = new ArrayList<>()\nPARTIAL_MARKERS.add(new LinkedHashMap<String, Object>([full: THINK_MARKER_FULL,        partials: [\"<\", \"<t\", \"<th\", \"<thi\", \"<thin\", \"<think\", \"<think>\"]]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String, Object>([full: THINK_END_MARKER_FULL,    partials: [\"<\", \"</\", \"</t\", \"</th\", \"</thi\", \"</thin\", \"</think\", \"</think>\"]]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String, Object>([full: THOUGHT_XML_MARKER_FULL,     partials: [\"<\", \"<t\", \"<th\", \"<tho\", \"<thou\", \"<thoug\", \"<though\", \"<thought\", \"<thought>\"]]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String, Object>([full: THOUGHT_XML_END_MARKER_FULL, partials: [\"<\", \"</\", \"</t\", \"</th\", \"</tho\", \"</thou\", \"</thoug\", \"</though\", \"</thought\", \"</thought>\"]]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String, Object>([full: THOUGHT_MARKER_FULL,      partials: [\"\\\"\", \"\\\"t\", \"\\\"th\", \"\\\"tho\", \"\\\"thou\", \"\\\"thoug\", \"\\\"though\", \"\\\"thought\", \"\\\"thought\\\"\", \"\\\"thought\\\":\"]]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String, Object>([full: FINAL_ANSWER_MARKER_FULL, partials: [\n    \"\\\"\", \"\\\"f\", \"\\\"fi\", \"\\\"fin\", \"\\\"fina\", \"\\\"final\", \"\\\"final_\", \"\\\"final_a\", \"\\\"final_an\", \"\\\"final_ans\",\n    \"\\\"final_answ\", \"\\\"final_answe\", \"\\\"final_answer\", \"\\\"final_answer\\\"\", \"\\\"final_answer\\\":\"\n]]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String, Object>([full: TOOL_CALL_MARKER_FULL,    partials: [\n    \"\\\"\", \"\\\"t\", \"\\\"to\", \"\\\"too\", \"\\\"tool\", \"\\\"tool_\", \"\\\"tool_c\", \"\\\"tool_ca\", \"\\\"tool_cal\", \"\\\"tool_call\", \"\\\"tool_call\\\"\", \"\\\"tool_call\\\":\"\n]]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String,Object>([\n        full     : FINAL_ANSWER_TEXT_MARKER_1,\n        partials : [\"f\",\"fi\",\"fin\",\"fina\",\"final\",\"finala\",\"finalan\",\n                    \"finalans\",\"finalansw\",\"finalanswer\",\"finalanswer:\"]\n]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String,Object>([\n        full     : FINAL_ANSWER_TEXT_MARKER_2,\n        partials : [\"f\",\"fi\",\"fin\",\"fina\",\"final\",\"final \",\n                    \"final a\",\"final an\",\"final ans\",\"final answ\",\n                    \"final answe\",\"final answer\",\"final answer:\"]\n]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String,Object>([\n        full     : FINAL_ANSWER_TEXT_MARKER_2,\n        partials : [\"f\",\"fi\",\"fin\",\"fina\",\"final\",\"final \",\n                    \"final a\",\"final an\",\"final ans\",\"final answ\",\n                    \"final answe\",\"final answer\",\"final answer:\"]\n]))\nPARTIAL_MARKERS.add(new LinkedHashMap<String, Object>([ \n    full : FOLLOWUPS_TEXT_MARKER,\n    partials : [ \"f\", \"fo\", \"fol\", \"foll\", \"follo\", \"follow\", \"followu\", \"followup\", \"followups\"] \n]))\n\nString currentBuffer = binding.hasVariable(\"currentBuffer\") ? binding.getVariable(\"currentBuffer\") as String : \"\"\nString partialBuffer = currentBuffer\nString messageState = binding.hasVariable(\"messageState\") ? binding.getVariable(\"messageState\") as String : \"STREAMING_STARTED\"\nString updatedMessageState = messageState\nboolean messageStateUpdated = false\n\nStringBuilder thoughtTextBuilder = new StringBuilder()\nStringBuilder finalAnswerTextBuilder = new StringBuilder()\nboolean done = false\n\nwhile (!done) {\n    List<Map<String, Object>> markers = new ArrayList<>()\n    markers.add(new LinkedHashMap<String, Object>([marker: THINK_MARKER_FULL,        idx: partialBuffer.toLowerCase().indexOf(THINK_MARKER_FULL)]))\n    markers.add(new LinkedHashMap<String, Object>([marker: THINK_END_MARKER_FULL,    idx: partialBuffer.toLowerCase().indexOf(THINK_END_MARKER_FULL)]))\n    markers.add(new LinkedHashMap<String, Object>([marker: THOUGHT_XML_MARKER_FULL,     idx: partialBuffer.toLowerCase().indexOf(THOUGHT_XML_MARKER_FULL)]))\n    markers.add(new LinkedHashMap<String, Object>([marker: THOUGHT_XML_END_MARKER_FULL, idx: partialBuffer.toLowerCase().indexOf(THOUGHT_XML_END_MARKER_FULL)]))\n    markers.add(new LinkedHashMap<String, Object>([marker: THOUGHT_MARKER_FULL,      idx: partialBuffer.toLowerCase().indexOf(THOUGHT_MARKER_FULL)]))\n    markers.add(new LinkedHashMap<String, Object>([marker: FINAL_ANSWER_MARKER_FULL, idx: partialBuffer.toLowerCase().indexOf(FINAL_ANSWER_MARKER_FULL)]))\n    markers.add(new LinkedHashMap<String, Object>([marker: TOOL_CALL_MARKER_FULL,    idx: partialBuffer.toLowerCase().indexOf(TOOL_CALL_MARKER_FULL)]))\n    markers.add(new LinkedHashMap<String,Object>([\n        marker : FINAL_ANSWER_TEXT_MARKER_1,\n        idx    : partialBuffer.toLowerCase().indexOf(FINAL_ANSWER_TEXT_MARKER_1)\n    ]))\n    markers.add(new LinkedHashMap<String,Object>([\n        marker : FINAL_ANSWER_TEXT_MARKER_2,\n        idx    : partialBuffer.toLowerCase().indexOf(FINAL_ANSWER_TEXT_MARKER_2)\n    ]))\n    markers.add(new LinkedHashMap<String,Object>([\n        marker : FOLLOWUPS_TEXT_MARKER,\n        idx    : partialBuffer.toLowerCase().indexOf(FOLLOWUPS_TEXT_MARKER)\n    ]))\n    markers = markers.findAll { (it[\"idx\"] as Integer) >= 0 }\n\n    String foundMarker = null\n    int foundIndex = -1\n    if (!markers.isEmpty()) {\n        Map<String, Object> earliest = markers.min { a, b -> ((Integer) a[\"idx\"]).compareTo((Integer) b[\"idx\"]) }\n        foundMarker = earliest[\"marker\"] as String\n        foundIndex = earliest[\"idx\"] as Integer\n    }\n\n    if (foundMarker == null) {\n        boolean endsWithPartial = false\n        String lower = partialBuffer.toLowerCase()\n        for (Map<String, Object> markerMap : PARTIAL_MARKERS) {\n            String full = markerMap[\"full\"] as String\n            List<String> partials = markerMap[\"partials\"] as List<String>\n            for (String pm : partials) {\n                if (lower.endsWith(pm) && !pm.equals(full)) {\n                    endsWithPartial = true\n                    break\n                }\n            }\n            if (endsWithPartial) break\n        }\n\n        if (endsWithPartial) {\n            break\n        }\n\n        if (\"FINAL_ANSWER\".equals(updatedMessageState)) {\n            finalAnswerTextBuilder.append(partialBuffer)\n        } else if (\"THOUGHT\".equals(updatedMessageState) || \"STREAMING_STARTED\".equals(messageState)) {\n            // if (\"STREAMING_STARTED\".equals(updatedMessageState)) {\n            //     updatedMessageState = \"THOUGHT\"\n            //     messageStateUpdated = true\n            // }\n            thoughtTextBuilder.append(partialBuffer)\n        }\n        partialBuffer = \"\"\n        break\n    }\n\n    String prefixText = partialBuffer.substring(0, foundIndex)\n    if (\"FINAL_ANSWER\".equals(updatedMessageState)) {\n        finalAnswerTextBuilder.append(prefixText)\n    } else if (\"THOUGHT\".equals(updatedMessageState) || \"STREAMING_STARTED\".equals(messageState)) {\n        // if (\"STREAMING_STARTED\".equals(updatedMessageState)) {\n        //     updatedMessageState = \"THOUGHT\"\n        //     messageStateUpdated = true\n        // }\n        thoughtTextBuilder.append(prefixText)\n    }\n\n    partialBuffer = partialBuffer.substring(foundIndex + foundMarker.length())\n    if ( FINAL_ANSWER_MARKER_FULL.equals(foundMarker)\n    || FINAL_ANSWER_TEXT_MARKER_1.equals(foundMarker)\n    || FINAL_ANSWER_TEXT_MARKER_2.equals(foundMarker) ) {\n        updatedMessageState = \"FINAL_ANSWER\"\n        messageStateUpdated = true\n    } else if (THOUGHT_MARKER_FULL.equals(foundMarker)\n            || THINK_MARKER_FULL.equals(foundMarker)\n            || THINK_END_MARKER_FULL.equals(foundMarker)\n            || THOUGHT_XML_MARKER_FULL.equals(foundMarker)\n            || THOUGHT_XML_END_MARKER_FULL.equals(foundMarker)) {\n        if (\"STREAMING_STARTED\".equals(messageState)) {\n            updatedMessageState = \"THOUGHT\"\n            messageStateUpdated = true\n        }\n    } else if (TOOL_CALL_MARKER_FULL.equals(foundMarker) || FOLLOWUPS_TEXT_MARKER.equals(foundMarker)) {\n        if (!\"TOOL_CALL\".equals(updatedMessageState)) {\n            updatedMessageState = \"TOOL_CALL\"\n            messageStateUpdated = true\n        }\n    }\n}\n\nList<String> patterns = [\n    '<think>',  '</think>',\n    '<thought>','</thought>',\n    '\",\"', ',\"', '\",', '{\"', '\"}', '{', '}', '\"'\n]\nString cleanString = thoughtTextBuilder.toString()\nfor (String pattern : patterns) {\n    cleanString = cleanString.replace(pattern, \"\")\n}\nString thoughtChunkContent = cleanString\n\ncleanString = finalAnswerTextBuilder.toString()\nfor (String pattern : patterns) {\n    cleanString = cleanString.replace(pattern, \"\")\n}\nString chunkContent = cleanString\n\nboolean isLastSlashX = binding.hasVariable(\"isLastSlash\") ? (boolean) binding.getVariable(\"isLastSlash\") : false\n\nthoughtChunkContent = thoughtChunkContent\n        .replaceAll('\\\\\\\\\\\\\\\\', '\\\\\\\\')\n        .replaceAll('\\\\\\\\n', '\\n')\n        .replaceAll('\\\\\\\\t', '\\t')\n        .replaceAll('\\\\\\\\r', '\\r')\n        .replaceAll('\\\\\\\\\\\"', '\\\"')\nif (thoughtChunkContent.startsWith(\"n\") && isLastSlashX) {\n    thoughtChunkContent = '\\n' + thoughtChunkContent.substring(1)\n}\n\nchunkContent = chunkContent\n        .replaceAll('\\\\\\\\\\\\\\\\', '\\\\\\\\')\n        .replaceAll('\\\\\\\\n', '\\n')\n        .replaceAll('\\\\\\\\t', '\\t')\n        .replaceAll('\\\\\\\\r', '\\r')\n        .replaceAll('\\\\\\\\\\\"', '\\\"')\nif (chunkContent.startsWith(\"n\") && isLastSlashX) {\n    chunkContent = '\\n' + chunkContent.substring(1)\n}\n\nboolean isLastSlashModified = false\n\nif (thoughtChunkContent != null && thoughtChunkContent.endsWith(\"\\\\\")) {\n    thoughtChunkContent = thoughtChunkContent.substring(0, thoughtChunkContent.length() - 1)\n    isLastSlashModified = true\n}\n\nif (chunkContent != null && chunkContent.endsWith(\"\\\\\")) {\n    chunkContent = chunkContent.substring(0, chunkContent.length() - 1)\n    isLastSlashModified = true\n}\n\nreturn [\n    thoughtChunkContent : thoughtChunkContent ?: null,\n    chunkContent        : chunkContent ?: null,\n    updatedMessageState : updatedMessageState,\n    messageStateUpdated : messageStateUpdated,\n    partialBuffer       : partialBuffer,\n    isLastSlashModified : isLastSlashModified\n]\n",
				"compile_static":true,
				"captureStdOutput":false,
				"parameters":{
					"messageState":"{{ Ix6Ef.outputs.messageState  }}",
					"currentBuffer":"{{ Ix6Ef.outputs.currentBuffer }}",
					"isLastSlash":"{{ Ix6Ef.outputs.isLastSlash }}"
				}
			},
			"skip":false,
			"subTitle":"read content",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":3,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"o7Ioh",
			"index":4,
			"inputs":{
				"filters":[
					{
						"property":"{{ Q2r1I.outputs.result.updatedMessageState }}",
						"filter":{
							"operator":"EQUAL",
							"value":"TOOL_CALL"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":3,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"o7Ioh@y2jxx@kQqTJ-1@l@y",
			"id":"Q002k",
			"index":5,
			"inputs":{
				"result":{
					"updatedMessageState":"{{ Q2r1I.outputs.result.updatedMessageState }}",
					"partialBuffer":"{{ Q2r1I.outputs.result.partialBuffer }}",
					"isLastSlashModified":"{{ Q2r1I.outputs.result.isLastSlashModified }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":75,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"kT3jR",
			"index":6,
			"inputs":{
				"filters":[
					{
						"property":"{{ Q2r1I.outputs.result.messageStateUpdated }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					},
					{
						"property":"{{ Ix6Ef.outputs.messageState }}",
						"filter":{
							"operator":"NOT_EQUAL",
							"value":"THOUGHT"
						}
					},
					{
						"property":"{{ Q2r1I.outputs.result.updatedMessageState }}",
						"filter":{
							"operator":"NOT_EQUAL",
							"value":"FINAL_ANSWER"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"message State",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":76,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kT3jR@y2jxx@kQqTJ-1@l@y",
			"id":"Hfci9",
			"index":7,
			"inputs":{
				"variables":[
					{
						"source":"{{ feEsX.outputs.event_type }}",
						"value":"message_start"
					}
				]
			},
			"skip":false,
			"subTitle":"update event type",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":72,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"b6k0i",
			"index":8,
			"inputs":{
				"filters":[
					{
						"property":"{{ Q2r1I.outputs.result.thoughtChunkContent }}",
						"filter":{
							"operator":"EXISTS"
						}
					},
					{
						"property":"{{ feEsX.outputs.event_type }}",
						"filter":{
							"operator":"EQUAL",
							"value":"message_start"
						}
					}
				],
				"operator":"OR"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":76,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"b6k0i@y2jxx@kQqTJ-1@l@y",
			"id":"UNRh9",
			"index":9,
			"inputs":{
				"automationId":"67b4908aaffe713b4ced2d83",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"chunkContent":"{{ Q2r1I.outputs.result.thoughtChunkContent }}",
					"type":"message",
					"caseId":"{{ Ix6Ef.outputs.sessionId  }}",
					"completed":false,
					"messageType":"THOUGHT",
					"eventType":"{{ feEsX.outputs.event_type }}",
					"aiAgentId":"{{ Ix6Ef.outputs.aiAgentId }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"stream",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"delay",
				"resourceVersion":164,
				"resourceName":"delay_for",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"UNRh9@b6k0i@y2jxx@kQqTJ-1@l@y@error",
			"id":"iWnAv",
			"index":10,
			"inputs":{
				"duration":1,
				"unit":"MILLISECONDS"
			},
			"skip":false,
			"subTitle":"Delay",
			"title":"Set delay duration",
			"type":"DELAY"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":75,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"YJRqM",
			"index":11,
			"inputs":{
				"filters":[
					{
						"property":"{{ Q2r1I.outputs.result.messageStateUpdated }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"message State",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":76,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"YJRqM@y2jxx@kQqTJ-1@l@y",
			"id":"Bxz9p",
			"index":12,
			"inputs":{
				"variables":[
					{
						"source":"{{ feEsX.outputs.event_type }}",
						"value":"message_start"
					}
				]
			},
			"skip":false,
			"subTitle":"update event type",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":72,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"54n8Q",
			"index":13,
			"inputs":{
				"filters":[
					{
						"filters":[
							{
								"property":"{{ Q2r1I.outputs.result.chunkContent }}",
								"filter":{
									"operator":"EXISTS"
								}
							},
							{
								"filters":[
									{
										"property":"{{ Q2r1I.outputs.result.messageStateUpdated }}",
										"filter":{
											"operator":"EQUAL",
											"value":"true"
										}
									},
									{
										"property":"{{ Q2r1I.outputs.result.updatedMessageState }}",
										"filter":{
											"operator":"EQUAL",
											"value":"FINAL_ANSWER"
										}
									}
								],
								"operator":"AND"
							}
						],
						"operator":"OR"
					},
					{
						"property":"{{ Q2r1I.outputs.result.updatedMessageState }}",
						"filter":{
							"operator":"NOT_EQUAL",
							"value":"TOOL_CALL"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":76,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"MANUAL",
			"groupId":"54n8Q@y2jxx@kQqTJ-1@l@y",
			"id":"IfSxr",
			"index":14,
			"inputs":{
				"automationId":"67b4908aaffe713b4ced2d83",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"chunkContent":"{{ Q2r1I.outputs.result.chunkContent }}",
					"type":"message",
					"caseId":"{{ Ix6Ef.outputs.sessionId  }}",
					"completed":false,
					"messageType":"=IF(EXACT({{ Q2r1I.outputs.result.updatedMessageState }}, \"THOUGHT\"), \"THOUGHT\", \"\")",
					"eventType":"{{ feEsX.outputs.event_type }}",
					"aiAgentId":"{{ Ix6Ef.outputs.aiAgentId }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"MANUAL",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"stream",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"delay",
				"resourceVersion":164,
				"resourceName":"delay_for",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"IfSxr@54n8Q@y2jxx@kQqTJ-1@l@y@error",
			"id":"SBVx4",
			"index":15,
			"inputs":{
				"duration":1,
				"unit":"MILLISECONDS"
			},
			"skip":false,
			"subTitle":"Delay",
			"title":"Set delay duration",
			"type":"DELAY"
		},
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"y2jxx@kQqTJ-1@l",
			"id":"8JA3B",
			"index":16,
			"inputs":{
				"result":{
					"partialBuffer":"{{ Q2r1I.outputs.result.partialBuffer }}",
					"updatedMessageState":"{{ Q2r1I.outputs.result.updatedMessageState }}",
					"isLastSlashModified":"{{ Q2r1I.outputs.result.isLastSlashModified }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":-1,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":false,
		"enableRunLogging":false,
		"enableVariableLogging":false,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"version":109
}