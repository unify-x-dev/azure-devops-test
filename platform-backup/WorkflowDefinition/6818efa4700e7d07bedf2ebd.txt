{
	"appsUsed":[
		
	],
	"createdTime":1748544408312,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296201274,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd090c3d19149a9e34f0",
		"status":"DEPLOYED",
		"version":54,
		"workflowVersion":84
	},
	"edges":[
		{
			"fromNodeId":"6CYv0",
			"priority":0,
			"skip":false,
			"toNodeId":"QQQpy",
			"type":"next"
		},
		{
			"fromNodeId":"QQQpy",
			"priority":0,
			"skip":false,
			"toNodeId":"B7eeR",
			"type":"next"
		},
		{
			"fromNodeId":"B7eeR",
			"priority":0,
			"skip":false,
			"toNodeId":"dLomS",
			"type":"next"
		},
		{
			"fromNodeId":"dLomS",
			"priority":0,
			"skip":false,
			"toNodeId":"PjICs",
			"type":"next"
		},
		{
			"fromNodeId":"PjICs",
			"priority":0,
			"skip":false,
			"toNodeId":"EJRQt",
			"type":"loop"
		},
		{
			"fromNodeId":"EJRQt",
			"priority":0,
			"skip":false,
			"toNodeId":"8Qafd",
			"type":"next"
		},
		{
			"fromNodeId":"8Qafd",
			"priority":0,
			"skip":false,
			"toNodeId":"fbk5x",
			"type":"next"
		},
		{
			"fromNodeId":"fbk5x",
			"priority":0,
			"skip":false,
			"toNodeId":"ATU0h",
			"type":"next"
		},
		{
			"fromNodeId":"ATU0h",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"PjICs",
			"type":"next"
		},
		{
			"fromNodeId":"PjICs",
			"priority":0,
			"skip":false,
			"toNodeId":"mHFub",
			"type":"next"
		},
		{
			"fromNodeId":"mHFub",
			"priority":0,
			"skip":false,
			"toNodeId":"PtODo",
			"type":"loop"
		},
		{
			"fromNodeId":"PtODo",
			"priority":0,
			"skip":false,
			"toNodeId":"oCB5h",
			"type":"next"
		},
		{
			"fromNodeId":"oCB5h",
			"priority":0,
			"skip":false,
			"toNodeId":"ZxYOz",
			"type":"next"
		},
		{
			"fromNodeId":"ZxYOz",
			"priority":0,
			"skip":false,
			"toNodeId":"lGvUF",
			"type":"next"
		},
		{
			"fromNodeId":"lGvUF",
			"priority":0,
			"skip":false,
			"toNodeId":"Xw0Hs",
			"type":"next"
		},
		{
			"fromNodeId":"Xw0Hs",
			"priority":0,
			"skip":false,
			"toNodeId":"FEU1n",
			"type":"next"
		},
		{
			"fromNodeId":"FEU1n",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"mHFub",
			"type":"next"
		},
		{
			"fromNodeId":"mHFub",
			"priority":0,
			"skip":false,
			"toNodeId":"YQ5s8",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"6818efa4700e7d07bedf2ebd",
	"lastModifiedBy":0,
	"lcName":"docx to html",
	"modifiedTime":1761722737300,
	"name":"Docx to HTML",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"hm69n-1",
			"id":"6CYv0",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"htmlContent":{
							"type":"string",
							"title":"Html Content"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"publicUrl":{
							"type":"string",
							"title":"Public Url"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"hm69n-1",
			"id":"QQQpy",
			"index":2,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"htmlContent":{
							"type":"string",
							"title":"htmlContent"
						}
					},
					"required":[]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"htmlContent":{
							"type":"string",
							"title":"htmlContent"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable ",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"hm69n-1",
			"id":"B7eeR",
			"index":3,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"html":{
							"type":"string",
							"title":"html"
						},
						"emf_images":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"placeholder":{
										"type":"string",
										"title":"placeholder"
									},
									"b64":{
										"type":"string",
										"title":"b64"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"emf_images"
						},
						"images":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"placeholder":{
										"type":"string",
										"title":"placeholder"
									},
									"b64":{
										"type":"string",
										"title":"b64"
									},
									"mimeType":{
										"type":"string",
										"title":"mimeType"
									},
									"fileName":{
										"type":"string",
										"title":"fileName"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"images"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"url":{
							"type":"string",
							"title":"url"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"from pathlib import Path\n\nimport base64\nimport html\nimport zipfile\nfrom lxml import etree\nimport requests\nimport tempfile\nimport os\nimport re\n\n# Create a temporary file\nwith tempfile.NamedTemporaryFile(delete=False) as tmp_file:\n    # Download the file and write to temp file\n    response = requests.get(url, stream=True)\n    response.raise_for_status()\n    for chunk in response.iter_content(chunk_size=8192):\n        tmp_file.write(chunk)\n    temp_file_name = tmp_file.name\n\nNS = {\n    'w' : 'http://schemas.openxmlformats.org/wordprocessingml/2006/main',\n    'a' : 'http://schemas.openxmlformats.org/drawingml/2006/main',\n    'r' : 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n    'wp': 'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing'\n}\n\nemf_images = []\nimages = []\n\ndef get_image_tag(ext, b64, emf_images, images):\n    import uuid\n\n    if ext.lower() == 'emf':\n        placeholder = f\"__EMF_IMAGE_{len(emf_images)}__\"\n        emf_images.append({\n            \"placeholder\": placeholder,\n            \"b64\": b64\n        })\n        return f'<img src=\"{placeholder}\"/>'\n    else:\n        placeholder = f\"__NORMAL_IMAGE_{len(images)}__\"\n        images.append({\n            \"placeholder\": placeholder,\n            \"b64\": b64,\n            \"mimeType\": f\"image/{ext}\",\n            \"fileName\": f\"{uuid.uuid4()}.{ext}\"\n        })\n        return f'<img src=\"{placeholder}\"/>'\n\nwith zipfile.ZipFile(temp_file_name) as z:\n    rels_xml = etree.fromstring(z.read('word/_rels/document.xml.rels'))\n    rels = {}\n    for r in rels_xml:\n        rels[r.attrib['Id']] = r.attrib['Target']\n\n    numdef = {}\n    try:\n        num_xml = etree.fromstring(z.read('word/numbering.xml'))\n        abs_fmt = {}\n        for absnum in num_xml.findall('w:abstractNum', NS):\n            aid = absnum.attrib['{' + NS['w'] + '}abstractNumId']\n            for lvl in absnum.findall('w:lvl', NS):\n                ilvl = int(lvl.attrib['{' + NS['w'] + '}ilvl'])\n                fmt  = lvl.find('w:numFmt', NS).attrib['{' + NS['w'] + '}val']\n                abs_fmt[f\"{aid}:{ilvl}\"] = fmt\n        for num in num_xml.findall('w:num', NS):\n            nid  = num.attrib['{' + NS['w'] + '}numId']\n            aid  = num.find('w:abstractNumId', NS).attrib['{' + NS['w'] + '}val']\n            for ilvl in range(0, 10):\n                fmt = abs_fmt.get(f\"{aid}:{ilvl}\")\n                if fmt:\n                    numdef[f\"{nid}:{ilvl}\"] = 'ol' if fmt not in ('bullet', 'none') else 'ul'\n    except KeyError:\n        pass\n\n    styles = {}\n    try:\n        styles_xml = etree.fromstring(z.read('word/styles.xml'))\n        for s in styles_xml.findall('w:style', NS):\n            style_id = s.attrib.get('{' + NS['w'] + '}styleId')\n            name_el  = s.find('w:name', NS)\n            if name_el is not None and name_el.attrib.get(\n                    '{' + NS['w'] + '}val', '').lower().startswith('heading'):\n                try:\n                    lvl = int(name_el.attrib['{' + NS['w'] + '}val'][-1])\n                    styles[style_id] = min(lvl, 6)\n                except (ValueError, IndexError):\n                    pass\n    except KeyError:\n        pass\n\n    footnotes = {}\n    footnote_used = []\n    try:\n        fn_xml = etree.fromstring(z.read('word/footnotes.xml'))\n        for fn in fn_xml.findall('w:footnote', NS):\n            fid = fn.attrib['{' + NS['w'] + '}id']\n            if int(fid) < 0:\n                continue\n            text = ''.join(t.text or '' for t in fn.iterfind('.//w:t', NS))\n            footnotes[fid] = html.escape(text)\n    except KeyError:\n        pass\n\n    body = etree.fromstring(z.read('word/document.xml')).find('w:body', NS)\n\n    html_chunks = []\n    list_stack = []\n    prev_ilvl = None\n    prev_is_list = False\n    footnote_index = {}\n\n    def run_to_html(run):\n        import html\n        NS = {\n            'w' : 'http://schemas.openxmlformats.org/wordprocessingml/2006/main',\n            'a' : 'http://schemas.openxmlformats.org/drawingml/2006/main',\n            'r' : 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n            'wp': 'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing'\n        }\n        HL_MAP = {\n            'yellow': '#ffff00', 'lightYellow': '#ffffcc', 'green': '#00ff00', 'lightGray': '#d9d9d9',\n            'turquoise': '#00ffff', 'cyan': '#00ffff', 'brightGreen': '#00ff00', 'pink': '#ff00ff',\n            'blue': '#0000ff', 'red': '#ff0000', 'darkYellow': '#999900', 'darkGreen': '#006600',\n            'darkRed': '#990000', 'darkBlue': '#000099'\n        }\n        \n        text = ''.join(t.text or '' for t in run.findall('w:t', NS))\n        text = html.escape(text).replace('\\n', '<br/>')\n        if not text.strip():\n            return ''\n        rPr  = run.find('w:rPr', NS)\n        if rPr is None:\n            return text\n        styles_ = []\n        open_tags, close_tags = [], []\n        # BOLD\n        b = rPr.find('w:b', NS)\n        if b is not None:\n            val = b.attrib.get('{' + NS['w'] + '}val', '1')\n            if val != '0':\n                open_tags.append('<strong>'); close_tags.append('</strong>')\n        # ITALIC\n        i = rPr.find('w:i', NS)\n        if i is not None:\n            val = i.attrib.get('{' + NS['w'] + '}val', '1')\n            if val != '0':\n                open_tags.append('<em>'); close_tags.append('</em>')\n        # UNDERLINE\n        u = rPr.find('w:u', NS)\n        if u is not None:\n            val = u.attrib.get('{' + NS['w'] + '}val', 'single')\n            if val not in ('none', '0'):\n                open_tags.append('<u>'); close_tags.append('</u>')\n        # STRIKETHROUGH\n        s = rPr.find('w:strike', NS)\n        if s is not None:\n            val = s.attrib.get('{' + NS['w'] + '}val', '1')\n            if val != '0':\n                open_tags.append('<s>'); close_tags.append('</s>')\n        # ... (rest of your code unchanged)\n        # (color, highlight, font, etc. as before)\n        # ...\n        va = rPr.find('w:vertAlign', NS)\n        if va is not None:\n            val = va.attrib['{' + NS['w'] + '}val']\n            if val == 'superscript':\n                open_tags.append('<sup>'); close_tags.append('</sup>')\n            elif val == 'subscript':\n                open_tags.append('<sub>'); close_tags.append('</sub>')\n        color = rPr.find('w:color', NS)\n        if color is not None and color.attrib.get('{' + NS['w'] + '}val') not in ('auto', None):\n            val = '{' + NS['w'] + '}val'\n            styles_.append('color:#' + color.attrib[val])\n        highlight = rPr.find('w:highlight', NS)\n        mark_open = mark_close = ''\n        if highlight is not None:\n            hval = highlight.attrib.get('{' + NS['w'] + '}val')\n            color_val = HL_MAP.get(hval, hval)\n            mark_open = '<mark style=\"background-color:' + color_val + '\">'\n            mark_close = '</mark>'\n        size = rPr.find('w:sz', NS)\n        if size is not None:\n            pt = int(size.attrib['{' + NS['w'] + '}val']) * 0.5\n            styles_.append('font-size:' + str(pt) + 'pt')\n        font = rPr.find('w:rFonts', NS)\n        if font is not None and font.attrib.get('{' + NS['w'] + '}ascii'):\n            val = '{' + NS['w'] + '}ascii'\n            styles_.append('font-family:' + font.attrib[val])\n        style_attr = ' style=\"' + ';'.join(styles_) + '\"' if styles_ else ''\n        data = ''.join(open_tags) + mark_open + '<span' + style_attr + '>' + text + '</span>' + mark_close + ''.join(reversed(close_tags))\n        return data\n\n    for node in body:\n        tag = etree.QName(node).localname\n\n        def is_page_or_section_break(p):\n            NS = {\n                'w' : 'http://schemas.openxmlformats.org/wordprocessingml/2006/main',\n                'a' : 'http://schemas.openxmlformats.org/drawingml/2006/main',\n                'r' : 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n                'wp': 'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing'\n            }\n            return p.find('.//w:br[@w:type=\"page\"]', NS) is not None \\\n                or p.find('.//w:type[@w:val=\"page\"]', NS) is not None \\\n                or p.find('.//w:type[@w:val=\"section\"]', NS) is not None\n\n        if tag == 'p' and is_page_or_section_break(node):\n            while list_stack:\n                html_chunks.append('</li></' + list_stack.pop()[1] + '>')\n            html_chunks.append('<hr class=\"docx-break\"/>')\n            prev_ilvl = None\n            prev_is_list = False\n            continue\n\n        def para_numbering(p, numdef):\n            NS = {\n                'w' : 'http://schemas.openxmlformats.org/wordprocessingml/2006/main',\n                'a' : 'http://schemas.openxmlformats.org/drawingml/2006/main',\n                'r' : 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n                'wp': 'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing'\n            }\n            numPr = p.find('w:pPr/w:numPr', NS)\n            if numPr is None:\n                return False, None\n            nid_el = numPr.find('w:numId', NS)\n            ilvl_el = numPr.find('w:ilvl', NS)\n            if nid_el is None:\n                return False, None\n            nid    = nid_el.attrib['{' + NS['w'] + '}val']\n            ilvl   = int(ilvl_el.attrib['{' + NS['w'] + '}val']) if ilvl_el is not None else 0\n            list_type = numdef.get(f\"{nid}:{ilvl}\", 'ul')\n            return True, (ilvl, list_type)\n\n        if tag == 'p':\n            is_list, list_info = para_numbering(node, numdef)\n            if is_list:\n                ilvl, list_type = list_info\n                if prev_ilvl is None or ilvl > prev_ilvl:\n                    html_chunks.append('<' + list_type + '><li>')\n                    list_stack.append((ilvl, list_type))\n                elif ilvl < prev_ilvl:\n                    while list_stack and list_stack[-1][0] > ilvl:\n                        html_chunks.append('</li></' + list_stack.pop()[1] + '>')\n                    html_chunks.append('</li><li>')\n                else:\n                    if prev_is_list:\n                        html_chunks.append('</li><li>')\n                    else:\n                        html_chunks.append('<li>')\n                parts = []\n                for run in node:\n                    if etree.QName(run).localname == 'r':\n                        drawing = run.find('w:drawing', NS)\n                        if drawing is not None:\n                            blip = drawing.find('.//a:blip', NS)\n                            if blip is not None:\n                                rId = blip.attrib.get('{' + NS['r'] + '}embed')\n                                target = rels.get(rId)\n                                if target:\n                                    ext = target.split('.')[-1]\n                                    image_path = 'word/' + target\n                                    image_data = z.read(image_path)\n                                    b64 = base64.b64encode(image_data).decode('utf-8')\n                                    parts.append(get_image_tag(ext, b64, emf_images, images))\n                        else:\n                            parts.append(run_to_html(run))\n                    elif etree.QName(run).localname == 'hyperlink':\n                        rid = run.attrib.get('{' + NS['r'] + '}id')\n                        href = rels.get(rid, '#')\n                        inner = []\n                        for r2 in run:\n                            if etree.QName(r2).localname == 'r':\n                                inner.append(run_to_html(r2))\n                        parts.append('<a href=\"' + html.escape(href) + '\">' + ''.join(inner) + '</a>')\n                    elif etree.QName(run).localname == 'footnoteReference':\n                        fid = run.attrib['{' + NS['w'] + '}id']\n                        if fid in footnotes:\n                            if fid not in footnote_index:\n                                footnote_index[fid] = len(footnote_index) + 1\n                                footnote_used.append(fid)\n                            num = footnote_index[fid]\n                            parts.append('<sup id=\"ref-' + str(num) + '\"><a href=\"#fn-' + str(num) + '\">' + str(num) + '</a></sup>')\n                content = ''.join(parts).strip()\n                if content:\n                    html_chunks.append(content)\n                prev_ilvl = ilvl\n                prev_is_list = True\n            else:\n                while list_stack:\n                    html_chunks.append('</li></' + list_stack.pop()[1] + '>')\n                tag2, attrs = 'p', ''\n                pstyle = node.find('w:pPr/w:pStyle', NS)\n                if pstyle is not None:\n                    sid = pstyle.attrib['{' + NS['w'] + '}val']\n                    if sid in styles:\n                        tag2 = 'h' + str(styles[sid])\n                jc = node.find('w:pPr/w:jc', NS)\n                if jc is not None:\n                    val = jc.attrib['{' + NS['w'] + '}val']\n                    attrs = ' style=\"text-align:' + val + '\"'\n                parts = []\n                for run in node:\n                    if etree.QName(run).localname == 'r':\n                        drawing = run.find('w:drawing', NS)\n                        if drawing is not None:\n                            blip = drawing.find('.//a:blip', NS)\n                            if blip is not None:\n                                rId = blip.attrib.get('{' + NS['r'] + '}embed')\n                                target = rels.get(rId)\n                                if target:\n                                    ext = target.split('.')[-1]\n                                    image_path = 'word/' + target\n                                    image_data = z.read(image_path)\n                                    b64 = base64.b64encode(image_data).decode('utf-8')\n                                    parts.append(get_image_tag(ext, b64, emf_images, images))\n                        else:\n                            parts.append(run_to_html(run))\n                    elif etree.QName(run).localname == 'hyperlink':\n                        rid = run.attrib.get('{' + NS['r'] + '}id')\n                        href = rels.get(rid, '#')\n                        inner = []\n                        for r2 in run:\n                            if etree.QName(r2).localname == 'r':\n                                inner.append(run_to_html(r2))\n                        parts.append('<a href=\"' + html.escape(href) + '\">' + ''.join(inner) + '</a>')\n                    elif etree.QName(run).localname == 'footnoteReference':\n                        fid = run.attrib['{' + NS['w'] + '}id']\n                        if fid in footnotes:\n                            if fid not in footnote_index:\n                                footnote_index[fid] = len(footnote_index) + 1\n                                footnote_used.append(fid)\n                            num = footnote_index[fid]\n                            parts.append('<sup id=\"ref-' + str(num) + '\"><a href=\"#fn-' + str(num) + '\">' + str(num) + '</a></sup>')\n                content = ''.join(parts).strip()\n                if content:\n                    html_chunks.append('<' + tag2 + attrs + '>' + content + '</' + tag2 + '>')\n                prev_ilvl = None\n                prev_is_list = False\n\n        elif tag == 'tbl':\n            while list_stack:\n                html_chunks.append('</li></' + list_stack.pop()[1] + '>')\n            rows_html = []\n            for r, row in enumerate(node.findall('w:tr', NS)):\n                tr_html, is_header = [], r == 0 and row.find('.//w:tblHeader', NS) is not None\n                cell_tag = 'th' if is_header else 'td'\n                for cell in row.findall('w:tc', NS):\n                    shade = cell.find('.//w:shd', NS)\n                    bgcss = ''\n                    if shade is not None:\n                        fill = shade.attrib.get('{' + NS['w'] + '}fill')\n                        if fill and fill != 'auto':\n                            bgcss = ' style=\"background-color:#' + fill + '\"'\n                    cell_inner = []\n                    for p in cell.findall('w:p', NS):\n                        tag2, attrs = 'p', ''\n                        pstyle = p.find('w:pPr/w:pStyle', NS)\n                        if pstyle is not None:\n                            sid = pstyle.attrib['{' + NS['w'] + '}val']\n                            if sid in styles:\n                                tag2 = 'h' + str(styles[sid])\n                        jc = p.find('w:pPr/w:jc', NS)\n                        if jc is not None:\n                            val = jc.attrib['{' + NS['w'] + '}val']\n                            attrs = ' style=\"text-align:' + val + '\"'\n                        parts = []\n                        for run in p:\n                            if etree.QName(run).localname == 'r':\n                                drawing = run.find('w:drawing', NS)\n                                if drawing is not None:\n                                    blip = drawing.find('.//a:blip', NS)\n                                    if blip is not None:\n                                        rId = blip.attrib.get('{' + NS['r'] + '}embed')\n                                        target = rels.get(rId)\n                                        if target:\n                                            ext = target.split('.')[-1]\n                                            image_path = 'word/' + target\n                                            image_data = z.read(image_path)\n                                            b64 = base64.b64encode(image_data).decode('utf-8')\n                                            parts.append(get_image_tag(ext, b64, emf_images, images))\n                                else:\n                                    parts.append(run_to_html(run))\n                            elif etree.QName(run).localname == 'hyperlink':\n                                rid = run.attrib.get('{' + NS['r'] + '}id')\n                                href = rels.get(rid, '#')\n                                inner = []\n                                for r2 in run:\n                                    if etree.QName(r2).localname == 'r':\n                                        inner.append(run_to_html(r2))\n                                parts.append('<a href=\"' + html.escape(href) + '\">' + ''.join(inner) + '</a>')\n                            elif etree.QName(run).localname == 'footnoteReference':\n                                fid = run.attrib['{' + NS['w'] + '}id']\n                                if fid in footnotes:\n                                    if fid not in footnote_index:\n                                        footnote_index[fid] = len(footnote_index) + 1\n                                        footnote_used.append(fid)\n                                    num = footnote_index[fid]\n                                    parts.append('<sup id=\"ref-' + str(num) + '\"><a href=\"#fn-' + str(num) + '\">' + str(num) + '</a></sup>')\n                        content = ''.join(parts).strip()\n                        if content:\n                            cell_inner.append('<' + tag2 + attrs + '>' + content + '</' + tag2 + '>')\n                    tr_html.append('<' + cell_tag + bgcss + '>' + ''.join(cell_inner) + '</' + cell_tag + '>')\n                rows_html.append('<tr>' + ''.join(tr_html) + '</tr>')\n            html_chunks.append('<table><tbody>' + ''.join(rows_html) + '</tbody></table>')\n            prev_ilvl = None\n            prev_is_list = False\n\n        else:\n            pass\n\n    while list_stack:\n        html_chunks.append('</li></' + list_stack.pop()[1] + '>')\n\n    if footnote_used:\n        html_chunks.append('<hr/><ol class=\"docx-footnotes\">')\n        for idx, nid in enumerate(footnote_used, 1):\n            html_chunks.append('<li id=\"fn-' + str(idx) + '\">' + footnotes[nid] + '</li>')\n        html_chunks.append('</ol>')\n\n    html_out = ''.join(html_chunks)\n    html_clean = re.sub(r'<p\\b[^>]*>\\s*(<img\\b[^>]*>)\\s*</p>', r'\\1', html_out, flags=re.IGNORECASE)\n    html_clean = re.sub(r'<p\\b[^>]*>\\s*</p>', '', html_clean, flags=re.IGNORECASE)\n    result = {\n        \"html\": html_clean,\n        \"emf_images\": emf_images,\n        \"images\": images\n    }",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"url":"{{ 6CYv0.outputs.publicUrl }}"
				}
			},
			"skip":false,
			"subTitle":"Code ",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"hm69n-1",
			"id":"dLomS",
			"index":4,
			"inputs":{
				"variables":[
					{
						"source":"{{ QQQpy.outputs.htmlContent }}",
						"value":"{{ B7eeR.outputs.result.html }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable ",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":1,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"hm69n-1",
			"id":"PjICs",
			"index":5,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ B7eeR.outputs.result.images }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"files_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"files_by_unifyapps_upload_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"PjICs@hm69n-1@l",
			"id":"EJRQt",
			"index":6,
			"inputs":{
				"base64Content":"{{ PjICs.outputs.item.b64 }}",
				"fileName":"{{ PjICs.outputs.item.fileName }}",
				"mimeType":"{{ PjICs.outputs.item.mimeType }}",
				"option":"base64Content"
			},
			"skip":false,
			"subTitle":"Files ",
			"title":"Upload file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"utility_by_unifyapps_create_unifyapps_path_for_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"PjICs@hm69n-1@l",
			"id":"8Qafd",
			"index":7,
			"inputs":{
				"file":"{{ EJRQt.outputs.fileDetails }}"
			},
			"skip":false,
			"subTitle":"Utility ",
			"title":"Create UnifyApps path for file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"PjICs@hm69n-1@l",
			"id":"fbk5x",
			"index":8,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"htmlOut":{
							"type":"string",
							"title":"htmlOut"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"base64":{
							"type":"string",
							"title":"base64"
						},
						"placeholder":{
							"type":"string",
							"title":"placeholder"
						},
						"htmlContent":{
							"type":"string",
							"title":"htmlContent"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"// def dataUrl = \"data:image/svg+xml;base64,${base64}\"\n\n// Use regex to replace the placeholder in the img tag\ndef htmlOut = htmlContent.replaceAll(/<img src=\"${placeholder}\"\\s*\\/?>/, \"<img src=\\\"${base64}\\\"/>\")\n\nreturn [\n  \"htmlOut\": htmlOut\n]",
				"parameters":{
					"placeholder":"{{ PjICs.outputs.item.placeholder }}",
					"htmlContent":"{{ QQQpy.outputs.htmlContent }}",
					"base64":"{{ 8Qafd.outputs.path }}"
				}
			},
			"skip":false,
			"subTitle":"Code ",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"PjICs@hm69n-1@l",
			"id":"ATU0h",
			"index":9,
			"inputs":{
				"variables":[
					{
						"source":"{{ QQQpy.outputs.htmlContent }}",
						"value":"{{ fbk5x.outputs.result.htmlOut }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable ",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":1,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"hm69n-1",
			"id":"mHFub",
			"index":10,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ B7eeR.outputs.result.emf_images }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"unify_ai",
				"resourceVersion":1,
				"resourceName":"unify_ai_image_conversion",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mHFub@hm69n-1@l",
			"id":"PtODo",
			"index":11,
			"inputs":{
				"outputMimetype":"image/svg+xml",
				"base64Img":"{{ mHFub.outputs.item.b64 }}",
				"inputMimetype":"image/emf"
			},
			"skip":false,
			"subTitle":"Unify AI",
			"title":"Image Converter ",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mHFub@hm69n-1@l",
			"id":"oCB5h",
			"index":12,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"filename":{
							"type":"string",
							"title":"filename"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def getUniqueFilename(String extension = \"txt\") {\n    \"${UUID.randomUUID().toString()}.${extension}\"\n}\n\n// Example usage\ndef filename = getUniqueFilename(extension = \"svg\")\nreturn [\n  \"filename\": filename\n]"
			},
			"skip":false,
			"subTitle":"Code ",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"files_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"files_by_unifyapps_upload_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mHFub@hm69n-1@l",
			"id":"ZxYOz",
			"index":13,
			"inputs":{
				"base64Content":"{{ PtODo.outputs.base64 }}",
				"fileName":"{{ oCB5h.outputs.result.filename }}",
				"mimeType":"image/svg+xml",
				"option":"base64Content"
			},
			"skip":false,
			"subTitle":"Files ",
			"title":"Upload file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"utility_by_unifyapps_create_unifyapps_path_for_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mHFub@hm69n-1@l",
			"id":"lGvUF",
			"index":14,
			"inputs":{
				"file":"{{ ZxYOz.outputs.fileDetails }}"
			},
			"skip":false,
			"subTitle":"Utility ",
			"title":"Create UnifyApps path for file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mHFub@hm69n-1@l",
			"id":"Xw0Hs",
			"index":15,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"htmlOut":{
							"type":"string",
							"title":"htmlOut"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"base64":{
							"type":"string",
							"title":"base64"
						},
						"placeholder":{
							"type":"string",
							"title":"placeholder"
						},
						"htmlContent":{
							"type":"string",
							"title":"htmlContent"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"// def dataUrl = \"data:;base64,${base64}\"\n\n// Use regex to replace the placeholder in the img tag\ndef htmlOut = htmlContent.replaceAll(/<img src=\"${placeholder}\"\\s*\\/?>/, \"<img src=\\\"${base64}\\\"/>\")\n\nreturn [\n  \"htmlOut\": htmlOut\n]",
				"parameters":{
					"placeholder":"{{ mHFub.outputs.item.placeholder }}",
					"htmlContent":"{{ QQQpy.outputs.htmlContent }}",
					"base64":"{{ lGvUF.outputs.path }}"
				}
			},
			"skip":false,
			"subTitle":"Code ",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mHFub@hm69n-1@l",
			"id":"FEU1n",
			"index":16,
			"inputs":{
				"variables":[
					{
						"source":"{{ QQQpy.outputs.htmlContent }}",
						"value":"{{ Xw0Hs.outputs.result.htmlOut }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable ",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":1,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"hm69n-1",
			"id":"YQ5s8",
			"index":17,
			"inputs":{
				"result":{
					"htmlContent":"{{ QQQpy.outputs.htmlContent }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1728,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":86
}