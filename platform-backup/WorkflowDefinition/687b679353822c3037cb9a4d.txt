{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1752917907727,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296273499,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd510c3d19149a9e3628",
		"status":"DEPLOYED",
		"version":28,
		"workflowVersion":48
	},
	"edges":[
		{
			"fromNodeId":"GpPp2",
			"priority":0,
			"skip":false,
			"toNodeId":"Oqpz0",
			"type":"next"
		},
		{
			"fromNodeId":"Oqpz0",
			"priority":0,
			"skip":false,
			"toNodeId":"_PMUwM",
			"type":"next"
		},
		{
			"fromNodeId":"_PMUwM",
			"priority":0,
			"skip":false,
			"toNodeId":"n_LSZUw",
			"type":"next"
		},
		{
			"fromNodeId":"n_LSZUw",
			"priority":0,
			"skip":false,
			"toNodeId":"fc5LR",
			"type":"next"
		},
		{
			"fromNodeId":"fc5LR",
			"priority":0,
			"skip":false,
			"toNodeId":"LnUU4",
			"type":"next"
		},
		{
			"fromNodeId":"LnUU4",
			"priority":0,
			"skip":false,
			"toNodeId":"BWDmq",
			"type":"next"
		},
		{
			"fromNodeId":"BWDmq",
			"priority":0,
			"skip":false,
			"toNodeId":"W8L0o",
			"type":"next"
		},
		{
			"fromNodeId":"W8L0o",
			"priority":0,
			"skip":false,
			"toNodeId":"n_V1MYc",
			"type":"next"
		},
		{
			"fromNodeId":"n_V1MYc",
			"priority":0,
			"skip":false,
			"toNodeId":"n_LS81y",
			"type":"next"
		},
		{
			"fromNodeId":"n_LS81y",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_rohzu",
			"type":"if"
		},
		{
			"fromNodeId":"n_rohzu",
			"priority":0,
			"skip":false,
			"toNodeId":"o9ReY",
			"type":"next"
		},
		{
			"fromNodeId":"n_LS81y",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"o9ReY",
			"type":"next"
		},
		{
			"fromNodeId":"o9ReY",
			"priority":0,
			"skip":false,
			"toNodeId":"n_kuO0l",
			"type":"next"
		},
		{
			"fromNodeId":"n_kuO0l",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_pZtjO",
			"type":"if"
		},
		{
			"fromNodeId":"n_pZtjO",
			"priority":0,
			"skip":false,
			"toNodeId":"5WW8f",
			"type":"next"
		},
		{
			"fromNodeId":"n_kuO0l",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"5WW8f",
			"type":"next"
		},
		{
			"fromNodeId":"5WW8f",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"klqHO",
			"type":"if"
		},
		{
			"fromNodeId":"klqHO",
			"priority":0,
			"skip":false,
			"toNodeId":"UqZEe",
			"type":"next"
		},
		{
			"fromNodeId":"UqZEe",
			"priority":0,
			"skip":false,
			"toNodeId":"0wKlM",
			"type":"next"
		},
		{
			"fromNodeId":"5WW8f",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_inC8l",
			"type":"next"
		},
		{
			"fromNodeId":"_inC8l",
			"priority":0,
			"skip":false,
			"toNodeId":"_gdVWn",
			"type":"next"
		},
		{
			"fromNodeId":"0wKlM",
			"priority":0,
			"skip":false,
			"toNodeId":"_riX3H",
			"type":"next"
		},
		{
			"fromNodeId":"_gdVWn",
			"priority":0,
			"skip":false,
			"toNodeId":"_riX3H",
			"type":"next"
		},
		{
			"fromNodeId":"_riX3H",
			"priority":0,
			"skip":false,
			"toNodeId":"nJq8F",
			"type":"next"
		},
		{
			"fromNodeId":"nJq8F",
			"priority":0,
			"skip":false,
			"toNodeId":"3RHvi",
			"type":"next"
		},
		{
			"fromNodeId":"3RHvi",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"s2ccP",
			"type":"if"
		},
		{
			"fromNodeId":"3RHvi",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"Ze80q",
			"type":"next"
		},
		{
			"fromNodeId":"s2ccP",
			"priority":0,
			"skip":false,
			"toNodeId":"_GgFEO",
			"type":"next"
		},
		{
			"fromNodeId":"Ze80q",
			"priority":0,
			"skip":false,
			"toNodeId":"_GgFEO",
			"type":"next"
		},
		{
			"fromNodeId":"_GgFEO",
			"priority":0,
			"skip":false,
			"toNodeId":"n_WO2Rx",
			"type":"next"
		},
		{
			"fromNodeId":"n_WO2Rx",
			"priority":0,
			"skip":false,
			"toNodeId":"WHhlx",
			"type":"next"
		},
		{
			"fromNodeId":"WHhlx",
			"priority":0,
			"skip":false,
			"toNodeId":"n_yU53P",
			"type":"next"
		},
		{
			"fromNodeId":"n_yU53P",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"rp0ma",
			"type":"if"
		},
		{
			"fromNodeId":"rp0ma",
			"priority":0,
			"skip":false,
			"toNodeId":"JxHiB",
			"type":"next"
		},
		{
			"fromNodeId":"JxHiB",
			"priority":0,
			"skip":false,
			"toNodeId":"4pZYn",
			"type":"next"
		},
		{
			"fromNodeId":"4pZYn",
			"priority":0,
			"skip":false,
			"toNodeId":"af1tm",
			"type":"next"
		},
		{
			"fromNodeId":"n_yU53P",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"af1tm",
			"type":"next"
		},
		{
			"fromNodeId":"af1tm",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"SgyMl",
			"type":"if"
		},
		{
			"fromNodeId":"SgyMl",
			"priority":0,
			"skip":false,
			"toNodeId":"n_kiqqZ",
			"type":"next"
		},
		{
			"fromNodeId":"n_kiqqZ",
			"priority":0,
			"skip":false,
			"toNodeId":"vHto4",
			"type":"next"
		},
		{
			"fromNodeId":"vHto4",
			"priority":0,
			"skip":false,
			"toNodeId":"_yAylI",
			"type":"next"
		},
		{
			"fromNodeId":"af1tm",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_yAylI",
			"type":"next"
		},
		{
			"fromNodeId":"_yAylI",
			"priority":0,
			"skip":false,
			"toNodeId":"O9a4D",
			"type":"next"
		},
		{
			"fromNodeId":"O9a4D",
			"priority":0,
			"skip":false,
			"toNodeId":"QiKPQ",
			"type":"next"
		},
		{
			"fromNodeId":"QiKPQ",
			"priority":0,
			"skip":false,
			"toNodeId":"pF3Sd",
			"type":"next"
		},
		{
			"fromNodeId":"pF3Sd",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Tcf9E",
			"type":"next"
		},
		{
			"fromNodeId":"n_Tcf9E",
			"priority":0,
			"skip":false,
			"toNodeId":"6P6pn",
			"type":"next"
		},
		{
			"fromNodeId":"6P6pn",
			"priority":0,
			"skip":false,
			"toNodeId":"_v9jpu",
			"type":"next"
		},
		{
			"fromNodeId":"_v9jpu",
			"priority":0,
			"skip":false,
			"toNodeId":"n_NwnE7",
			"type":"next"
		},
		{
			"fromNodeId":"n_NwnE7",
			"priority":0,
			"skip":false,
			"toNodeId":"_0YITF",
			"type":"next"
		},
		{
			"fromNodeId":"_0YITF",
			"priority":0,
			"skip":false,
			"toNodeId":"n_J39Hq",
			"type":"next"
		},
		{
			"fromNodeId":"n_J39Hq",
			"priority":0,
			"skip":false,
			"toNodeId":"_kUEOO",
			"type":"next"
		},
		{
			"fromNodeId":"_kUEOO",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"_rVRqK",
			"type":"if"
		},
		{
			"fromNodeId":"_rVRqK",
			"priority":0,
			"skip":false,
			"toNodeId":"0eoZB",
			"type":"next"
		},
		{
			"fromNodeId":"_kUEOO",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_GVgit",
			"type":"next"
		},
		{
			"fromNodeId":"_GVgit",
			"priority":0,
			"skip":false,
			"toNodeId":"x4Q8x",
			"type":"next"
		},
		{
			"fromNodeId":"0eoZB",
			"priority":0,
			"skip":false,
			"toNodeId":"DnQRn",
			"type":"next"
		},
		{
			"fromNodeId":"x4Q8x",
			"priority":0,
			"skip":false,
			"toNodeId":"DnQRn",
			"type":"next"
		},
		{
			"fromNodeId":"DnQRn",
			"priority":0,
			"skip":false,
			"toNodeId":"mnDjC",
			"type":"next"
		},
		{
			"fromNodeId":"mnDjC",
			"priority":0,
			"skip":false,
			"toNodeId":"y4EAP",
			"type":"next"
		},
		{
			"fromNodeId":"y4EAP",
			"priority":0,
			"skip":false,
			"toNodeId":"jREnR",
			"type":"next"
		},
		{
			"fromNodeId":"jREnR",
			"priority":0,
			"skip":false,
			"toNodeId":"auRVz",
			"type":"next"
		},
		{
			"fromNodeId":"auRVz",
			"priority":0,
			"skip":false,
			"toNodeId":"_UuNZv",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"687b679353822c3037cb9a4d",
	"lastModifiedBy":0,
	"lcName":"executesql, table tool ",
	"modifiedTime":1761722824662,
	"name":"ExecuteSQL, Table Tool ",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":16,
				"resourceName":"callables_from_interface"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"GpPp2",
			"index":1,
			"inputs":{
				"result":{
					"additionalProperties":false,
					"ua:modal":{
						"field_type":"STRING",
						"is_optional":true
					},
					"type":"object",
					"properties":{
						"toolOutput":{
							"type":"string",
							"title":"toolOutput"
						},
						"success":{
							"type":"boolean",
							"title":"Success"
						},
						"error":{
							"type":"string",
							"title":"Error"
						}
					},
					"required":[]
				},
				"callableInterfaceId":"679484ef9c8ab5620dca9609",
				"setup":{
					"additionalProperties":false,
					"ua:modal":{
						"field_type":"STRING",
						"is_optional":true
					},
					"type":"object",
					"properties":{
						"toolId":{
							"type":"string",
							"title":"toolId"
						},
						"toolInputs":{
							"type":"object",
							"title":"toolInputs"
						},
						"triggeredByAgentId":{
							"type":"string",
							"title":"Triggered By Agent Id"
						},
						"agentResponseMessageId":{
							"type":"string",
							"title":"Agent Response Message Id"
						},
						"caseId":{
							"type":"string",
							"title":"Case Id"
						},
						"executeUsingModel":{
							"type":"string",
							"title":"Execute Using Model"
						},
						"toolName":{
							"type":"string",
							"title":"Tool Name"
						},
						"actionId":{
							"type":"string",
							"title":"Action Id"
						},
						"toolAdditional":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Tool Additional"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger interface",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":11,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"Oqpz0",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"sql_query":{
							"type":"string",
							"title":"Sql Query"
						},
						"platformName":{
							"type":"string",
							"title":"Platform Name"
						},
						"metadata":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Metadata"
						},
						"blocks":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Blocks"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"toolInputs":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Tool Inputs"
						},
						"toolAdditional":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Tool Additional"
						}
					}
				},
				"code":"def sql_query = null\ndef platformName = null\ndef metadata = null\ndef blocks = null\n\nif(binding.hasVariable('toolInputs')){\n  sql_query = toolInputs?.sql_query\n  blocks = toolInputs?.toBlocks\n}\nif(binding.hasVariable('toolAdditional')){\n  platformName = toolAdditional?.platformName\n  metadata = toolAdditional?.metadata\n}\nreturn [sql_query: sql_query, platformName: platformName, metadata: metadata, blocks: blocks]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"toolInputs":"{{ GpPp2.outputs.toolInputs }}",
					"toolAdditional":"{{ GpPp2.outputs.toolAdditional }}"
				}
			},
			"skip":false,
			"subTitle":"Get query",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.md.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":184,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"_PMUwM",
			"index":3,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"metadata":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"tableName":{
										"type":"string",
										"title":"Table Name"
									},
									"columns":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{},
											"additionalProperties":false
										},
										"title":"Columns"
									},
									"tableDescription":{
										"type":"string",
										"title":"Table Description"
									},
									"tablePrimaryKey":{
										"type":"string",
										"title":"Table Primary Key"
									},
									"platform_name":{
										"type":"string",
										"title":"Platform Name"
									},
									"tableNameUI":{
										"type":"string",
										"title":"Table Name UI"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"metadata"
						},
						"metadata_reduced":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Metadata Reduced"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"md":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"md"
						}
					}
				},
				"code":"def tableMap = [:]\n\ndef md = binding.hasVariable(\"md\") ? binding.getVariable(\"md\") : []\n\nmd.each { metadataItem ->\n    def tableName = metadataItem['table_name']\n    if (!tableMap.containsKey(tableName)) {\n        tableMap[tableName] = [\n            'columns': [],\n            'tableDescription': metadataItem['tableDescription'],\n            'tablePrimaryKey': metadataItem['tablePrimaryKey'],\n            'platform_name': metadataItem['platform_name'],\n            'tableNameUI': metadataItem['tableNameUI']\n        ]\n    }    \n    def filteredMetadata = [\n        'column_description': metadataItem?.column_description?.replace(\"\\n\", \"<br>\"),\n        'column_name': metadataItem?.column_name,\n        'column_datatype': metadataItem?.column_datatype,\n        'column_label' : metadataItem?.column_label,\n    ]\n    \n    tableMap[tableName]['columns'] << filteredMetadata\n}\n\ndef resultArray = tableMap.collect { tableName, data ->\n    [\n        'tableName': tableName,\n        'columns': data['columns'],\n        'tableDescription': data['tableDescription'],\n        'tablePrimaryKey': data['tablePrimaryKey'],\n        'platform_name': data['platform_name'],\n        'tableNameUI': data['tableNameUI']\n    ]\n}\ndef reducedResultArray = tableMap.collect { tableName, data ->\n    [\n        'tableName': tableName,\n        'columns': data['columns'].collect { col ->\n            [\n                'column_name': col['column_name'],\n                'column_label': col['column_label']\n                // column_description and column_datatype are not included\n            ]\n        },\n        'tableDescription': data['tableDescription'],\n        'tablePrimaryKey': data['tablePrimaryKey'],\n        'platform_name': data['platform_name'],\n        'tableNameUI': data['tableNameUI']\n    ]\n}\n\nreturn [\n    'metadata': resultArray,\n    'metadata_reduced': reducedResultArray\n]\n\n\nreturn ['metadata': resultArray,'metadata_reduced' : reducedResultArray]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"md":{
						"ua:type":"mappedArray",
						"source":"{{ Oqpz0.outputs.result.metadata }}",
						"items":"{{ Oqpz0.outputs.result.metadata[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"convert metadata",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":524,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_LSZUw",
			"index":4,
			"inputs":{
				"automationId":"67a48d37f8f1744841dabb63",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"aiAgentId":"{{ GpPp2.outputs.triggeredByAgentId }}"
				}
			},
			"skip":false,
			"subTitle":"GetAgentCached",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":124,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"fc5LR",
			"index":5,
			"inputs":{
				"automationId":"67c89525ab51f86320c5f5f1",
				"runtimeConnections":{},
				"synchronous":false,
				"version":"-1",
				"parameters":{
					"caseId":"{{ GpPp2.outputs.caseId }}",
					"queries":{
						"items":"{{ Oqpz0.outputs.result.sql_query }}",
						"ua:type":"mappedArray"
					}
				}
			},
			"skip":false,
			"subTitle":"searching",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":317,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"LnUU4",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"limited_sql":{
							"type":"string",
							"title":"limited_sql"
						},
						"userLimits":{
							"type":"boolean",
							"title":"userLimits"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"sql_query":{
							"type":"string",
							"title":"sql_query"
						},
						"max_row_limit":{
							"type":"integer",
							"title":"Max Row Limit"
						}
					}
				},
				"code":"import java.util.regex.Pattern\n\ndef pattern = Pattern.compile(\"\\\\blimit\\\\b\", Pattern.CASE_INSENSITIVE)\ndef matcher = pattern.matcher(sql_query)\ndef userLimits = matcher.find()\n\ndef limit = 50\nif(binding.hasVariable(\"max_row_limit\")){\n    limit = max_row_limit + 5\n}\ndef limit_str = limit.toString()\n\ndef result\nif (userLimits) {\n    result = [\n        limited_sql: (String) sql_query.toString(),\n        userLimits: true\n    ]\n} else {\n    String sql = sql_query.replaceAll(/[ \\t\\n;]+$/, '').toString()\n    result = [\n        limited_sql: (String) \"${sql} LIMIT ${limit_str}\",\n        userLimits: false\n    ]\n}\n\nreturn result",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"sql_query":"{{ Oqpz0.outputs.result.sql_query }}",
					"max_row_limit":"{{ n_LSZUw.outputs.properties.preProcessingSettings.maxRowLimitForSQL }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":238,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"BWDmq",
			"index":7,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"finalSQLquery":{
							"type":"string",
							"title":"finalSQLquery"
						}
					},
					"required":[]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"finalSQLquery":{
							"type":"string",
							"title":"finalSQLquery"
						},
						"_ua_variableDetails":{
							"items":{
								"properties":{
									"name":{
										"type":"string",
										"description":"Name of the variable"
									},
									"dataType":{
										"type":"string",
										"description":"Data type of the variable"
									},
									"description":{
										"type":"string",
										"description":"Description of the variable"
									}
								},
								"type":"object"
							},
							"title":"Variable Details",
							"type":"array"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":16,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"W8L0o",
			"index":8,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"sql_with_limit":{
							"type":"string",
							"title":"sql_with_limit"
						},
						"sql_to_cache":{
							"type":"string",
							"title":"sql_to_cache"
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"sql_to_cache":"{{ Oqpz0.outputs.result.sql_query }}",
				"sql_with_limit":"{{ LnUU4.outputs.result.limited_sql }}"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"sql_with_limit":{
							"type":"string",
							"title":"sql_with_limit"
						},
						"sql_to_cache":{
							"type":"string",
							"title":"sql_to_cache"
						},
						"_ua_variableDetails":{
							"items":{
								"properties":{
									"name":{
										"type":"string",
										"description":"Name of the variable"
									},
									"dataType":{
										"type":"string",
										"description":"Data type of the variable"
									},
									"description":{
										"type":"string",
										"description":"Description of the variable"
									}
								},
								"type":"object"
							},
							"title":"Variable Details",
							"type":"array"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":12,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_V1MYc",
			"index":9,
			"inputs":{
				"automationId":"6805ed8f0b23cb21fda8bb24",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"platformName":"{{ Oqpz0.outputs.result.platformName }}",
					"sqlQuery":"{{ W8L0o.outputs.sql_with_limit }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":12,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_LS81y",
			"index":10,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_V1MYc.outputs.status }}",
						"filter":{
							"operator":"EQUAL",
							"value":"false"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":13,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_LS81y@kFhpo-1@y",
			"id":"n_rohzu",
			"index":11,
			"inputs":{
				"result":{
					"success":false,
					"error":"{{ n_V1MYc.outputs.err_msg }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":316,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"kFhpo-1",
			"id":"o9ReY",
			"index":12,
			"inputs":{
				"automationId":"6805ed8f0b23cb21fda8bb24",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"platformName":"{{ Oqpz0.outputs.result.platformName }}",
					"sqlQuery":"{{ LnUU4.outputs.result.limited_sql }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":true,
			"subTitle":"Run Query On SQL Based Platforms",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":757,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_kuO0l",
			"index":13,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_V1MYc.outputs.rows }}",
						"filter":{
							"operator":"MISSING"
						}
					},
					{
						"property":"=LEN({{ n_V1MYc.outputs.rows }})",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"OR"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":797,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_kuO0l@kFhpo-1@y",
			"id":"n_pZtjO",
			"index":14,
			"inputs":{
				"result":{
					"toolOutput":"The data queried from this SQL query is empty. Try generating a more generic SQL query or clarify/ask the user to rephrase the question asked.",
					"success":true
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":300,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"5WW8f",
			"index":15,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_V1MYc.outputs.err_msg }}",
						"filter":{
							"operator":"MISSING"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":73,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5WW8f@kFhpo-1@y",
			"id":"klqHO",
			"index":16,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"finalCache":{
							"type":"string",
							"title":"finalCache"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"limited":{
							"type":"string",
							"title":"limited"
						},
						"to_cache":{
							"type":"string",
							"title":"to_cache"
						},
						"originalQuery":{
							"type":"string",
							"title":"originalQuery"
						}
					},
					"additionalProperties":false
				},
				"compile_static":false,
				"code":"import java.util.regex.*\n\nboolean userLimits = (originalQuery =~ /(?i)\\blimit\\b/).find()\n\ndef result\nif (userLimits) {\n    result = [finalCache: limited]\n} else {\n    // Remove LIMIT clause `[spaces]limit <something>[spaces][optional offset or end]`\n    def pattern = ~/(?i)\\s*limit\\s+\\S+\\s*(?=offset|\\Z|;)/\n    def sql_no_limit = to_cache.replaceAll(pattern, '').replaceAll(/[\\s;]+$/, '')\n    result = [finalCache: sql_no_limit]\n}\nreturn result",
				"parameters":{
					"to_cache":"{{ W8L0o.outputs.sql_to_cache }}",
					"originalQuery":"{{ Oqpz0.outputs.result.sql_query }}",
					"limited":"{{ W8L0o.outputs.sql_with_limit }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{},
				"visibleOptionalFields":[
					"root.parameters.metadata.items.tableName",
					"root.parameters.metadata.items.platformName",
					"root.parameters.metadata.items.tableNameUI"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":380,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5WW8f@kFhpo-1@y",
			"id":"UqZEe",
			"index":17,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"tableUsed":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"platformName":{
										"type":"string",
										"title":"platformName"
									},
									"tableName":{
										"type":"string",
										"title":"tableName"
									},
									"tableNameUI":{
										"type":"string",
										"title":"tableNameUI"
									}
								},
								"additionalProperties":false
							},
							"title":"tableUsed"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"sql":{
							"type":"string",
							"title":"Sql"
						},
						"metadata":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"tableName":{
										"type":"string",
										"title":"Table Name"
									},
									"platformName":{
										"type":"string",
										"title":"Platform Name"
									},
									"tableNameUI":{
										"type":"string",
										"title":"Table Name UI"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Metadata"
						}
					}
				},
				"code":"def extractTableNamesFromSQL(String sql) {\n    def normSql = sql\n        .replaceAll('\\\\\\\\n', ' ')\n        .replaceAll('\\\\\\\\r', ' ')\n        .replaceAll('\\\\\\\\t', ' ')\n        .replaceAll('\\\\s+', ' ')\n\n    def matcher = (normSql =~ /\\b(FROM|JOIN)\\s+([a-zA-Z0-9_.]+)/)\n    def tableNames = [] as Set\n    matcher.each { tableNames << it[2] }\n    return tableNames ? tableNames as List : []\n}\n\n// Extract table names from SQL\ndef tableList = extractTableNamesFromSQL(sql)\n\n// For each table, just take the *first* matching metadata object\ndef result = tableList.collect { tbl ->\n    metadata.find { it.tableName == tbl }\n}.findAll { it } // In case there are no matches for some table names\n\nreturn [tableUsed: result]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"sql":"{{ W8L0o.outputs.sql_to_cache }}",
					"metadata":{
						"ua:type":"mappedArray",
						"items":{
							"tableName":"{{ _PMUwM.outputs.result.metadata[0].tableName }}",
							"platformName":"{{ _PMUwM.outputs.result.metadata[0].platform_name }}",
							"tableNameUI":"{{ _PMUwM.outputs.result.metadata[0].tableNameUI }}"
						},
						"source":"{{ _PMUwM.outputs.result.metadata }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":236,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5WW8f@kFhpo-1@y",
			"id":"0wKlM",
			"index":18,
			"inputs":{
				"variables":[
					{
						"source":"{{ BWDmq.outputs.finalSQLquery }}",
						"value":"{{ W8L0o.outputs.sql_to_cache }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":16,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5WW8f@kFhpo-1@n",
			"id":"_inC8l",
			"index":19,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"tables_list":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"table":{
										"type":"string",
										"title":"Table"
									},
									"columns":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Columns"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"tables_list"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"sql_query":{
							"type":"string",
							"title":"sql_query"
						}
					}
				},
				"code":"// def sql = binding.hasVariable(\"sql_query\") ? binding.getVariable(\"sql_query\") : \"\"\n\n// def transformedSql = sql\n// def extractPattern = /(?i)EXTRACT\\s*\\([^)]*\\bFROM\\b[^)]*\\)/\n// while (transformedSql =~ extractPattern) {\n//     transformedSql = transformedSql.replaceAll(extractPattern, 'EXTRACT(1234)')\n// }\n\n// // // Step 2: Extract join information\n// // def joinPairs = []\n// // def joinPattern = /(?i)\\b(?:LEFT\\s+)?JOIN\\b\\s+([\\w.]+)(?:\\s+(\\w+))?\\s+ON\\s+([^)]+?)(?=\\s+(?:LEFT\\s+)?JOIN\\b|\\s+WHERE\\b|\\s+GROUP\\b|\\s+ORDER\\b|\\s+HAVING\\b|$)/\n// // def joinMatches = transformedSql =~ joinPattern\n// // while (joinMatches.find()) {\n// //     def rightTable = joinMatches.group(1)\n// //     def rightAlias = joinMatches.group(2)?.trim()\n// //     def onClause = joinMatches.group(3).trim()\n    \n// //     // Extract table references from ON clause\n// //     def onPattern = /(\\w+)\\.(\\w+)\\s*=\\s*(\\w+)\\.(\\w+)/\n// //     def onMatch = onClause =~ onPattern\n// //     if (onMatch.find()) {\n// //         def leftRef = onMatch.group(1)\n// //         def leftCol = onMatch.group(2)\n// //         def rightRef = onMatch.group(3)\n// //         def rightCol = onMatch.group(4)\n// //         joinPairs << [\n// //             leftTableRef: leftRef, \n// //             leftColumn: leftCol,\n// //             rightTableRef: rightRef, \n// //             rightColumn: rightCol, \n// //             rightTable: rightTable, \n// //             rightAlias: rightAlias\n// //         ]\n// //     }\n// // }\n\n// // Step 3: Build table alias map\n// def tableAliasMap = [:] // alias -> tableName\n// def regexFrom = /(?i)\\bFROM\\b\\s+([\\w.]+)(?:\\s+(\\w+))?/\n// def regexJoin = /(?i)\\b(?:LEFT\\s+)?JOIN\\b\\s+([\\w.]+)(?:\\s+(\\w+))?/\n// def columns = []\n\n// // Find main table and its alias\n// def m = (transformedSql =~ regexFrom)\n// if (m.find()) {\n//     def tableName = m.group(1)\n//     def alias = m.group(2)?.trim()\n//     tableAliasMap[(alias ?: tableName)] = tableName\n// }\n\n// // Find join tables and aliases\n// def joins = (transformedSql =~ regexJoin)\n// while (joins.find()) {\n//     def tableName = joins.group(1)\n//     def alias = joins.group(2)?.trim()\n//     tableAliasMap[(alias ?: tableName)] = tableName\n// }\n\n// // Step 4: Extract columns from SELECT clause\n// def selectMatch = (transformedSql =~ /(?i)SELECT\\s+(.*?)\\s+FROM/)\n// def selectPart = selectMatch ? (selectMatch[0][1] ?: '') : ''\n\n// // Handle column extraction more robustly\n// def columnItems = []\n// def depth = 0\n// def currentItem = new StringBuilder()\n\n// // Split by comma but respect parentheses\n// selectPart.each { ch ->\n//     if (ch == '(') depth++\n//     else if (ch == ')') depth--\n    \n//     if (ch == ',' && depth == 0) {\n//         columnItems << currentItem.toString().trim()\n//         currentItem = new StringBuilder()\n//     } else {\n//         currentItem.append(ch)\n//     }\n// }\n// if (currentItem.length() > 0) {\n//     columnItems << currentItem.toString().trim()\n// }\n\n// // Process each column item\n// columnItems.each { item ->\n//     // Remove AS alias\n//     def cleanItem = item.replaceAll(/(?i)\\s+AS\\s+\\w+/, '').trim()\n    \n//     // Check for table.column pattern\n//     def aliasColPattern = /\\b(\\w+)\\.(\\w+)\\b/\n//     def aliasColMatch = cleanItem =~ aliasColPattern\n    \n//     if (aliasColMatch.find()) {\n//         columns << [alias: aliasColMatch.group(1), column: aliasColMatch.group(2)]\n//     }\n//     // Handle * or COUNT(*)\n//     else if (cleanItem == '*' || cleanItem =~ /(?i)COUNT\\s*\\(\\s*\\*\\s*\\)/) {\n//         if (tableAliasMap.size() == 1) {\n//             columns << [alias: null, column: '*', table: tableAliasMap.values().first()]\n//         } else {\n//             columns << [alias: null, column: '*']\n//         }\n//     }\n//     // Handle SUM, AVG, MAX, MIN, COUNT with columns\n//     else if (cleanItem =~ /(?i)(SUM|AVG|MAX|MIN|COUNT)\\s*\\(([^)]+)\\)/) {\n//         def funcMatch = cleanItem =~ /(?i)(SUM|AVG|MAX|MIN|COUNT)\\s*\\(([^)]+)\\)/\n//         if (funcMatch.find()) {\n//             def innerExpr = funcMatch.group(2).trim()\n//             def innerColMatch = innerExpr =~ /\\b(\\w+)\\.(\\w+)\\b/\n//             if (innerColMatch.find()) {\n//                 columns << [alias: innerColMatch.group(1), column: innerColMatch.group(2)]\n//             }\n//         }\n//     }\n//     // Handle simple column names (only if single table)\n//     else if (tableAliasMap.size() == 1 && cleanItem =~ /^\\w+$/) {\n//         columns << [alias: null, column: cleanItem, table: tableAliasMap.values().first()]\n//     }\n// }\n\n// // Step 5: Build the output map\n// def resultMap = [:].withDefault{[]}\n// columns.each { c ->\n//     if (c.table) {\n//         resultMap[c.table] << c.column\n//     } else if (c.alias) {\n//         def table = tableAliasMap[c.alias]\n//         if (table) {\n//             resultMap[table] << c.column\n//         }\n//     } else if (tableAliasMap.size() == 1) {\n//         // No alias and single table: associate to that table\n//         resultMap[tableAliasMap.values().first()] << c.column\n//     }\n// }\n\n// // Remove duplicates\n// resultMap.each { k, v -> resultMap[k] = v.unique() }\n// def tablesList = resultMap.collect { table, cols ->\n//     [ table: table, columns: cols ]\n// }\n\n// // Step 6: Build join information with actual table names\n// // def joinInfo = []\n// // joinPairs.each { jp ->\n// //     def leftTable = tableAliasMap[jp.leftTableRef]\n// //     def rightTable = jp.rightTable\n// //     if (leftTable && rightTable) {\n// //         def leftCol = jp.leftColumn\n// //         def rightCol = jp.rightColumn\n// //         joinInfo << [\n// //             leftTable: leftTable, \n// //             leftColumn: leftCol,\n// //             rightTable: rightTable,\n// //             rightColumn: rightCol\n// //         ]\n// //     }\n// // }\n\n// // return [\n// //     // \"joins\": joinInfo,\n// //     \"tables_list\": resultMap\n// // ]\n\n\n// return [\n//     // \"joins\": joinInfo,\n//     \"tables_list\": tablesList\n// ]\n\ndef sql = binding.hasVariable(\"sql_query\") ? binding.getVariable(\"sql_query\") : \"\"\n\ndef transformedSql = sql\ndef extractPattern = /(?i)EXTRACT\\s*\\([^)]*\\bFROM\\b[^)]*\\)/\nwhile (transformedSql =~ extractPattern) {\n    transformedSql = transformedSql.replaceAll(extractPattern, 'EXTRACT(1234)')\n}\n\n// Step 3: Build table alias map\ndef tableAliasMap = [:] // alias -> tableName\ndef regexFrom = /(?i)\\bFROM\\b\\s+([\\w.]+)(?:\\s+(\\w+))?/\ndef regexJoin = /(?i)\\b(?:LEFT\\s+)?JOIN\\b\\s+([\\w.]+)(?:\\s+(\\w+))?/\ndef columns = []\n\n// Find main table and its alias\ndef m = (transformedSql =~ regexFrom)\nif (m.find()) {\n    def tableName = m.group(1)\n    def alias = m.group(2)?.trim()\n    tableAliasMap[(alias ?: tableName)] = tableName\n}\n\n// Find join tables and aliases\ndef joins = (transformedSql =~ regexJoin)\nwhile (joins.find()) {\n    def tableName = joins.group(1)\n    def alias = joins.group(2)?.trim()\n    tableAliasMap[(alias ?: tableName)] = tableName\n}\n\n// Step 4: Extract columns from SELECT clause\ndef selectMatch = (transformedSql =~ /(?i)SELECT\\s+(.*?)\\s+FROM/)\ndef selectPart = selectMatch ? (selectMatch[0][1] ?: '') : ''\nselectPart = selectPart\n    .replaceFirst(/(?i)^\\s*DISTINCT\\s+ON\\s*\\([^)]*\\)\\s*/, '')\n    .replaceFirst(/(?i)^\\s*(ALL|DISTINCT)\\b\\s*/, '')\n// Handle column extraction more robustly\ndef columnItems = []\ndef depth = 0\ndef currentItem = new StringBuilder()\n\n// Split by comma but respect parentheses\nselectPart.each { ch ->\n    if (ch == '(') depth++\n    else if (ch == ')') depth--\n    \n    if (ch == ',' && depth == 0) {\n        columnItems << currentItem.toString().trim()\n        currentItem = new StringBuilder()\n    } else {\n        currentItem.append(ch)\n    }\n}\nif (currentItem.length() > 0) {\n    columnItems << currentItem.toString().trim()\n}\n\n// Process each column item\ncolumnItems.each { item ->\n    // Remove AS alias\n    def cleanItem = item.replaceAll(/(?i)\\s+AS\\s+\\w+/, '').trim()\n    \n    // Check for table.column pattern\n    def aliasColPattern = /\\b(\\w+)\\.(\\w+)\\b/\n    def aliasColMatch = cleanItem =~ aliasColPattern\n    \n    if (aliasColMatch.find()) {\n        columns << [alias: aliasColMatch.group(1), column: aliasColMatch.group(2)]\n    }\n    // Handle * or COUNT(*)\n    else if (cleanItem == '*' || cleanItem =~ /(?i)COUNT\\s*\\(\\s*\\*\\s*\\)/) {\n        if (tableAliasMap.size() == 1) {\n            columns << [alias: null, column: '*', table: tableAliasMap.values().first()]\n        } else {\n            columns << [alias: null, column: '*']\n        }\n    }\n    // Handle SUM, AVG, MAX, MIN, COUNT with DISTINCT and columns\n    else if (cleanItem =~ /(?i)(SUM|AVG|MAX|MIN|COUNT)\\s*\\(\\s*(DISTINCT\\s+)?([^)]+)\\s*\\)/) {\n        def funcMatch = cleanItem =~ /(?i)(SUM|AVG|MAX|MIN|COUNT)\\s*\\(\\s*(DISTINCT\\s+)?([^)]+)\\s*\\)/\n        if (funcMatch.find()) {\n            def innerExpr = funcMatch.group(3)?.trim()\n            def innerColMatch = innerExpr =~ /\\b(\\w+)\\.(\\w+)\\b/\n            if (innerColMatch.find()) {\n                columns << [alias: innerColMatch.group(1), column: innerColMatch.group(2)]\n            } else if (tableAliasMap.size() == 1 && innerExpr =~ /^\\w+$/) {\n                columns << [alias: null, column: innerExpr, table: tableAliasMap.values().first()]\n            }\n        }\n    }\n    // Handle simple column names (only if single table)\n    else if (tableAliasMap.size() == 1 && cleanItem =~ /^\\w+$/) {\n        columns << [alias: null, column: cleanItem, table: tableAliasMap.values().first()]\n    }\n}\n\n// Step 5: Build the output map\ndef resultMap = [:].withDefault{[]}\ncolumns.each { c ->\n    if (c.table) {\n        resultMap[c.table] << c.column\n    } else if (c.alias) {\n        def table = tableAliasMap[c.alias]\n        if (table) {\n            resultMap[table] << c.column\n        }\n    } else if (tableAliasMap.size() == 1) {\n        // No alias and single table: associate to that table\n        resultMap[tableAliasMap.values().first()] << c.column\n    }\n}\n\n// Remove duplicates\nresultMap.each { k, v -> resultMap[k] = v.unique() }\ndef tablesList = resultMap.collect { table, cols ->\n    [ table: table, columns: cols ]\n}\n\nreturn [\n    \"tables_list\": tablesList\n]\n",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"sql_query":"{{ BWDmq.outputs.finalSQLquery }}"
				}
			},
			"skip":false,
			"subTitle":"extract info",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":17,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5WW8f@kFhpo-1@n",
			"id":"_gdVWn",
			"index":20,
			"inputs":{
				"result":{
					"success":false,
					"error":"{{ n_V1MYc.outputs.err_msg }}. Columns and tables as extracted from the sql formed :{{ _inC8l.outputs.result.tables_list }}; Check if query is made using wrong columns from wrong table, or joins are made b/w wrong tables or join is performed on the wrong attribute. For just once try regeneration of the correct query, correcting the columns/views/joins/tables."
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"additional":{
				"xsdSchemaConfig":{},
				"visibleOptionalFields":[
					"root.parameters.rows.items",
					"root.parameters.cols.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":78,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"_riX3H",
			"index":21,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"rowData":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Row Data"
						},
						"countRows":{
							"type":"integer",
							"title":"countRows"
						},
						"max_limit":{
							"type":"integer",
							"title":"Max Limit"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"rows":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"rows"
						},
						"max_row_limit":{
							"type":"integer",
							"title":"Max Row Limit"
						}
					}
				},
				"code":"def limit = 25\nif (binding.hasVariable(\"max_row_limit\")) {\n    limit = max_row_limit\n}\n\nif (binding.hasVariable(\"rows\")) {\n    return [\n        \"countRows\" : rows.size(),\n        \"rowData\"   : rows.take(limit),\n        \"max_limit\" : limit\n    ]\n} else {\n    return [\n        \"countRows\" : 0,\n        \"rowData\"   : [],\n        \"max_limit\" : limit\n    ]\n}",
				"compile_static":false,
				"isAsync":false,
				"captureStdOutput":false,
				"parameters":{
					"rows":{
						"ua:type":"mappedArray",
						"source":"{{ n_V1MYc.outputs.rows }}",
						"items":"{{ n_V1MYc.outputs.rows[0] }}"
					},
					"max_row_limit":20
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":238,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"nJq8F",
			"index":22,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"hasMoreData":{
							"type":"boolean",
							"title":"hasMoreData"
						}
					},
					"required":[]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"hasMoreData":{
							"type":"boolean",
							"title":"hasMoreData"
						},
						"_ua_variableDetails":{
							"items":{
								"properties":{
									"name":{
										"type":"string",
										"description":"Name of the variable"
									},
									"dataType":{
										"type":"string",
										"description":"Data type of the variable"
									},
									"description":{
										"type":"string",
										"description":"Description of the variable"
									}
								},
								"type":"object"
							},
							"title":"Variable Details",
							"type":"array"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":231,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"3RHvi",
			"index":23,
			"inputs":{
				"filters":[
					{
						"property":"{{ _riX3H.outputs.result.countRows }}",
						"filter":{
							"operator":"LTE",
							"value":"{{ _riX3H.outputs.result.max_limit }}"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":236,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"3RHvi@kFhpo-1@y",
			"id":"s2ccP",
			"index":24,
			"inputs":{
				"variables":[
					{
						"source":"{{ nJq8F.outputs.hasMoreData }}",
						"value":false
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":236,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"3RHvi@kFhpo-1@n",
			"id":"Ze80q",
			"index":25,
			"inputs":{
				"variables":[
					{
						"source":"{{ nJq8F.outputs.hasMoreData }}",
						"value":true
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":16,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"_GgFEO",
			"index":26,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"tables_list":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"table":{
										"type":"string",
										"title":"Table"
									},
									"columns":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Columns"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"tables_list"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"sql_query":{
							"type":"string",
							"title":"sql_query"
						}
					},
					"additionalProperties":false
				},
				"compile_static":false,
				"code":"// def sql = binding.hasVariable(\"sql_query\") ? binding.getVariable(\"sql_query\") : \"\"\n\n// def transformedSql = sql\n// def extractPattern = /(?i)EXTRACT\\s*\\([^)]*\\bFROM\\b[^)]*\\)/\n// while (transformedSql =~ extractPattern) {\n//     transformedSql = transformedSql.replaceAll(extractPattern, 'EXTRACT(1234)')\n// }\n\n// // // Step 2: Extract join information\n// // def joinPairs = []\n// // def joinPattern = /(?i)\\b(?:LEFT\\s+)?JOIN\\b\\s+([\\w.]+)(?:\\s+(\\w+))?\\s+ON\\s+([^)]+?)(?=\\s+(?:LEFT\\s+)?JOIN\\b|\\s+WHERE\\b|\\s+GROUP\\b|\\s+ORDER\\b|\\s+HAVING\\b|$)/\n// // def joinMatches = transformedSql =~ joinPattern\n// // while (joinMatches.find()) {\n// //     def rightTable = joinMatches.group(1)\n// //     def rightAlias = joinMatches.group(2)?.trim()\n// //     def onClause = joinMatches.group(3).trim()\n    \n// //     // Extract table references from ON clause\n// //     def onPattern = /(\\w+)\\.(\\w+)\\s*=\\s*(\\w+)\\.(\\w+)/\n// //     def onMatch = onClause =~ onPattern\n// //     if (onMatch.find()) {\n// //         def leftRef = onMatch.group(1)\n// //         def leftCol = onMatch.group(2)\n// //         def rightRef = onMatch.group(3)\n// //         def rightCol = onMatch.group(4)\n// //         joinPairs << [\n// //             leftTableRef: leftRef, \n// //             leftColumn: leftCol,\n// //             rightTableRef: rightRef, \n// //             rightColumn: rightCol, \n// //             rightTable: rightTable, \n// //             rightAlias: rightAlias\n// //         ]\n// //     }\n// // }\n\n// // Step 3: Build table alias map\n// def tableAliasMap = [:] // alias -> tableName\n// def regexFrom = /(?i)\\bFROM\\b\\s+([\\w.]+)(?:\\s+(\\w+))?/\n// def regexJoin = /(?i)\\b(?:LEFT\\s+)?JOIN\\b\\s+([\\w.]+)(?:\\s+(\\w+))?/\n// def columns = []\n\n// // Find main table and its alias\n// def m = (transformedSql =~ regexFrom)\n// if (m.find()) {\n//     def tableName = m.group(1)\n//     def alias = m.group(2)?.trim()\n//     tableAliasMap[(alias ?: tableName)] = tableName\n// }\n\n// // Find join tables and aliases\n// def joins = (transformedSql =~ regexJoin)\n// while (joins.find()) {\n//     def tableName = joins.group(1)\n//     def alias = joins.group(2)?.trim()\n//     tableAliasMap[(alias ?: tableName)] = tableName\n// }\n\n// // Step 4: Extract columns from SELECT clause\n// def selectMatch = (transformedSql =~ /(?i)SELECT\\s+(.*?)\\s+FROM/)\n// def selectPart = selectMatch ? (selectMatch[0][1] ?: '') : ''\n\n// // Handle column extraction more robustly\n// def columnItems = []\n// def depth = 0\n// def currentItem = new StringBuilder()\n\n// // Split by comma but respect parentheses\n// selectPart.each { ch ->\n//     if (ch == '(') depth++\n//     else if (ch == ')') depth--\n    \n//     if (ch == ',' && depth == 0) {\n//         columnItems << currentItem.toString().trim()\n//         currentItem = new StringBuilder()\n//     } else {\n//         currentItem.append(ch)\n//     }\n// }\n// if (currentItem.length() > 0) {\n//     columnItems << currentItem.toString().trim()\n// }\n\n// // Process each column item\n// columnItems.each { item ->\n//     // Remove AS alias\n//     def cleanItem = item.replaceAll(/(?i)\\s+AS\\s+\\w+/, '').trim()\n    \n//     // Check for table.column pattern\n//     def aliasColPattern = /\\b(\\w+)\\.(\\w+)\\b/\n//     def aliasColMatch = cleanItem =~ aliasColPattern\n    \n//     if (aliasColMatch.find()) {\n//         columns << [alias: aliasColMatch.group(1), column: aliasColMatch.group(2)]\n//     }\n//     // Handle * or COUNT(*)\n//     else if (cleanItem == '*' || cleanItem =~ /(?i)COUNT\\s*\\(\\s*\\*\\s*\\)/) {\n//         if (tableAliasMap.size() == 1) {\n//             columns << [alias: null, column: '*', table: tableAliasMap.values().first()]\n//         } else {\n//             columns << [alias: null, column: '*']\n//         }\n//     }\n//     // Handle SUM, AVG, MAX, MIN, COUNT with columns\n//     else if (cleanItem =~ /(?i)(SUM|AVG|MAX|MIN|COUNT)\\s*\\(([^)]+)\\)/) {\n//         def funcMatch = cleanItem =~ /(?i)(SUM|AVG|MAX|MIN|COUNT)\\s*\\(([^)]+)\\)/\n//         if (funcMatch.find()) {\n//             def innerExpr = funcMatch.group(2).trim()\n//             def innerColMatch = innerExpr =~ /\\b(\\w+)\\.(\\w+)\\b/\n//             if (innerColMatch.find()) {\n//                 columns << [alias: innerColMatch.group(1), column: innerColMatch.group(2)]\n//             }\n//         }\n//     }\n//     // Handle simple column names (only if single table)\n//     else if (tableAliasMap.size() == 1 && cleanItem =~ /^\\w+$/) {\n//         columns << [alias: null, column: cleanItem, table: tableAliasMap.values().first()]\n//     }\n// }\n\n// // Step 5: Build the output map\n// def resultMap = [:].withDefault{[]}\n// columns.each { c ->\n//     if (c.table) {\n//         resultMap[c.table] << c.column\n//     } else if (c.alias) {\n//         def table = tableAliasMap[c.alias]\n//         if (table) {\n//             resultMap[table] << c.column\n//         }\n//     } else if (tableAliasMap.size() == 1) {\n//         // No alias and single table: associate to that table\n//         resultMap[tableAliasMap.values().first()] << c.column\n//     }\n// }\n\n// // Remove duplicates\n// resultMap.each { k, v -> resultMap[k] = v.unique() }\n// def tablesList = resultMap.collect { table, cols ->\n//     [ table: table, columns: cols ]\n// }\n\n// // Step 6: Build join information with actual table names\n// // def joinInfo = []\n// // joinPairs.each { jp ->\n// //     def leftTable = tableAliasMap[jp.leftTableRef]\n// //     def rightTable = jp.rightTable\n// //     if (leftTable && rightTable) {\n// //         def leftCol = jp.leftColumn\n// //         def rightCol = jp.rightColumn\n// //         joinInfo << [\n// //             leftTable: leftTable, \n// //             leftColumn: leftCol,\n// //             rightTable: rightTable,\n// //             rightColumn: rightCol\n// //         ]\n// //     }\n// // }\n\n// // return [\n// //     // \"joins\": joinInfo,\n// //     \"tables_list\": resultMap\n// // ]\n\n\n// return [\n//     // \"joins\": joinInfo,\n//     \"tables_list\": tablesList\n// ]\n\ndef sql = binding.hasVariable(\"sql_query\") ? binding.getVariable(\"sql_query\") : \"\"\n\ndef transformedSql = sql\ndef extractPattern = /(?i)EXTRACT\\s*\\([^)]*\\bFROM\\b[^)]*\\)/\nwhile (transformedSql =~ extractPattern) {\n    transformedSql = transformedSql.replaceAll(extractPattern, 'EXTRACT(1234)')\n}\n\n// Step 3: Build table alias map\ndef tableAliasMap = [:] // alias -> tableName\ndef regexFrom = /(?i)\\bFROM\\b\\s+([\\w.]+)(?:\\s+(\\w+))?/\ndef regexJoin = /(?i)\\b(?:LEFT\\s+)?JOIN\\b\\s+([\\w.]+)(?:\\s+(\\w+))?/\ndef columns = []\n\n// Find main table and its alias\ndef m = (transformedSql =~ regexFrom)\nif (m.find()) {\n    def tableName = m.group(1)\n    def alias = m.group(2)?.trim()\n    tableAliasMap[(alias ?: tableName)] = tableName\n}\n\n// Find join tables and aliases\ndef joins = (transformedSql =~ regexJoin)\nwhile (joins.find()) {\n    def tableName = joins.group(1)\n    def alias = joins.group(2)?.trim()\n    tableAliasMap[(alias ?: tableName)] = tableName\n}\n\n// Step 4: Extract columns from SELECT clause\ndef selectMatch = (transformedSql =~ /(?i)SELECT\\s+(.*?)\\s+FROM/)\ndef selectPart = selectMatch ? (selectMatch[0][1] ?: '') : ''\nselectPart = selectPart\n    .replaceFirst(/(?i)^\\s*DISTINCT\\s+ON\\s*\\([^)]*\\)\\s*/, '')\n    .replaceFirst(/(?i)^\\s*(ALL|DISTINCT)\\b\\s*/, '')\n// Handle column extraction more robustly\ndef columnItems = []\ndef depth = 0\ndef currentItem = new StringBuilder()\n\n// Split by comma but respect parentheses\nselectPart.each { ch ->\n    if (ch == '(') depth++\n    else if (ch == ')') depth--\n    \n    if (ch == ',' && depth == 0) {\n        columnItems << currentItem.toString().trim()\n        currentItem = new StringBuilder()\n    } else {\n        currentItem.append(ch)\n    }\n}\nif (currentItem.length() > 0) {\n    columnItems << currentItem.toString().trim()\n}\n\n// Process each column item\ncolumnItems.each { item ->\n    // Remove AS alias\n    def cleanItem = item.replaceAll(/(?i)\\s+AS\\s+\\w+/, '').trim()\n    \n    // Check for table.column pattern\n    def aliasColPattern = /\\b(\\w+)\\.(\\w+)\\b/\n    def aliasColMatch = cleanItem =~ aliasColPattern\n    \n    if (aliasColMatch.find()) {\n        columns << [alias: aliasColMatch.group(1), column: aliasColMatch.group(2)]\n    }\n    // Handle * or COUNT(*)\n    else if (cleanItem == '*' || cleanItem =~ /(?i)COUNT\\s*\\(\\s*\\*\\s*\\)/) {\n        if (tableAliasMap.size() == 1) {\n            columns << [alias: null, column: '*', table: tableAliasMap.values().first()]\n        } else {\n            columns << [alias: null, column: '*']\n        }\n    }\n    // Handle SUM, AVG, MAX, MIN, COUNT with DISTINCT and columns\n    else if (cleanItem =~ /(?i)(SUM|AVG|MAX|MIN|COUNT)\\s*\\(\\s*(DISTINCT\\s+)?([^)]+)\\s*\\)/) {\n        def funcMatch = cleanItem =~ /(?i)(SUM|AVG|MAX|MIN|COUNT)\\s*\\(\\s*(DISTINCT\\s+)?([^)]+)\\s*\\)/\n        if (funcMatch.find()) {\n            def innerExpr = funcMatch.group(3)?.trim()\n            def innerColMatch = innerExpr =~ /\\b(\\w+)\\.(\\w+)\\b/\n            if (innerColMatch.find()) {\n                columns << [alias: innerColMatch.group(1), column: innerColMatch.group(2)]\n            } else if (tableAliasMap.size() == 1 && innerExpr =~ /^\\w+$/) {\n                columns << [alias: null, column: innerExpr, table: tableAliasMap.values().first()]\n            }\n        }\n    }\n    // Handle simple column names (only if single table)\n    else if (tableAliasMap.size() == 1 && cleanItem =~ /^\\w+$/) {\n        columns << [alias: null, column: cleanItem, table: tableAliasMap.values().first()]\n    }\n}\n\n// Step 5: Build the output map\ndef resultMap = [:].withDefault{[]}\ncolumns.each { c ->\n    if (c.table) {\n        resultMap[c.table] << c.column\n    } else if (c.alias) {\n        def table = tableAliasMap[c.alias]\n        if (table) {\n            resultMap[table] << c.column\n        }\n    } else if (tableAliasMap.size() == 1) {\n        // No alias and single table: associate to that table\n        resultMap[tableAliasMap.values().first()] << c.column\n    }\n}\n\n// Remove duplicates\nresultMap.each { k, v -> resultMap[k] = v.unique() }\ndef tablesList = resultMap.collect { table, cols ->\n    [ table: table, columns: cols ]\n}\n\nreturn [\n    \"tables_list\": tablesList\n]\n",
				"parameters":{
					"sql_query":"{{ BWDmq.outputs.finalSQLquery }}"
				}
			},
			"skip":false,
			"subTitle":"extract info",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.inputList.items",
					"root.parameters.metadataList.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_WO2Rx",
			"index":27,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"result":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Result"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"inputList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Input List"
						},
						"metadataList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Metadata List"
						}
					}
				},
				"code":"def res = []\nif(!binding.hasVariable('inputList')) inputList = []\ninputList.each { input ->\n    def tableName = input.table\n    def usedColumns = input.columns\n\n    usedColumns.each { col ->\n        def colMeta = metadataList.find { \n            it.table_name == tableName && it.column_name == col \n        }\n        if (colMeta) {\n            res << [\n                \"column_description\": colMeta.column_description,\n                \"column_label\": colMeta.column_label,\n                \"column_name\": colMeta.column_name,\n                \"knowledgeId\": colMeta.knowledgeId,\n                \"platform_name\": colMeta.platform_name,\n                \"tableDescription\": colMeta.tableDescription,\n                \"tableNameUI\": colMeta.tableNameUI,\n                \"table_name\": colMeta.table_name\n            ]\n        }\n    }\n}\n\nreturn [result: res]\n",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"inputList":{
						"source":"{{ _GgFEO.outputs.result.tables_list }}",
						"ua:type":"mappedArray",
						"items":"{{ _GgFEO.outputs.result.tables_list[0] }}"
					},
					"metadataList":{
						"source":"{{ Oqpz0.outputs.result.metadata }}",
						"ua:type":"mappedArray",
						"items":"{{ Oqpz0.outputs.result.metadata[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.updateFields.items.fieldName",
					"root.updateFields.items.actionType"
				]
			},
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":316,
				"resourceName":"storage_by_unifyapps_update_record_fields_by_id",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"WHhlx",
			"index":28,
			"inputs":{
				"recordId":"{{ GpPp2.outputs.agentResponseMessageId }}",
				"writeThroughSessionVariables":true,
				"object_type":"service_hub_message",
				"skipPermissionCheck":false,
				"updateFields":[
					{
						"fieldName":"properties.additional.IsDataRAGExecuted",
						"actionType":"SET",
						"setValue":"True"
					},
					{
						"fieldName":"properties.additional.sqlQuery",
						"actionType":"SET",
						"setValue":"{{ BWDmq.outputs.finalSQLquery }}"
					},
					{
						"fieldName":"properties.additional.hasMoreData",
						"actionType":"SET",
						"setValue":"{{ nJq8F.outputs.hasMoreData }}"
					},
					{
						"fieldName":"properties.additional.usedMetadata",
						"actionType":"SET",
						"setValue":"{{ n_WO2Rx.outputs.result.result }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Update an existing record's fields",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":444,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_yU53P",
			"index":29,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_LSZUw.outputs.properties.textToSQLSettings.sourcesNeeded }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.metadata.items.table_name",
					"root.parameters.metadata.items.platform_name",
					"root.parameters.metadata.items.tableNameUI"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":170,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_yU53P@kFhpo-1@y",
			"id":"rp0ma",
			"index":30,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"chunks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Chunks"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"metadata":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"table_name":{
										"type":"string",
										"title":"table_name"
									},
									"platform_name":{
										"type":"string",
										"title":"platform_name"
									},
									"tableNameUI":{
										"type":"string",
										"title":"Table Name UI"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"metadata"
						}
					}
				},
				"code":"def extractBeforeLastUnderscore = { String str ->\n    if(str == \"storage_by_unifyapps\"){\n      return str\n    }\n    int lastUnderscoreIndex = str.lastIndexOf('_')\n    if (lastUnderscoreIndex != -1) {\n        return str.substring(0, lastUnderscoreIndex)\n    } else {\n        return str // Return original string if no underscore is found\n    }\n}\nif(!binding.hasVariable('metadata')) return ['chunks' : []]\ndef chunks = metadata\n    .unique { a, b -> a.table_name <=> b.table_name ?: a.platform_name <=> b.platform_name }\n    .collect { [ name: it.tableNameUI == null ? it.table_name: it.tableNameUI, appName: extractBeforeLastUnderscore(it.platform_name) ] }\n\nreturn [\"chunks\":chunks]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"metadata":{
						"ua:type":"mappedArray",
						"items":{
							"table_name":"{{ UqZEe.outputs.result.tableUsed[0].tableName }}",
							"platform_name":"{{ UqZEe.outputs.result.tableUsed[0].platformName }}",
							"tableNameUI":"{{ UqZEe.outputs.result.tableUsed[0].tableNameUI }}"
						},
						"source":"{{ UqZEe.outputs.result.tableUsed }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":180,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_yU53P@kFhpo-1@y",
			"id":"JxHiB",
			"index":31,
			"inputs":{
				"automationId":"67ed33625e47b355f5f93529",
				"runtimeConnections":{},
				"synchronous":false,
				"version":"-1",
				"parameters":{
					"chunks":{
						"ua:type":"mappedArray",
						"source":"{{ rp0ma.outputs.result.chunks }}",
						"items":"{{ rp0ma.outputs.result.chunks[0] }}"
					},
					"aiAgentId":"{{ GpPp2.outputs.triggeredByAgentId }}",
					"caseId":"{{ GpPp2.outputs.caseId }}"
				}
			},
			"skip":false,
			"subTitle":"publish Reading block",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":474,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_yU53P@kFhpo-1@y",
			"id":"4pZYn",
			"index":32,
			"inputs":{
				"automationId":"67cc3ab09c3ab54c438320aa",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"aiAgentId":"{{ GpPp2.outputs.triggeredByAgentId }}",
					"chunks":{
						"ua:type":"mappedArray",
						"source":"{{ rp0ma.outputs.result.chunks }}",
						"items":"{{ rp0ma.outputs.result.chunks[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Add Sources ",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":71,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"af1tm",
			"index":33,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_V1MYc.outputs.columnNames }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":72,
				"resourceName":"utility_by_unifyapps_sequence_generator",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"af1tm@kFhpo-1@y",
			"id":"SgyMl",
			"index":34,
			"inputs":{
				"sequenceName":"{{ GpPp2.outputs.caseId }}_ChunkNumber"
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Sequence Generator",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.cols.items",
					"root.parameters.rows.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":69,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"af1tm@kFhpo-1@y",
			"id":"n_kiqqZ",
			"index":35,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"colData":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"colData"
						},
						"rowData":{
							"type":"array",
							"items":{
								"type":"object"
							},
							"title":"rowData"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"cols":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Cols"
						},
						"rows":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Rows"
						}
					}
				},
				"code":"def cleanKey = { key ->\n    key.replaceAll(/[^A-Za-z0-9_]/, '')\n}\ncolumnData = cols.collect { cleanKey(it) }\n\nrowData = rows.collect { row ->\n    def newRow = [:]\n    row.each { k, v ->\n        newRow[cleanKey(k)] = v\n    }\n    newRow\n}\n\nreturn [\"colData\" : columnData, \"rowData\" : rowData]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"cols":{
						"ua:type":"mappedArray",
						"source":"{{ n_V1MYc.outputs.columnNames }}",
						"items":"{{ n_V1MYc.outputs.columnNames[0] }}"
					},
					"rows":{
						"ua:type":"mappedArray",
						"source":"{{ n_V1MYc.outputs.rows }}",
						"items":"{{ n_V1MYc.outputs.rows[0] }}"
					}
				}
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"SpecialCharacterHandling",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.record.columnData.items",
					"root.record.rowData.items"
				]
			},
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":72,
				"resourceName":"storage_by_unifyapps_create_record",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"af1tm@kFhpo-1@y",
			"id":"vHto4",
			"index":36,
			"inputs":{
				"writeThroughSessionVariables":false,
				"object_type":"citation_store",
				"skipIfBlank":false,
				"record":{
					"caseId":"{{ GpPp2.outputs.caseId }}",
					"chunkNumber":"{{ SgyMl.outputs.result }}",
					"sqlQuery":"{{ BWDmq.outputs.finalSQLquery }}",
					"hasMoreData":"{{ nJq8F.outputs.hasMoreData }}",
					"sqlQueryPlatformName":"{{ Oqpz0.outputs.result.platformName }}",
					"tableIsPublished":false,
					"columnData":{
						"ua:type":"mappedArray",
						"source":"{{ n_kiqqZ.outputs.result.colData }}",
						"items":"{{ n_kiqqZ.outputs.result.colData[0] }}"
					},
					"rowData":{
						"ua:type":"mappedArray",
						"source":"{{ n_kiqqZ.outputs.result.rowData }}",
						"items":"{{ n_kiqqZ.outputs.result.rowData[0] }}"
					},
					"metadata":"{{ rp0ma.outputs.result.chunks[0] }}"
				}
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Create record",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.relevantContent.items",
					"root.parameters.columnData.items",
					"root.parameters.rowData.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":17,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"_yAylI",
			"index":37,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"finalOutput":{
							"type":"string",
							"title":"Final Output"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"columnData":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Column Data"
						},
						"rowData":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Row Data"
						},
						"chartId":{
							"type":"integer",
							"title":"Chart Id"
						},
						"hasMoreData":{
							"type":"boolean",
							"title":"Has More Data"
						}
					}
				},
				"code":"// List<Map<String, Object>> chunkMetadataArray = []\n\nif(!binding.hasVariable(\"columnData\") || !binding.hasVariable(\"rowData\")) return [\"finalOutput\" : \"\"]\ndef columns = (List<String>) binding.getProperty(\"columnData\")\ndef rows = (List<Map<String, Object>>) binding.getProperty(\"rowData\") \n\n// def markdown = []\ndef markdown = ''\nmarkdown += \"#### SQL Output <chartId=\\\"\" + binding.getProperty(\"chartId\") + \"\\\">\\n####\\n\"\nmarkdown += \"<data>\\n\"\nmarkdown += '| ' + columns.collect { it.toString() }.join(' | ') + ' |\\n'\nmarkdown += '| ' + columns.collect { '---' }.join(' | ') + ' |\\n'\nrows.each { row ->\n    Map mapRow = row as Map\n    markdown += '| ' + columns.collect { mapRow.containsKey(it) ? mapRow[it] : '' }.join(' | ') + ' |\\n'\n}\nmarkdown += \"</data>\\n\\n\"\n\n// markdown += \"If this data seems relevant to what user has asked, user has explicitly asked for a table/chart/tabular representation/visual representation for this and the data is plottable and sending charts or tables is relevant for this query, then [IMPORTANT] make a tool call to \\\"GenerateChartWithBlocks\\\" with appropriate chartId and do not mention the table in markdown format in the final answer.\"\n// if (binding.getProperty(\"hasMoreData\")) {\n//     markdown += \"This sql output only contains a limited (truncated) number of rows and does not represent the full data. DO NOT make any conclusions or statements about the total count, minimum, maximum, or other aggregate statistics based solely on this sample as it is a truncated form of data. DO NOT pass any such conclusions based solely on the truncated data in the FINAL ANSWER.\"\n// }\n// if (binding.getProperty(\"hasMoreData\")) {\n//         markdown += \"This sql output only contains a limited (truncated) number of rows and does not represent the full data. DO NOT make any conclusions or statements about the total count, minimum, maximum, or other aggregate statistics based solely on this sample as it is a truncated form of data. DO NOT pass any such conclusions based solely on the truncated data in the FINAL ANSWER. [STRICTLY] If the data is plottable or the user asks for visualization, make a tool call to \\\"GenerateChartWithBlocks\\\" with the given chartId and \\\"blockType\\\": \\\"Table\\\". If user asks explicitly about some other visual representation than table, then, politely deny by stating that chart can not be published due to \"\n//     }\n//     else{\n//         markdown += \"If the user asks for a table, chart, or visualization, ONLY make a tool call to \\\"GenerateChartWithBlocks\\\" with the given chartId;  If this data seems relevant to what user has asked and the data is plottable and sending charts/tables is relevant for this query, then make a tool call to \\\"GenerateChartWithBlocks\\\" with appropriate chartId.\"\n//     }\n\nif (binding.getProperty(\"hasMoreData\")) {\n    markdown += \"\"\"Note: This SQL output contains only a limited (truncated) number of rows and does not represent the complete dataset. - Do NOT draw aggregate or conclusions from this data. - [VERY IMPORTANT] If the user requests a chart, table, or data visualization, STRICTLY make a tool call to \\\"GenerateChartWithBlocks\\\" with the given chartId and \\\"blockType\": \"Table\\\". - If the user explicitly asks for a non-table visual representation, politely inform them that the chart type requested cannot be published. And just make a tool call to GenerateChartWithBlocks with TABLE as blockType.\"\"\"\n} \n// else {\n//     markdown += \"\"\" If the data is plottable or user requests a table, chart, or visualization, ONLY make a tool call to \\\"GenerateChartWithBlocks\\\" with the given chartId.\"\"\"\n// }\n\nreturn [\n    \"finalOutput\" : (markdown == null || markdown.trim().isEmpty()) ? null : markdown.trim()\n]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"columnData":{
						"source":"{{ n_V1MYc.outputs.columnNames }}",
						"ua:type":"mappedArray",
						"items":"{{ n_V1MYc.outputs.columnNames[0] }}"
					},
					"rowData":{
						"source":"{{ n_V1MYc.outputs.rows }}",
						"ua:type":"mappedArray",
						"items":"{{ n_V1MYc.outputs.rows[0] }}"
					},
					"chartId":"{{ SgyMl.outputs.result }}",
					"hasMoreData":"{{ nJq8F.outputs.hasMoreData }}"
				}
			},
			"skip":false,
			"subTitle":"prepareOutput",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":11,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"O9a4D",
			"index":38,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"$comment":"resultPublish",
					"required":[],
					"properties":{
						"result":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"yAxisLabel":{
										"type":"string",
										"title":"yAxisLabel"
									},
									"data":{
										"type":"object",
										"properties":{
											"text":{
												"type":"string",
												"title":"text"
											}
										},
										"title":"data",
										"additionalProperties":false
									},
									"columns":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"label":{
													"type":"string",
													"title":"label"
												},
												"type":{
													"type":"string",
													"title":"type"
												},
												"value":{
													"type":"string",
													"title":"value"
												},
												"currencyCode":{
													"type":"string",
													"title":"currencyCode"
												}
											},
											"additionalProperties":false
										},
										"title":"columns"
									},
									"series":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"label":{
													"type":"string",
													"title":"label"
												},
												"key":{
													"type":"string",
													"title":"key"
												}
											},
											"additionalProperties":false
										},
										"title":"series"
									},
									"blockType":{
										"type":"string",
										"title":"blockType"
									},
									"xAxisValue":{
										"type":"string",
										"title":"xAxisValue"
									},
									"chartType":{
										"type":"string",
										"title":"chartType"
									},
									"xAxisLabel":{
										"type":"string",
										"title":"xAxisLabel"
									},
									"groupBy":{
										"type":"string",
										"title":"groupBy"
									},
									"yAxisRightLabel":{
										"type":"string",
										"title":"yAxisRightLabel"
									},
									"yAxis":{
										"type":"object",
										"properties":{
											"series":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"key":{
															"type":"string",
															"title":"key"
														},
														"label":{
															"type":"string",
															"title":"label"
														}
													},
													"additionalProperties":false
												},
												"title":"series"
											}
										},
										"title":"yAxis",
										"additionalProperties":false
									},
									"yAxisRight":{
										"type":"object",
										"properties":{
											"series":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"key":{
															"type":"string",
															"title":"key"
														},
														"label":{
															"type":"string",
															"title":"label"
														}
													},
													"additionalProperties":false
												},
												"title":"series"
											}
										},
										"title":"yAxisRight",
										"additionalProperties":false
									},
									"title":{
										"type":"string",
										"title":"title"
									}
								},
								"additionalProperties":false
							},
							"title":"result"
						},
						"chartType":{
							"type":"string",
							"title":"Chart Type"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"toolInputs"
					],
					"properties":{
						"toolInputs":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Tool Inputs"
						}
					}
				},
				"code":"// def toLowerCaseMapKeys(obj) {\n//     if (obj instanceof Map) {\n//         obj.collectEntries { k, v -> [(k.toString().toLowerCase()): toLowerCaseMapKeys(v)] }\n//     } else if (obj instanceof Collection) {\n//         obj.collect { toLowerCaseMapKeys(it) }\n//     } else {\n//         obj\n//     }\n// }\n\nif (!binding.hasVariable('toolInputs')) {\n    return [:]\n}\nif (toolInputs.toBlocks) {\n    def resultMap = [\"result\": [toolInputs.toBlocks], \"chartType\": toolInputs.toBlocks.chartType ?: \"\"]\n    return resultMap // toLowerCaseMapKeys(resultMap)\n}\nreturn toLowerCaseMapKeys(toolInputs)",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"toolInputs":"{{ GpPp2.outputs.toolInputs }}"
				}
			},
			"skip":false,
			"subTitle":"chartId",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":11,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"QiKPQ",
			"index":39,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"outputMsgId":{
							"type":"string",
							"title":"outputMsgId"
						},
						"chartType":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Chart Type"
						}
					},
					"required":[]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"outputMsgId":{
							"type":"string",
							"title":"outputMsgId"
						},
						"chartType":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Chart Type"
						},
						"_ua_variableDetails":{
							"items":{
								"properties":{
									"name":{
										"type":"string",
										"description":"Name of the variable"
									},
									"dataType":{
										"type":"string",
										"description":"Data type of the variable"
									},
									"description":{
										"type":"string",
										"description":"Description of the variable"
									}
								},
								"type":"object"
							},
							"title":"Variable Details",
							"type":"array"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.ChartType.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":349,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"pF3Sd",
			"index":40,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"chartType":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Chart Type"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"hasMoreData":{
							"type":"boolean",
							"title":"Has More Data"
						},
						"chartType":{
							"type":"string",
							"title":"chartType"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"// if (!binding.hasVariable('chartType')) {\n//     if(!binding.hasVariable('hasMoreData'))\n//         return [\"chartType\" : null]\n\n//     if (hasMoreData)\n//         return [\"chartType\" : [\"TABLE\"]]\n//     else\n//         return [\"chartType\" : null]\n// }\n\n// def allowedChartTypes = [\"TABLE\", \"LINE\", \"BAR\", \"COLUMN\", \"PIE\", \"DUAL_AXES\"]\n\n// def originalChartType = chartType as List  // Make a copy for eviction check\n\n// // Filter chartType for allowed types only:\n// chartType = chartType.findAll { it in allowedChartTypes }\n\n// // If any types were evicted (i.e., sizes aren't same)\n// if (chartType.size() != originalChartType.size()) {\n//     if (!chartType.contains('Table')) {\n//         chartType << 'Table'\n//     }\n// }\n\n// // Proceed with your regular logic\n// if(!binding.hasVariable('hasMoreData'))\n//     return [\"chartType\" : chartType]\n\n// if (hasMoreData) {\n//     if (!chartType.contains('Table')) {\n//         chartType << 'Table'\n//     }\n// }\n// return [\"chartType\" : chartType]\n\nif (!binding.hasVariable('chartType')) {\n    if (!binding.hasVariable('hasMoreData'))\n        return [\"chartType\": null]\n\n    if (hasMoreData)\n        return [\"chartType\": [\"TABLE\"]]\n    else\n        return [\"chartType\": null]\n}\nif (hasMoreData)\n    return [\"chartType\": [\"TABLE\"]]\n    \ndef allowedChartTypes = [\"TABLE\", \"LINE\", \"BAR\", \"COLUMN\", \"PIE\", \"DUAL_AXES\"]\n\n// chartType is a String input\ndef ctype = chartType?.toUpperCase()?.trim()\n\ndef chartTypeList = []\nif (ctype in allowedChartTypes) {\n    chartTypeList << ctype\n}\n\n// If input ctype is not valid, fallback/add \"TABLE\"\nif (chartTypeList.isEmpty()) {\n    chartTypeList << \"TABLE\"\n}\n\n// If hasMoreData is not present, just return the (possibly fixed) chartType\nif (!binding.hasVariable('hasMoreData'))\n    return [\"chartType\": chartTypeList]\n\n// If hasMoreData is true, TABLE must be present\nif (hasMoreData && !chartTypeList.contains(\"TABLE\")) {\n    chartTypeList << \"TABLE\"\n}\n\nreturn [\"chartType\": chartTypeList]",
				"parameters":{
					"chartType":"{{ O9a4D.outputs.result.chartType }}",
					"hasMoreData":"{{ nJq8F.outputs.hasMoreData }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":446,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_Tcf9E",
			"index":41,
			"inputs":{
				"variables":[
					{
						"source":"{{ QiKPQ.outputs.chartType }}",
						"value":{
							"source":"{{ pF3Sd.outputs.result.chartType }}",
							"ua:type":"mappedArray",
							"items":"{{ pF3Sd.outputs.result.chartType[0] }}"
						}
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":66,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"6P6pn",
			"index":42,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"out":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"out"
						},
						"isNeg":{
							"type":"boolean",
							"title":"Is Neg"
						},
						"columnsInString":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Columns In String"
						},
						"allInString":{
							"type":"boolean",
							"title":"All In String"
						}
					},
					"additionalProperties":false,
					"required":[
						"out"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"rows":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Rows"
						},
						"columnNames":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Column Names"
						}
					},
					"additionalProperties":false,
					"required":[
						"rows",
						"columnNames"
					]
				},
				"compile_static":false,
				"code":"\nif (!binding.hasVariable('rows') || rows.size() == 0) return [\"out\": [], \"isNegative\": false]\n\ndef sql_output = []\ndef stringsinCol = []\nrows.each { row ->\n    columnNames.each { col ->\n        if (!row.containsKey(col)) {\n            row[col] = \"null\"\n        }\n    }\n    sql_output << row\n}\n\ndef datePattern = ~/^\\d{4}-\\d{2}-\\d{2}$/\ndef typeMap = [\n    (String): \"STRING\",\n    (Integer): \"INTEGER\",\n    (Long): \"INTEGER\",\n    (Float): \"FLOAT\",\n    (Double): \"FLOAT\",\n    (BigDecimal): \"FLOAT\",\n    (Boolean): \"BOOLEAN\",\n    (Date): \"DATETYPE\",\n    (java.sql.Date): \"DATETYPE\"\n]\n\n// Gather column values by column\ndef columnValues = [:].withDefault{ [] }\nsql_output.each { row ->\n    columnNames.each { col ->\n        columnValues[col] << row[col]\n    }\n}\n\ndef schemaRec = [:]\ndef isNegative = false // <-- This will become true if any min < 0\ndef allStringCols = true\nif (sql_output) {\n    def firstRec = sql_output[0]\n    schemaRec = firstRec.collectEntries { k, v ->\n        def t = v?.getClass()\n        if (t == String) {\n            stringsinCol << k\n        }\n        if(t!=String) allStringCols=false\n\n        def mapped = (t == String && v ==~ datePattern) ? \"DATETYPE\" : typeMap.get(t)\n        if (mapped == null) mapped = t?.simpleName ?: \"UNKNOWN\"\n        if (mapped in [\"INTEGER\", \"FLOAT\"]) {\n            def vals = columnValues[k].collect {\n                if (it instanceof Number) return it\n                try { return it != null ? new BigDecimal(it.toString()) : null } catch(e) { return null }\n            }.findAll { it != null }\n            def minVal = vals && !vals.isEmpty() ? vals.min() : null\n            def maxVal = vals && !vals.isEmpty() ? vals.max() : null\n\n            // Check if any min is negative\n            if (minVal != null && minVal < 0) {\n                isNegative = true\n            }\n            [(k): [type: mapped, min: minVal, max: maxVal]]\n        } else {\n            [(k): [type: mapped, min: null, max: null]]\n        }\n    }\n}\n\nreturn [\"out\": (schemaRec ? [schemaRec] : []), \"isNegative\": isNegative, \"columnsInString\" : stringsinCol, \"allInString\" : allStringCols]\n\n",
				"parameters":{
					"rows":{
						"ua:type":"mappedArray",
						"source":"{{ n_V1MYc.outputs.rows }}",
						"items":"{{ n_V1MYc.outputs.rows[0] }}"
					},
					"columnNames":{
						"ua:type":"mappedArray",
						"source":"{{ n_V1MYc.outputs.columnNames }}",
						"items":"{{ n_V1MYc.outputs.columnNames[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.sql_ui.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":43,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"_v9jpu",
			"index":43,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"is_object_present":{
							"type":"boolean",
							"title":"Is Object Present"
						},
						"sql_output":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Sql Output"
						},
						"rows_or_columns_greater_10":{
							"type":"boolean",
							"title":"Num Rows or Columns Greater 10"
						},
						"num_rows":{
							"type":"integer",
							"title":"num_rows"
						}
					},
					"additionalProperties":false,
					"required":[
						"is_object_present",
						"sql_output",
						"num_rows"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"rows":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Rows"
						},
						"columnNames":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Column Names"
						},
						"sql_ui":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Sql Ui"
						}
					},
					"additionalProperties":false,
					"required":[
						"rows",
						"columnNames"
					]
				},
				"compile_static":false,
				"code":"// if (!binding.hasVariable('rows') || rows.size() == 0) {\n//     return [\"is_object_present\": false, \"columns_greater_10\": false, \"sql_output\": [], \"sql_output_ui\": [], \"num_rows\": 0]\n// }\n// try {\n//     def sql_output = []\n//     rows.each { row ->\n//         // if (row.columns.size() != 0) {\n//         columnNames.each { col ->\n//             if (!row.containsKey(col)) {\n//                 row[col] = \"null\"\n//             }\n//         }\n//         sql_output << row\n//         // }        \n//     }\n//     if (sql_output.size() == 0) {\n//         return [\"is_object_present\": false, \"columns_greater_10\": false, \"sql_output\": sql_output, \"sql_output_ui\": sql_ui, \"num_rows\": rows.size()]\n//     }\n//     if (sql_output[0].size() >= 10){\n//         return [\"is_object_present\": true, \"columns_greater_10\": true, \"sql_output\": sql_output, \"sql_output_ui\": sql_ui, \"num_rows\": rows.size()]\n//     }\n//     if (sql_output.size() <= 2) {\n//         return [\"is_object_present\": true, \"columns_greater_10\": false, \"sql_output\": sql_output, \"sql_output_ui\": sql_ui, \"num_rows\": rows.size()]\n//     }\n//     return [\"is_object_present\": true, \"columns_greater_10\": false, \"sql_output\": sql_output, \"sql_output_ui\": sql_ui, \"num_rows\": rows.size()]\n// } catch (Exception e) {\n//     return [\"is_object_present\": false, \"columns_greater_10\": false, \"sql_output\": [], \"sql_output_ui\": [], \"num_rows\": rows?.size() ?: 0]\n// }\n\nif (!binding.hasVariable('rows') || rows.size() == 0) {\n    return [\"is_object_present\": false, \"columns_greater_10\": false, \"sql_output\": [], \"num_rows\": 0]\n}\ntry {\n    def sql_output = []\n    rows.each { row ->\n        columnNames.each { col ->\n            if (!row.containsKey(col) || row[col] == \"null\") {\n                def typeInfo = sql_ui[col][\"type\"]\n                def defaultValue\n                switch(typeInfo) {\n                    case \"INTEGER\":\n                        defaultValue = 0\n                        break\n                    case \"FLOAT\":\n                        defaultValue = 0.0\n                        break\n                    case \"STRING\":\n                        defaultValue = \"\"\n                        break\n                    case \"BOOLEAN\":\n                        defaultValue = false\n                        break\n                    case \"DATETYPE\":\n                    case \"DATE\": // just in case\n                        defaultValue = null\n                        break\n                    default:\n                        defaultValue = null\n                }\n                row[col] = defaultValue\n            }\n        }\n        sql_output << row\n    }\n    if (sql_output.size() == 0) {\n        return [\"is_object_present\": false, \"columns_greater_10\": false, \"sql_output\": sql_output, \"num_rows\": rows.size()]\n    }\n    if (sql_output[0].size() >= 20){\n        return [\"is_object_present\": true, \"columns_greater_10\": true, \"sql_output\": sql_output, \"num_rows\": rows.size()]\n    }\n    if (sql_output.size() <= 2) {\n        return [\"is_object_present\": true, \"columns_greater_10\": false, \"sql_output\": sql_output,  \"num_rows\": rows.size()]\n    }\n    return [\"is_object_present\": true, \"columns_greater_10\": false, \"sql_output\": sql_output, \"num_rows\": rows.size()]\n} catch (Exception e) {\n    return [\"is_object_present\": false, \"columns_greater_10\": false, \"sql_output\": [],  \"num_rows\": rows?.size() ?: 0]\n}",
				"isAsync":false,
				"parameters":{
					"columnNames":{
						"ua:type":"mappedArray",
						"source":"{{ n_V1MYc.outputs.columnNames }}",
						"items":"{{ n_V1MYc.outputs.columnNames[0] }}"
					},
					"rows":{
						"ua:type":"mappedArray",
						"source":"{{ n_V1MYc.outputs.rows }}",
						"items":"{{ n_V1MYc.outputs.rows[0] }}"
					},
					"sql_ui":{
						"source":"{{ 6P6pn.outputs.result.out }}",
						"ua:type":"mappedArray",
						"items":"{{ 6P6pn.outputs.result.out[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code By UnifyApps",
			"title":"Execute groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.result.results.source",
					"root.parameters.result.results.ua:type",
					"root.parameters.result.results.items.yAxisLabel",
					"root.parameters.result.results.items.data.text",
					"root.parameters.result.results.items.columns.source",
					"root.parameters.result.results.items.columns.ua:type",
					"root.parameters.result.results.items.columns.items.label",
					"root.parameters.result.results.items.columns.items.type",
					"root.parameters.result.results.items.columns.items.value",
					"root.parameters.result.results.items.columns.items.currencyCode",
					"root.parameters.result.results.items.series.source",
					"root.parameters.result.results.items.series.ua:type",
					"root.parameters.result.results.items.series.items.label",
					"root.parameters.result.results.items.series.items.key",
					"root.parameters.result.results.items.blockType",
					"root.parameters.result.results.items.xAxisValue",
					"root.parameters.result.results.items.chartType",
					"root.parameters.result.results.items.xAxisLabel",
					"root.parameters.result.results.items.groupBy",
					"root.parameters.result.results.items.yAxisRightLabel",
					"root.parameters.result.results.items.yAxis.series.source",
					"root.parameters.result.results.items.yAxis.series.ua:type",
					"root.parameters.result.results.items.yAxis.series.items.key",
					"root.parameters.result.results.items.yAxis.series.items.label",
					"root.parameters.result.results.items.yAxisRight.series.source",
					"root.parameters.result.results.items.yAxisRight.series.ua:type",
					"root.parameters.result.results.items.yAxisRight.series.items.key",
					"root.parameters.result.results.items.yAxisRight.series.items.label",
					"root.parameters.result.results.items.title",
					"root.parameters.result.results.yAxisLabel",
					"root.parameters.result.results.data.text",
					"root.parameters.result.results.columns.source",
					"root.parameters.result.results.columns.ua:type",
					"root.parameters.result.results.columns.items.label",
					"root.parameters.result.results.columns.items.type",
					"root.parameters.result.results.columns.items.value",
					"root.parameters.result.results.columns.items.currencyCode",
					"root.parameters.result.results.series.source",
					"root.parameters.result.results.series.ua:type",
					"root.parameters.result.results.series.items.label",
					"root.parameters.result.results.series.items.key",
					"root.parameters.result.results.blockType",
					"root.parameters.result.results.xAxisValue",
					"root.parameters.result.results.chartType",
					"root.parameters.result.results.xAxisLabel",
					"root.parameters.result.results.groupBy",
					"root.parameters.result.results.yAxisRightLabel",
					"root.parameters.result.results.yAxis.series.source",
					"root.parameters.result.results.yAxis.series.ua:type",
					"root.parameters.result.results.yAxis.series.items.key",
					"root.parameters.result.results.yAxis.series.items.label",
					"root.parameters.result.results.yAxisRight.series.source",
					"root.parameters.result.results.yAxisRight.series.ua:type",
					"root.parameters.result.results.yAxisRight.series.items.key",
					"root.parameters.result.results.yAxisRight.series.items.label",
					"root.parameters.result.results.title",
					"root.parameters.result.results.source",
					"root.parameters.result.results.ua:type",
					"root.parameters.result.results.items.yAxisLabel",
					"root.parameters.result.results.items.data.text",
					"root.parameters.result.results.items.columns.source",
					"root.parameters.result.results.items.columns.ua:type",
					"root.parameters.result.results.items.columns.items.label",
					"root.parameters.result.results.items.columns.items.type",
					"root.parameters.result.results.items.columns.items.value",
					"root.parameters.result.results.items.columns.items.currencyCode",
					"root.parameters.result.results.items.series.source",
					"root.parameters.result.results.items.series.ua:type",
					"root.parameters.result.results.items.series.items.label",
					"root.parameters.result.results.items.series.items.key",
					"root.parameters.result.results.items.blockType",
					"root.parameters.result.results.items.xAxisValue",
					"root.parameters.result.results.items.chartType",
					"root.parameters.result.results.items.xAxisLabel",
					"root.parameters.result.results.items.groupBy",
					"root.parameters.result.results.items.yAxisRightLabel",
					"root.parameters.result.results.items.yAxis.series.source",
					"root.parameters.result.results.items.yAxis.series.ua:type",
					"root.parameters.result.results.items.yAxis.series.items.key",
					"root.parameters.result.results.items.yAxis.series.items.label",
					"root.parameters.result.results.items.yAxisRight.series.source",
					"root.parameters.result.results.items.yAxisRight.series.ua:type",
					"root.parameters.result.results.items.yAxisRight.series.items.key",
					"root.parameters.result.results.items.yAxisRight.series.items.label",
					"root.parameters.result.results.items.title"
				]
			},
			"context":{
				"appName":"callables",
				"resourceVersion":460,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_NwnE7",
			"index":44,
			"inputs":{
				"automationId":"6874b1992b1acace3a8cbff4",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"result":{
						"sql_output":{
							"source":"{{ _v9jpu.outputs.result.sql_output }}",
							"ua:type":"mappedArray",
							"items":"{{ _v9jpu.outputs.result.sql_output[0] }}"
						},
						"results":{
							"source":"{{ O9a4D.outputs.result.result }}",
							"ua:type":"mappedArray",
							"items":{
								"yAxisLabel":"{{ O9a4D.outputs.result.result[0].yAxisLabel }}",
								"data":{
									"text":"{{ O9a4D.outputs.result.result[0].data.text }}"
								},
								"columns":{
									"source":"{{ O9a4D.outputs.result.result[0].columns }}",
									"ua:type":"mappedArray",
									"items":{
										"label":"{{ O9a4D.outputs.result.result[0].columns[0].label }}",
										"type":"{{ O9a4D.outputs.result.result[0].columns[0].type }}",
										"value":"{{ O9a4D.outputs.result.result[0].columns[0].value }}",
										"currencyCode":"{{ O9a4D.outputs.result.result[0].columns[0].currencyCode }}"
									}
								},
								"series":{
									"source":"{{ O9a4D.outputs.result.result[0].series }}",
									"ua:type":"mappedArray",
									"items":{
										"label":"{{ O9a4D.outputs.result.result[0].series[0].label }}",
										"key":"{{ O9a4D.outputs.result.result[0].series[0].key }}"
									}
								},
								"blockType":"{{ O9a4D.outputs.result.result[0].blockType }}",
								"xAxisValue":"{{ O9a4D.outputs.result.result[0].xAxisValue }}",
								"chartType":"{{ O9a4D.outputs.result.result[0].chartType }}",
								"xAxisLabel":"{{ O9a4D.outputs.result.result[0].xAxisLabel }}",
								"groupBy":"{{ O9a4D.outputs.result.result[0].groupBy }}",
								"yAxisRightLabel":"{{ O9a4D.outputs.result.result[0].yAxisRightLabel }}",
								"yAxis":{
									"series":{
										"source":"{{ O9a4D.outputs.result.result[0].yAxis.series }}",
										"ua:type":"mappedArray",
										"items":{
											"key":"{{ O9a4D.outputs.result.result[0].yAxis.series[0].key }}",
											"label":"{{ O9a4D.outputs.result.result[0].yAxis.series[0].label }}"
										}
									}
								},
								"yAxisRight":{
									"series":{
										"source":"{{ O9a4D.outputs.result.result[0].yAxisRight.series }}",
										"ua:type":"mappedArray",
										"items":{
											"key":"{{ O9a4D.outputs.result.result[0].yAxisRight.series[0].key }}",
											"label":"{{ O9a4D.outputs.result.result[0].yAxisRight.series[0].label }}"
										}
									}
								},
								"title":"{{ O9a4D.outputs.result.result[0].title }}"
							}
						},
						"chartType":{
							"ua:type":"mappedArray",
							"source":"{{ QiKPQ.outputs.chartType }}",
							"items":"{{ QiKPQ.outputs.chartType[0] }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":10,
				"resourceName":"storage_by_unifyapps_get_record_by_id",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"_0YITF",
			"index":45,
			"inputs":{
				"object_type":"e_ai_agent_conversation_state",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"id":"{{ GpPp2.outputs.caseId }}",
				"readThroughSessionVariables":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":474,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"n_J39Hq",
			"index":46,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ GpPp2.outputs.caseId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_case",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"page":{
					"paginateBy":"OFFSET",
					"limit":20
				},
				"numberOfRecordsToFetch":"SINGLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":10,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"_kUEOO",
			"index":47,
			"inputs":{
				"filters":[
					{
						"property":"{{ _0YITF.outputs.properties.triggerDetails.triggerDeploymentId }}",
						"filter":{
							"operator":"EQUAL",
							"value":"signal_trigger"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"conv_ai_by_unifyapps",
				"resourceVersion":10,
				"resourceName":"conv_ai_by_unifyapps_publish_response",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_kUEOO@kFhpo-1@y",
			"id":"_rVRqK",
			"index":48,
			"inputs":{
				"callableInterfaceId":"__ua__publish_response_interface",
				"parameters":{
					"coPilotBlocks":{
						"ua:type":"mappedArray",
						"source":"{{ n_NwnE7.outputs.final_results }}",
						"items":"{{ n_NwnE7.outputs.final_results[0] }}"
					},
					"caseId":"{{ GpPp2.outputs.caseId }}"
				}
			},
			"skip":false,
			"subTitle":"Conversation AI by UnifyApps",
			"title":"Publish Response",
			"type":"CALL_INTERFACE_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":11,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_kUEOO@kFhpo-1@y",
			"id":"0eoZB",
			"index":49,
			"inputs":{
				"variables":[
					{
						"source":"{{ QiKPQ.outputs.outputMsgId }}",
						"value":"{{ _rVRqK.outputs.messageId }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":67,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_kUEOO@kFhpo-1@n",
			"id":"_GVgit",
			"index":50,
			"inputs":{
				"automationId":"66d1673d9627d00147081244",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"coPilotBlocks":{
						"blocks":{
							"ua:type":"mappedArray",
							"source":"{{ n_NwnE7.outputs.final_results }}",
							"items":"{{ n_NwnE7.outputs.final_results[0] }}"
						},
						"role":"bot"
					},
					"caseId":"{{ GpPp2.outputs.caseId }}",
					"fromCustomerUserId":"{{ n_J39Hq.outputs.properties.fromCustomerUserId }}"
				}
			},
			"skip":false,
			"subTitle":"Publish to co pilot",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":11,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_kUEOO@kFhpo-1@n",
			"id":"x4Q8x",
			"index":51,
			"inputs":{
				"variables":[
					{
						"source":"{{ QiKPQ.outputs.outputMsgId }}",
						"value":"{{ _GVgit.outputs.messageId }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":22,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"DnQRn",
			"index":52,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{
										"blocktype":{
											"type":"string",
											"title":"Blocktype"
										},
										"chartType":{
											"type":"string",
											"title":"Chart Type"
										}
									},
									"required":[]
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"blockList",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"blockList",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{
									"blocktype":{
										"type":"string",
										"title":"Blocktype"
									},
									"chartType":{
										"type":"string",
										"title":"Chart Type"
									}
								},
								"required":[]
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.itemsToAdd.items.blocktype",
					"root.itemsToAdd.items.chartType"
				]
			},
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":22,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"mnDjC",
			"index":53,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"items":{
						"blocktype":"{{ n_NwnE7.outputs.publishWaht[0].blockType }}",
						"chartType":"{{ n_NwnE7.outputs.publishWaht[0].chartType }}"
					},
					"source":"{{ n_NwnE7.outputs.publishWaht }}"
				},
				"listName":"{{ DnQRn.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.updateFields.items.fieldName",
					"root.updateFields.items.actionType"
				]
			},
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":438,
				"resourceName":"storage_by_unifyapps_update_record_fields_by_id",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"y4EAP",
			"index":54,
			"inputs":{
				"recordId":"{{ _GVgit.outputs.messageId }}",
				"writeThroughSessionVariables":false,
				"object_type":"service_hub_message",
				"skipPermissionCheck":false,
				"updateFields":[
					{
						"fieldName":"properties.additional.sqlQuery",
						"actionType":"SET",
						"setValue":"{{ BWDmq.outputs.finalSQLquery }}"
					},
					{
						"fieldName":"properties.additional.hasMoreData",
						"actionType":"SET",
						"setValue":"{{ nJq8F.outputs.hasMoreData }}"
					},
					{
						"fieldName":"properties.additional.platformName",
						"actionType":"SET",
						"setValue":"{{ Oqpz0.outputs.result.platformName }}"
					},
					{
						"fieldName":"properties.additional.usedMetadata",
						"actionType":"SET",
						"setValue":"{{ n_WO2Rx.outputs.result.result }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Update an existing record's fields",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":390,
				"resourceName":"variable_by_unifyapps_set_session_variable",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"jREnR",
			"index":55,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"disableThought":{
							"type":"boolean",
							"title":"Disable Thought"
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"disableThought":true
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"disableThought":{
							"type":"boolean",
							"title":"Disable Thought"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Set Session Variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.blocks.items.blockType",
					"root.parameters.blocks.items.chartType"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":22,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"auRVz",
			"index":56,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"msg":{
							"type":"string",
							"title":"Msg"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"blocks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"blockType":{
										"type":"string",
										"title":"blockType"
									},
									"chartType":{
										"type":"string",
										"title":"Chart Type"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"blocks"
						},
						"hasMoreData":{
							"type":"boolean",
							"title":"Has More Data"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def normalizedBlockType(block) {\n    // Handles Chart blocktypes with a specific chartType\n    if (block.blockType?.toLowerCase() == 'chart' && block.chartType) {\n        // Lowercase and normalize chartType if needed\n        return block.chartType.toLowerCase() + ' chart'\n    }\n    \n    // For other types, operate as before:\n    def bt = block.blockType?.toLowerCase() \n    if (bt in ['keyvalue']) return bt + ' table'\n    if (bt in ['line', 'bar', 'column', 'pie', 'dual_axes']) return bt + ' chart'\n    if (bt == 'typography') return bt + ' block'\n    return bt\n}\n\n// Instead of blocks*.blockType, map on each block to handle both blocktype & chartType\ndef blockTypes = blocks.collect { normalizedBlockType(it) }\n\ndef msg = blockTypes.join(' + ') + \" data has been published/displayed to the user that represents the row and column data from the SQL output already in the chat. [IMPORTANT] STRICTLY Make sure you do not repeat the same information or produce markdown table in the Final Answer as it is already presented in a block to the user. Do not make any judgements based on the blocktype given.[IMPORTANT] In the final answer, do not give any dummy chartlink or chart description or information about the chart.\" \n\n// If blockTypes size is 1 and it's 'table', add instruction\nif (blockTypes.size() == 1 && (blockTypes[0] == 'keyvalue table' || blockTypes[0] == 'table')) {\n    msg += \" Only a table is produced, dont refer to it as a 'chart' in the Final Answer.\"\n}\n\nif (binding.hasVariable(\"hasMoreData\") && hasMoreData){\n    if (blockTypes.any { it == 'table' }) {\n        msg += \" STRICTLY Mention the 'Export' option for table, which allows users to export all records or access the complete, non-truncated output from the table.\"\n    }\n}\n\nreturn [\n    \"msg\" : msg\n]",
				"parameters":{
					"blocks":{
						"ua:type":"mappedArray",
						"source":"{{ DnQRn.outputs.items }}",
						"items":{
							"blockType":"{{ DnQRn.outputs.items[0].blocktype }}",
							"chartType":"{{ DnQRn.outputs.items[0].chartType }}"
						}
					},
					"hasMoreData":"{{ nJq8F.outputs.hasMoreData }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":17,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"kFhpo-1",
			"id":"_UuNZv",
			"index":57,
			"inputs":{
				"result":{
					"success":true,
					"toolOutput":"{{ _yAylI.outputs.result.finalOutput }} \\n---\\n {{ auRVz.outputs.result.msg }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":38712,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"version":50
}