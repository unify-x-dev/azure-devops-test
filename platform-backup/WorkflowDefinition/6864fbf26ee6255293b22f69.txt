{
	"appsUsed":[
		"openai"
	],
	"createdTime":1752514747547,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296312243,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd780c3d19149a9e36bb",
		"status":"DEPLOYED",
		"version":35,
		"workflowVersion":103
	},
	"edges":[
		{
			"fromNodeId":"n_RcCVC",
			"priority":0,
			"skip":false,
			"toNodeId":"n_OHIT0",
			"type":"next"
		},
		{
			"fromNodeId":"n_OHIT0",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"_8NPSt",
			"type":"if"
		},
		{
			"fromNodeId":"_8NPSt",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Hj3jM",
			"type":"next"
		},
		{
			"fromNodeId":"n_Hj3jM",
			"priority":0,
			"skip":false,
			"toNodeId":"_7BCjq",
			"type":"next"
		},
		{
			"fromNodeId":"n_OHIT0",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"n_N0QO4",
			"type":"next"
		},
		{
			"fromNodeId":"n_N0QO4",
			"priority":0,
			"skip":false,
			"toNodeId":"n_2KbA7",
			"type":"next"
		},
		{
			"fromNodeId":"n_2KbA7",
			"priority":0,
			"skip":false,
			"toNodeId":"_0E82O",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"6864fbf26ee6255293b22f69",
	"lastModifiedBy":0,
	"lcName":"text to workflow v2 | message to keywords",
	"modifiedTime":1761722865380,
	"name":"Text to Workflow v2 | Message to Keywords",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":444,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_JTs3U-1",
			"id":"n_RcCVC",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"output":{
							"type":"string",
							"title":"Output"
						}
					},
					"additionalProperties":false,
					"required":[
						"output"
					]
				},
				"setup":{
					"type":"object",
					"properties":{
						"query":{
							"type":"string",
							"title":"Query",
							"help":"Search Query to get relevant Actions / Nodes to add in the Workflow/ Automation."
						},
						"flagNER":{
							"type":"boolean",
							"title":"Flag NER",
							"default":"true"
						}
					},
					"additionalProperties":false,
					"required":[
						"query",
						"flagNER"
					]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":437,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_JTs3U-1",
			"id":"n_OHIT0",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_RcCVC.outputs.flagNER }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Use GliNER?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"custom_http_endpoint",
				"resourceVersion":499,
				"resourceName":"custom_http_endpoint_execute",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_OHIT0@_JTs3U-1@y",
			"id":"_8NPSt",
			"index":0,
			"inputs":{
				"isAsync":false,
				"enableProxy":false,
				"requestTimeoutInSecs":-1,
				"httpMethod":"POST",
				"body":{
					"payloads":{
						"items":{
							"payloadId":"123",
							"messages":{
								"items":{
									"blocks":{
										"items":{
											"data":{
												"labels_list":[
													"action",
													"application"
												],
												"text":"{{ n_RcCVC.outputs.query }}",
												"threshold":0.2,
												"type":"text"
											},
											"blockType":"text"
										},
										"ua:type":"mappedArray"
									},
									"role":"user"
								},
								"ua:type":"mappedArray"
							}
						},
						"ua:type":"mappedArray"
					}
				},
				"sslVerify":false,
				"path":"/api/v2/gliner",
				"responseSchema":{
					"type":"object",
					"properties":{
						"status":{
							"type":"string",
							"title":"status"
						},
						"results":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"payloadId":{
										"type":"string",
										"title":"payloadId"
									},
									"payloadTags":{
										"type":"object",
										"title":"payloadTags"
									},
									"messages":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"role":{
													"type":"string",
													"title":"role"
												},
												"blocks":{
													"type":"array",
													"items":{
														"type":"object",
														"properties":{
															"blockType":{
																"type":"string",
																"title":"blockType"
															},
															"data":{
																"type":"object",
																"properties":{
																	"keywords":{
																		"type":"array",
																		"items":{
																			"type":"object",
																			"properties":{
																				"keyword":{
																					"type":"string",
																					"title":"keyword"
																				},
																				"start":{
																					"type":"integer",
																					"title":"start"
																				},
																				"end":{
																					"type":"integer",
																					"title":"end"
																				},
																				"label":{
																					"type":"string",
																					"title":"label"
																				},
																				"score":{
																					"type":"number",
																					"title":"score"
																				}
																			},
																			"additionalProperties":false
																		},
																		"title":"keywords"
																	}
																},
																"title":"data",
																"additionalProperties":false
															}
														},
														"additionalProperties":false
													},
													"title":"blocks"
												}
											},
											"additionalProperties":false
										},
										"title":"messages"
									}
								},
								"additionalProperties":false
							},
							"title":"results"
						}
					},
					"additionalProperties":false
				},
				"baseUrl":"http://ai-gliner-global-svc:80",
				"bodySchema":{
					"type":"object",
					"properties":{
						"payloads":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"payloadId":{
										"type":"string",
										"title":"payloadId"
									},
									"messages":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"role":{
													"type":"string",
													"title":"role"
												},
												"blocks":{
													"type":"array",
													"items":{
														"type":"object",
														"properties":{
															"blockType":{
																"type":"string",
																"title":"blockType"
															},
															"data":{
																"type":"object",
																"properties":{
																	"text":{
																		"type":"string",
																		"title":"text"
																	},
																	"threshold":{
																		"type":"number",
																		"title":"threshold"
																	},
																	"labels_list":{
																		"type":"array",
																		"items":{
																			"type":"string"
																		},
																		"title":"labels_list"
																	},
																	"type":{
																		"type":"string",
																		"title":"type"
																	}
																},
																"title":"data",
																"additionalProperties":false
															}
														},
														"additionalProperties":false
													},
													"title":"blocks"
												}
											},
											"additionalProperties":false
										},
										"title":"messages"
									}
								},
								"additionalProperties":false
							},
							"title":"payloads"
						}
					},
					"additionalProperties":false
				},
				"queryParamsList":[],
				"responseContentType":"application/json",
				"authType":"CUSTOM",
				"requestContentType":"application/json",
				"ignoreTrailingSlashes":false
			},
			"skip":false,
			"subTitle":"Internal GliNER Service",
			"title":"Execute REST request",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				},
				"visibleOptionalFields":[
					"root.parameters.results.items.payloadId",
					"root.parameters.results.items.payloadTags",
					"root.parameters.results.items.messages.items.role",
					"root.parameters.results.items.messages.items.blocks.items.blockType",
					"root.parameters.results.items.messages.items.blocks.items.data.keywords.items.keyword",
					"root.parameters.results.items.messages.items.blocks.items.data.keywords.items.start",
					"root.parameters.results.items.messages.items.blocks.items.data.keywords.items.end",
					"root.parameters.results.items.messages.items.blocks.items.data.keywords.items.label",
					"root.parameters.results.items.messages.items.blocks.items.data.keywords.items.score"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_OHIT0@_JTs3U-1@y",
			"id":"n_Hj3jM",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"keywords":{
							"type":"string",
							"title":"Keywords"
						}
					},
					"additionalProperties":false,
					"required":[
						"keywords"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"status":{
							"type":"string",
							"title":"status"
						},
						"results":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"payloadId":{
										"type":"string",
										"title":"payloadId"
									},
									"payloadTags":{
										"type":"object",
										"title":"payloadTags"
									},
									"messages":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"role":{
													"type":"string",
													"title":"role"
												},
												"blocks":{
													"type":"array",
													"items":{
														"type":"object",
														"properties":{
															"blockType":{
																"type":"string",
																"title":"blockType"
															},
															"data":{
																"type":"object",
																"properties":{
																	"keywords":{
																		"type":"array",
																		"items":{
																			"type":"object",
																			"properties":{
																				"keyword":{
																					"type":"string",
																					"title":"keyword"
																				},
																				"start":{
																					"type":"integer",
																					"title":"start"
																				},
																				"end":{
																					"type":"integer",
																					"title":"end"
																				},
																				"label":{
																					"type":"string",
																					"title":"label"
																				},
																				"score":{
																					"type":"number",
																					"title":"score"
																				}
																			},
																			"additionalProperties":false
																		},
																		"title":"keywords"
																	}
																},
																"title":"data",
																"additionalProperties":false
															}
														},
														"additionalProperties":false
													},
													"title":"blocks"
												}
											},
											"additionalProperties":false
										},
										"title":"messages"
									}
								},
								"additionalProperties":false
							},
							"title":"results"
						}
					},
					"additionalProperties":false,
					"ua:__linkedVariable__":"_8NPSt.outputs.result"
				},
				"compile_static":false,
				"code":"def keywords = []\n\nresults.each { entry ->\n    entry.messages?.each { message ->\n        message.blocks?.each { block ->\n            block.data?.keywords?.each { kw ->\n                keywords << kw.keyword\n            }\n        }\n    }\n}\n\ndef keywordString = keywords.join(', ')\nreturn [ Keywords: keywordString ]",
				"parameters":{
					"status":"{{ _8NPSt.outputs.result.status }}",
					"results":{
						"source":"{{ _8NPSt.outputs.result.results }}",
						"ua:type":"mappedArray",
						"items":{
							"payloadId":"{{ _8NPSt.outputs.result.results[0].payloadId }}",
							"payloadTags":"{{ _8NPSt.outputs.result.results[0].payloadTags }}",
							"messages":{
								"source":"{{ _8NPSt.outputs.result.results[0].messages }}",
								"ua:type":"mappedArray",
								"items":{
									"role":"{{ _8NPSt.outputs.result.results[0].messages[0].role }}",
									"blocks":{
										"source":"{{ _8NPSt.outputs.result.results[0].messages[0].blocks }}",
										"ua:type":"mappedArray",
										"items":{
											"blockType":"{{ _8NPSt.outputs.result.results[0].messages[0].blocks[0].blockType }}",
											"data":{
												"keywords":{
													"source":"{{ _8NPSt.outputs.result.results[0].messages[0].blocks[0].data.keywords }}",
													"ua:type":"mappedArray",
													"items":{
														"keyword":"{{ _8NPSt.outputs.result.results[0].messages[0].blocks[0].data.keywords[0].keyword }}",
														"start":"{{ _8NPSt.outputs.result.results[0].messages[0].blocks[0].data.keywords[0].start }}",
														"end":"{{ _8NPSt.outputs.result.results[0].messages[0].blocks[0].data.keywords[0].end }}",
														"label":"{{ _8NPSt.outputs.result.results[0].messages[0].blocks[0].data.keywords[0].label }}",
														"score":"{{ _8NPSt.outputs.result.results[0].messages[0].blocks[0].data.keywords[0].score }}"
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false,
					"slidingWindowType":"COUNT_BASED"
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"unit":"MINUTES",
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"Extract keywords from API response",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":454,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_OHIT0@_JTs3U-1@y",
			"id":"_7BCjq",
			"index":0,
			"inputs":{
				"result":{
					"output":"{{ n_Hj3jM.outputs.result.keywords }}, {{ n_RcCVC.outputs.query }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"openai",
				"resourceVersion":1026,
				"connectionId":"669a2ee5b16db42aab702bf1",
				"resourceName":"openai_create_completion",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_OHIT0@_JTs3U-1@n",
			"id":"n_N0QO4",
			"index":0,
			"inputs":{
				"messages":[
					{
						"role":"system",
						"content":"You are an intelligent keyword extractor. You are presented with a user query, which may have keywords. If the query doesn't have any keywords to be extracted, return the special placeholder \"<NA>\". Return *only* the extracted keyword spans as shown below when applicable. Do NOT include unecessary words like 'block' after spans such as 'gmail block'. Do not have json output, just comma separated keywords\n\n\n- If there is no explicit mention of an application name, focus on extracting the actions:\nExample Prompt: When a user signs up, send welcome email immediately. Wait 3 days, send product tips. After 7 days, send discount code.\nExpected output: \"user signs up, send welcome email, wait 3 days, send product tips, send discount code\"\n\n\n- Do not include and unnecessary text such as 'to' before or after keywords that do not add to the meaning of the keyword. Make sure you extract the entire keyword and not just a part of it.\n- Do not include and logic words like 'loop', 'branch', 'condition', 'if', 'else', 'then', 'else if', 'else if' etc. These are not keywords. or words like 'create' in the context of creating an automation, or the word 'automation' in the context of creating an automation or any variant of these words\"\n- Do not include words like 'workflow' , or the word 'automation' UNLESS they are tied to an application name.\n- Do not include any redundant words like 'email' in the context of something like 'gmail', only include the application name.\n\n\nExample prompt: create an automation with 3 branches with a slack, gmail, and zendesk block on each branch respectively. Then excecute a groovy code block after them\nExpected output: \"slack, gmail, zendesk, groovy code\"\n\n\nExample Prompt: can you give me an automation that has 3 branches, one with a whatsapp, one with a gmail followed by whatsapp, and the last having a gmail followed by a slack\nExpected output: \"whatsapp, gmail, slack\"\n\n\nExample Prompt: The workflow begins with a webhook trigger using the webhooks_default action, which is activated whenever an external API sends a payload containing an order JSON. From this payload, we extract the orderId and totalAmount fields for further processing. Next, the workflow uses the analytics_by_unifyapps_execute_query action to retrieve the line-items associated with the given orderId. The result of this query determines the next path in the workflow.\nExpected output: \"webhook trigger, webhooks_default, external API, order JSON, analytics_by_unifyapps_execute_query\"\n\n\n- You should avoid extracting verbs like \"send msg\" whenever the user mentions an explicit application. If the user doesn't mention an application, then the verbs (actions) can provide hints as valuable keywords.\n\n\nExample prompt: Send msg on slack channel\nExpected output: \"slack\"\n\n\nExample prompt: fetch records from object and send each one as msg\nExpected output: \"fetch records from object, send msg\"\n\nExample prompt: loop over placeholder and another condition over slack action\nExpected output: \"slack\"\n\n\n- Greetings and other other messages where the user doesn't want to create a workflow do not need keywords\nExample prompt: hello\nExpected output: \"<NA>\"\n\n\nExample prompt: create a variable and update it in a for loop for each message received via telegram\nExpected output: \"variable, telegram\"\n\n\n\nYour output must be a single string of comma separated words without '```' or without \"\"."
					},
					{
						"role":"user",
						"content":"{{ n_RcCVC.outputs.query }}"
					}
				],
				"model":"gpt-4o-mini"
			},
			"skip":false,
			"subTitle":"OpenAI",
			"title":"Chat completion",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_OHIT0@_JTs3U-1@n",
			"id":"n_2KbA7",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"refinedContent":{
							"type":"string",
							"title":"Refined Content"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"content":{
							"type":"string",
							"title":"Content"
						},
						"userQuery":{
							"type":"string",
							"title":"User Query"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def refinedContent = (content != null && content.length() > 0) ? content : userQuery\n\ndef result = [\n  refinedContent: refinedContent\n]",
				"parameters":{
					"content":"{{ n_N0QO4.outputs.choices[0].message.content }}",
					"userQuery":"{{ n_RcCVC.outputs.query }}"
				}
			},
			"skip":false,
			"subTitle":"Check Not Empty/Null",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":454,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_OHIT0@_JTs3U-1@n",
			"id":"_0E82O",
			"index":0,
			"inputs":{
				"result":{
					"output":"{{ n_2KbA7.outputs.result.refinedContent }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":38712,
	"runtimeConnectionAppNames":[
		"openai"
	],
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"Text_to_Workflow_v2"
	],
	"version":105
}