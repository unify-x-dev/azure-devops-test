{
	"appsUsed":[
		"weaviate"
	],
	"createdTime":1754285426565,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296276406,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd54672fcc41fb70f321",
		"status":"DEPLOYED",
		"version":26,
		"workflowVersion":53
	},
	"edges":[
		{
			"fromNodeId":"n_h2yZX",
			"priority":0,
			"skip":false,
			"toNodeId":"n_vRQAE",
			"type":"next"
		},
		{
			"fromNodeId":"n_vRQAE",
			"priority":0,
			"skip":false,
			"toNodeId":"_BjG4A",
			"type":"next"
		},
		{
			"fromNodeId":"_BjG4A",
			"priority":0,
			"skip":false,
			"toNodeId":"n_arjhx",
			"type":"next"
		},
		{
			"fromNodeId":"n_arjhx",
			"priority":0,
			"skip":false,
			"toNodeId":"n_AU4ED",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"68834a75b85c028e0d71a96e",
	"lastModifiedBy":0,
	"lcName":"chunk fetcher | weaviate",
	"modifiedTime":1761722828251,
	"name":"Chunk Fetcher | Weaviate",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":445,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_GYiNK-1",
			"id":"n_h2yZX",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"records":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"document":{
										"type":"object",
										"properties":{
											"chunkId":{
												"type":"string",
												"title":"chunkId"
											},
											"properties":{
												"type":"object",
												"properties":{
													"chunkMetadata":{
														"type":"object",
														"properties":{},
														"title":"chunkMetadata",
														"additionalProperties":false,
														"required":[]
													},
													"knowledgeId":{
														"type":"string",
														"title":"knowledgeId"
													},
													"sharedWithIds":{
														"type":"array",
														"items":{
															"type":"string"
														},
														"title":"sharedWithIds"
													},
													"text":{
														"type":"string",
														"title":"text"
													},
													"uniqueEntityId":{
														"type":"string",
														"title":"uniqueEntityId"
													},
													"authorEmail":{
														"type":"string",
														"title":"Author Email"
													},
													"knowledgeType":{
														"type":"string",
														"title":"Knowledge Type"
													}
												},
												"title":"properties",
												"additionalProperties":false,
												"required":[]
											}
										},
										"title":"document",
										"additionalProperties":false
									},
									"score":{
										"type":"number",
										"title":"score"
									}
								},
								"additionalProperties":false
							},
							"title":"records"
						}
					},
					"additionalProperties":false
				},
				"setup":{
					"type":"object",
					"properties":{
						"embeddings":{
							"type":"array",
							"items":{
								"type":"number"
							},
							"title":"embeddings"
						},
						"filter":{
							"type":"object",
							"properties":{},
							"title":"filter",
							"additionalProperties":false,
							"required":[]
						}
					},
					"additionalProperties":false
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.embeddings.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":449,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_GYiNK-1",
			"id":"n_vRQAE",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"query":{
							"type":"string",
							"title":"Query"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"filter":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Filter"
						},
						"embeddings":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Embeddings"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"String convertOperator(String op) {\n    switch(op) {\n        case 'AND':   return 'And'\n        case 'OR':    return 'Or'\n        case 'EQUAL': return 'Equal'\n        case 'IN':    return 'ContainsAny'\n        default:      return op.toLowerCase().capitalize()\n    }\n}\n\n\n//  Recursively builds the GraphQL “where” clause from Map filter.\n\nString buildWhereClause(Map filter) {\n    String gqlOp = convertOperator(filter['op'])\n    List<String> ops = []\n\n    filter['values'].each { val ->\n        if (val instanceof Map && val.containsKey('field')) {\n            \n            String[] parts = val['field'].split(/\\./)\n            if (parts[0] == 'properties') {\n                parts = parts.length>1 ? parts[1..-1] as String[] : []\n            }\n            String path = parts.collect { '\"' + it + '\"' }.join(', ')\n\n            switch(val['op']) {\n                case 'IN':\n                    \n                    if (val['values'].every{ it instanceof Number }) {\n                       \n                        ops << (\n                            \"{ path: [\" + path + \"], operator: ContainsAny, valueNumber: [\" +\n                            val['values'].join(', ') +\n                            \"] }\"\n                        )\n                    } else {\n                        \n                        def quoted = val['values']\n                                        .collect{ '\"' + it.toString() + '\"' }\n                                        .join(', ')\n                        ops << (\n                            \"{ path: [\" + path + \"], operator: ContainsAny, valueText: [\" +\n                            quoted +\n                            \"] }\"\n                        )\n                    }\n                    break\n\n                case 'EQUAL':\n                    def v = val['values'][0]\n                    if (v instanceof Number) {\n                        ops << (\n                            \"{ path: [\" + path + \"], operator: Equal, valueNumber: \" +\n                            v.toString() +\n                            \" }\"\n                        )\n                    } else {\n                        ops << (\n                            \"{ path: [\" + path + \"], operator: Equal, valueText: \\\"\" +\n                            v.toString() +\n                            \"\\\" }\"\n                        )\n                    }\n                    break\n\n                case 'MISSING':\n                    // instead of IsNull, we treat missing as numeric -1\n                    ops << (\n                        \"{ path: [\" + path + \"], operator: Equal, valueNumber: -1 }\"\n                    )\n                    break\n\n                default:\n                \n                    ops << (\n                        \"{ path: [\" + path + \"], operator: \" +\n                        convertOperator(val['op']) +\n                        \" }\"\n                    )\n            }\n        }\n        else if (val instanceof Map && val.containsKey('op') && val.containsKey('values')) {\n            ops << buildWhereClause(val)\n        }\n        else {\n            throw new IllegalArgumentException(\"Invalid filter node: \" + val)\n        }\n    }\n\n    return \"{ operator: \" + gqlOp + \", operands: [\" + ops.join(', ') + \"] }\"\n}\n\n// Builds the final Weaviate GraphQL query string.\n\nString buildWeaviateQuery(String className,\n                          Map filter,\n                          List<Number> vector,\n                          int limit,\n                          List<String> fields) {\n\n    String vecList     = vector.collect { it.toString() }.join(', ')\n    String whereClause = buildWhereClause(filter)\n    String fieldList   = fields.join(' ')\n\n    String q  = \"{ Get { \"\n    q       += className +\n               \"(nearVector: { vector: [\" + vecList + \"] }, \" +\n               \"where: \" + whereClause + \", \" +\n               \"limit: \" + limit + \") { \" +\n               fieldList +\n               \" } } }\"\n\n    return q\n}\n\n\ndef sampleFilter = filter       \ndef sampleVector = embeddings \n\ndef gql = buildWeaviateQuery(\n    'KnowledgeVectorStore3072',\n    sampleFilter,\n    sampleVector,\n    5,\n    ['knowledgeId','text','knowledgeVersion','sharedWithIds','uniqueEntityId','chunkMetadata { name , appName , modifiedTime , createdTime }','_additional { id distance certainty}']\n)\n\nreturn [ query: gql ]",
				"parameters":{
					"embeddings":{
						"ua:type":"mappedArray",
						"source":"{{ n_h2yZX.outputs.embeddings }}",
						"items":"{{ n_h2yZX.outputs.embeddings[0] }}"
					},
					"filter":"{{ n_h2yZX.outputs.filter }}"
				}
			},
			"skip":false,
			"subTitle":"Create Weaviate Query",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.record.embeddings.items",
					"root.record.chunkMetadata.name",
					"root.record.sharedWithIds.items"
				]
			},
			"context":{
				"appName":"weaviate",
				"resourceVersion":26,
				"connectionId":"6881cf5ac1f958743bbe7ece",
				"resourceName":"weaviate_execute_graphql",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_GYiNK-1",
			"id":"_BjG4A",
			"index":3,
			"inputs":{
				"objectSourceResourceName":"weaviate_execute_graphql_metadata",
				"query":"{{ n_vRQAE.outputs.result.query }}"
			},
			"skip":false,
			"subTitle":"Weaviate",
			"title":"Execute GraphQL",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":449,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_GYiNK-1",
			"id":"n_arjhx",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"records":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"document":{
										"type":"object",
										"properties":{
											"chunkId":{
												"type":"string",
												"title":"chunkId"
											},
											"properties":{
												"type":"object",
												"properties":{
													"chunkMetadata":{
														"type":"object",
														"properties":{},
														"title":"chunkMetadata",
														"additionalProperties":false,
														"required":[]
													},
													"knowledgeId":{
														"type":"string",
														"title":"knowledgeId"
													},
													"sharedWithIds":{
														"type":"array",
														"items":{
															"type":"string"
														},
														"title":"sharedWithIds"
													},
													"text":{
														"type":"string",
														"title":"text"
													},
													"uniqueEntityId":{
														"type":"string",
														"title":"uniqueEntityId"
													},
													"authorEmail":{
														"type":"string",
														"title":"Author Email"
													},
													"knowledgeType":{
														"type":"string",
														"title":"Knowledge Type"
													}
												},
												"title":"properties",
												"additionalProperties":false,
												"required":[]
											}
										},
										"title":"document",
										"additionalProperties":false
									},
									"score":{
										"type":"number",
										"title":"score"
									}
								},
								"additionalProperties":false
							},
							"title":"records"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"output":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Output"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def transformWeaviateResponse(response) {\n    def records = []\n\n    def results = response?.data?.Get?.KnowledgeVectorStore3072\n    if (!results) return [records: []]\n\n    results.each { item ->\n        def score = item._additional?.certainty ?: 0.0\n        def chunkId = item._additional?.id\n\n        def properties = item.findAll { k, v -> k != '_additional' }\n\n        def record = [\n            document: [\n                chunkId   : chunkId?.replaceAll('-', '')?.takeRight(24),\n                properties: properties\n            ],\n            score: score\n        ]\n\n        records << record\n    }\n\n    return records\n}\n\n\nif(binding.hasVariable('output') && output)\n{\n    def answer = transformWeaviateResponse(output)\n    return ['records':answer]\n}\nreturn []",
				"parameters":{
					"output":"{{ _BjG4A.outputs }}"
				}
			},
			"skip":false,
			"subTitle":"Create output",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":455,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_GYiNK-1",
			"id":"n_AU4ED",
			"index":5,
			"inputs":{
				"result":{
					"records":{
						"source":"{{ n_arjhx.outputs.result.records }}",
						"ua:type":"mappedArray",
						"items":{
							"document":{
								"chunkId":"{{ n_arjhx.outputs.result.records[0].document.chunkId }}",
								"properties":{
									"chunkMetadata":"{{ n_arjhx.outputs.result.records[0].document.properties.chunkMetadata }}",
									"knowledgeId":"{{ n_arjhx.outputs.result.records[0].document.properties.knowledgeId }}",
									"sharedWithIds":{
										"source":"{{ n_arjhx.outputs.result.records[0].document.properties.sharedWithIds }}",
										"ua:type":"mappedArray",
										"items":"{{ n_arjhx.outputs.result.records[0].document.properties.sharedWithIds[0] }}"
									},
									"text":"{{ n_arjhx.outputs.result.records[0].document.properties.text }}",
									"uniqueEntityId":"{{ n_arjhx.outputs.result.records[0].document.properties.uniqueEntityId }}",
									"authorEmail":"{{ n_arjhx.outputs.result.records[0].document.properties.authorEmail }}",
									"knowledgeType":"{{ n_arjhx.outputs.result.records[0].document.properties.knowledgeType }}"
								}
							},
							"score":"{{ n_arjhx.outputs.result.records[0].score }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":-1,
	"runtimeConnectionAppNames":[
		"weaviate"
	],
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"headerValueTierMap":{},
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":55
}