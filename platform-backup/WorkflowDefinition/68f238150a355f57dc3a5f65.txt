{
	"appsUsed":[
		
	],
	"createdTime":1761468834315,
	"deleted":false,
	"edges":[
		{
			"fromNodeId":"n_Tatfs",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ePDTm",
			"type":"next"
		},
		{
			"fromNodeId":"n_ePDTm",
			"priority":0,
			"skip":false,
			"toNodeId":"urVzy",
			"type":"next"
		},
		{
			"fromNodeId":"urVzy",
			"priority":0,
			"skip":false,
			"toNodeId":"aTGC4",
			"type":"next"
		}
	],
	"id":"68f238150a355f57dc3a5f65",
	"lastModifiedBy":39717,
	"lcName":"custom regex handling",
	"modifiedTime":1761468834315,
	"name":"custom regex handling",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":133,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_OSBxu-1",
			"id":"n_Tatfs",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"result_batch":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"details":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"entity":{
													"type":"string",
													"title":"entity"
												},
												"mask":{
													"type":"object",
													"properties":{
														"end":{
															"type":"integer",
															"title":"end"
														},
														"operator":{
															"type":"string",
															"title":"operator"
														},
														"start":{
															"type":"integer",
															"title":"start"
														},
														"text":{
															"type":"string",
															"title":"text"
														}
													},
													"title":"mask",
													"additionalProperties":false
												},
												"original":{
													"type":"object",
													"properties":{
														"end":{
															"type":"integer",
															"title":"end"
														},
														"start":{
															"type":"integer",
															"title":"start"
														},
														"text":{
															"type":"string",
															"title":"text"
														}
													},
													"title":"original",
													"additionalProperties":false
												}
											},
											"additionalProperties":false
										},
										"title":"details"
									},
									"maskedText":{
										"type":"string",
										"title":"maskedText"
									},
									"original":{
										"type":"string",
										"title":"original"
									},
									"proceed":{
										"type":"boolean",
										"title":"proceed"
									}
								},
								"additionalProperties":false
							},
							"title":"result_batch"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"result_batch":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"details":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"entity":{
													"type":"string",
													"title":"entity"
												},
												"mask":{
													"type":"object",
													"properties":{
														"end":{
															"type":"integer",
															"title":"end"
														},
														"operator":{
															"type":"string",
															"title":"operator"
														},
														"start":{
															"type":"integer",
															"title":"start"
														},
														"text":{
															"type":"string",
															"title":"text"
														}
													},
													"title":"mask",
													"additionalProperties":false
												},
												"original":{
													"type":"object",
													"properties":{
														"end":{
															"type":"integer",
															"title":"end"
														},
														"start":{
															"type":"integer",
															"title":"start"
														},
														"text":{
															"type":"string",
															"title":"text"
														}
													},
													"title":"original",
													"additionalProperties":false
												}
											},
											"additionalProperties":false,
											"required":[]
										},
										"title":"details"
									},
									"maskedText":{
										"type":"string",
										"title":"maskedText"
									},
									"original":{
										"type":"string",
										"title":"original"
									}
								},
								"additionalProperties":false
							},
							"title":"result_batch"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":58,
				"resourceName":"utility_by_unifyapps_to_json_object",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_OSBxu-1",
			"id":"n_ePDTm",
			"index":2,
			"inputs":{
				"jsonSchema":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"regexPatterns":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"behaviour":{
										"type":"string",
										"title":"behaviour"
									},
									"name":{
										"type":"string",
										"title":"name"
									},
									"pattern":{
										"type":"string",
										"title":"pattern"
									}
								},
								"additionalProperties":false
							},
							"title":"regexPatterns"
						}
					}
				},
				"jsonString":"{\"regexPatterns\":[{\"behaviour\":\"mask\",\"name\":\"Email Masking\",\"pattern\":\"[\\\\w._%+-]+@[\\\\w.-]+\\\\.[A-Za-z]{2,}\"},{\"behaviour\":\"mask\",\"name\":\"International Phone with Country Code\",\"pattern\":\"\\\\+\\\\d{1,4}[\\\\s.\\\\-]?\\\\(?\\\\d{1,4}\\\\)?[\\\\s.\\\\-]?\\\\d{1,4}[\\\\s.\\\\-]?\\\\d{1,9}\"},{\"behaviour\":\"mask\",\"name\":\"US/Canada Phone Number\",\"pattern\":\"(?:\\\\+?1[\\\\s.\\\\-]?)?\\\\(?\\\\d{3}\\\\)?[\\\\s.\\\\-]?\\\\d{3}[\\\\s.\\\\-]?\\\\d{4}\"},{\"behaviour\":\"mask\",\"name\":\"India Mobile Number\",\"pattern\":\"(?:\\\\+?91[\\\\s.\\\\-]?)?[6-9]\\\\d{9}\"},{\"behaviour\":\"mask\",\"name\":\"UK Phone Number\",\"pattern\":\"(?:\\\\+?44[\\\\s.\\\\-]?)?(?:\\\\(?0\\\\)?[\\\\s.\\\\-]?)?\\\\d{2,4}[\\\\s.\\\\-]?\\\\d{3,4}[\\\\s.\\\\-]?\\\\d{3,4}\"},{\"behaviour\":\"mask\",\"name\":\"Generic Phone Number\",\"pattern\":\"\\\\b\\\\d{7,15}\\\\b\"}]}"
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Deserialise string to JSON object",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				},
				"visibleOptionalFields":[
					"root.parameters.result_batch.items.original",
					"root.parameters.result_batch.items.maskedText",
					"root.parameters.result_batch.items.details.items.entity",
					"root.parameters.result_batch.items.details.items.original.text",
					"root.parameters.result_batch.items.details.items.original.start",
					"root.parameters.result_batch.items.details.items.original.end",
					"root.parameters.result_batch.items.details.items.mask.operator",
					"root.parameters.result_batch.items.details.items.mask.text",
					"root.parameters.result_batch.items.details.items.mask.start",
					"root.parameters.result_batch.items.details.items.mask.end",
					"root.parameters.regexPatterns.items.Name",
					"root.parameters.regexPatterns.items.behaviour",
					"root.parameters.regexPatterns.items.pattern"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":52,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_OSBxu-1",
			"id":"urVzy",
			"index":3,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"result_batch":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"original":{
										"type":"string",
										"title":"original"
									},
									"maskedText":{
										"type":"string",
										"title":"maskedText"
									},
									"details":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"entity":{
													"type":"string",
													"title":"entity"
												},
												"original":{
													"type":"object",
													"properties":{
														"text":{
															"type":"string",
															"title":"text"
														},
														"start":{
															"type":"integer",
															"title":"start"
														},
														"end":{
															"type":"integer",
															"title":"end"
														}
													},
													"title":"original",
													"additionalProperties":false
												},
												"mask":{
													"type":"object",
													"properties":{
														"operator":{
															"type":"string",
															"title":"operator"
														},
														"text":{
															"type":"string",
															"title":"text"
														},
														"start":{
															"type":"integer",
															"title":"start"
														},
														"end":{
															"type":"integer",
															"title":"end"
														}
													},
													"title":"mask",
													"additionalProperties":false
												},
												"detection":{
													"type":"object",
													"properties":{
														"score":{
															"type":"number",
															"title":"score"
														},
														"why":{
															"type":"object",
															"properties":{
																"original_score":{
																	"type":"number",
																	"title":"original_score"
																},
																"recognizer":{
																	"type":"string",
																	"title":"recognizer"
																},
																"textual_explanation":{
																	"type":"string",
																	"title":"textual_explanation"
																},
																"pattern_name":{
																	"type":"string",
																	"title":"pattern_name"
																},
																"pattern":{
																	"type":"string",
																	"title":"pattern"
																},
																"validation_result":{
																	"type":"boolean",
																	"title":"validation_result"
																}
															},
															"title":"why",
															"additionalProperties":false
														}
													},
													"title":"detection",
													"additionalProperties":false
												}
											},
											"additionalProperties":false
										},
										"title":"details"
									},
									"proceed":{
										"type":"boolean",
										"title":"proceed"
									}
								},
								"additionalProperties":false
							},
							"title":"result_batch"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"result_batch":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"original":{
										"type":"string",
										"title":"original"
									},
									"maskedText":{
										"type":"string",
										"title":"maskedText"
									},
									"details":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"entity":{
													"type":"string",
													"title":"entity"
												},
												"original":{
													"type":"object",
													"properties":{
														"text":{
															"type":"string",
															"title":"text"
														},
														"start":{
															"type":"integer",
															"title":"start"
														},
														"end":{
															"type":"integer",
															"title":"end"
														}
													},
													"title":"original",
													"additionalProperties":false
												},
												"mask":{
													"type":"object",
													"properties":{
														"operator":{
															"type":"string",
															"title":"operator"
														},
														"text":{
															"type":"string",
															"title":"text"
														},
														"start":{
															"type":"integer",
															"title":"start"
														},
														"end":{
															"type":"integer",
															"title":"end"
														}
													},
													"title":"mask",
													"additionalProperties":false
												}
											},
											"additionalProperties":false,
											"required":[]
										},
										"title":"details"
									}
								},
								"additionalProperties":false
							},
							"title":"result_batch"
						},
						"regexPatterns":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"Name":{
										"type":"string",
										"title":"Name"
									},
									"behaviour":{
										"type":"string",
										"title":"behaviour"
									},
									"pattern":{
										"type":"string",
										"title":"pattern"
									}
								},
								"additionalProperties":false
							},
							"title":"regexPatterns"
						}
					}
				},
				"code":"// Expect the incoming payload to provide:\n//   - result_batch : List of objects { original, maskedText, details, ... }\n//   - regexPatterns : List of pattern maps { Name, behaviour, pattern }\n\ndef safeGet(varName, defaultVal = null) {\n    try {\n        return this.binding.hasVariable(varName) ? this.binding.getVariable(varName) : defaultVal\n    } catch (e) {\n        return defaultVal\n    }\n}\n\ndef resultBatch = safeGet('result_batch', safeGet('resultBatch', null))\ndef regexPatterns = safeGet('regexPatterns', [])\n\nif (resultBatch == null) {\n    // nothing to do, return empty wrapper\n    return [result_batch: []]\n}\n\n// Helper to process a single item (mutates and returns a new map for that item)\ndef processItem(item, java.util.List patterns) {\n    // Ensure item has expected keys\n    String originalText = item?.original\n    String maskedText = item?.maskedText ?: originalText\n    List existingDetails = item?.details ? new ArrayList(item.details) : []\n    List newDetails = []\n    List maskedRanges = []\n\n    // Build initial maskedRanges from existing details to avoid duplicates/overlap\n    for (d in existingDetails) {\n        if (d?.original?.start != null && d?.original?.end != null) {\n            try {\n                int s = d.original.start as int\n                int e = d.original.end as int\n                if (e > s) {\n                    maskedRanges.add([s, e])\n                }\n            } catch (ignored) { /* skip malformed ranges */ }\n        }\n    }\n\n    boolean proceed = true\n\n    if (patterns == null) {\n        // nothing to apply\n        item.maskedText = maskedText\n        item.details = existingDetails\n        item.proceed = proceed\n        return item\n    }\n\n    // iterate patterns in order\n    for (patternMap in patterns) {\n        def rawPattern = patternMap?.pattern\n        def behavior = patternMap?.behaviour\n        def name = patternMap?.Name ?: patternMap?.name ?: \"UNKNOWN\"\n\n        if (!rawPattern || !behavior) continue\n\n        // convert unescaped '*' shorthand -> \\d+ (optional, keep same logic as before)\n        rawPattern = rawPattern.replaceAll(/(?<!\\\\)\\*/, '\\\\\\\\d+')\n\n        java.util.regex.Pattern compiled\n        try {\n            compiled = java.util.regex.Pattern.compile(\"(?i)${rawPattern}\", java.util.regex.Pattern.CASE_INSENSITIVE | java.util.regex.Pattern.UNICODE_CASE)\n        } catch (Exception e) {\n            // skip invalid regex patterns\n            continue\n        }\n\n        def matcher = compiled.matcher(maskedText) // run on maskedText as requested\n\n        while (matcher.find()) {\n            int start = matcher.start()\n            int end = matcher.end() // exclusive\n\n            if (end <= start) continue // skip zero-length\n\n            // check overlap with already masked ranges (existing + newly added)\n            boolean overlaps = false\n            for (r in maskedRanges) {\n                int r0 = r[0]\n                int r1 = r[1]\n                if (!(end <= r0 || start >= r1)) { // overlap\n                    overlaps = true\n                    break\n                }\n            }\n            if (overlaps) {\n                continue\n            }\n\n            if (behavior == \"mask\") {\n                // matched text according to maskedText; indices align with original if lengths preserved upstream\n                String matchedText = (start < maskedText.length() && end <= maskedText.length()) ? maskedText.substring(start, end) : \"\"\n                // For original text capture, prefer originalText substring if available and same length\n                String originalMatched = null\n                if (originalText != null && originalText.length() == maskedText.length()) {\n                    originalMatched = originalText.substring(start, end)\n                } else {\n                    // fallback to maskedText portion (may contain '*' if previously masked)\n                    originalMatched = matchedText\n                }\n\n                String maskText = \"*\" * (end - start)\n\n                // Apply mask to maskedText so later regexes see the masked value (preserves length)\n                def sb = new StringBuilder(maskedText)\n                sb.replace(start, end, maskText)\n                maskedText = sb.toString()\n\n                // record range to avoid later overlap\n                maskedRanges.add([start, end])\n\n                // Build detail object consistent with your previous shape\n                def detail = [\n                    entity  : name,\n                    original: [\n                        text : originalMatched,\n                        start: start,\n                        end  : end\n                    ],\n                    mask    : [\n                        operator: \"mask\",\n                        text    : maskText,\n                        start   : start,\n                        end     : end\n                    ]\n                ]\n                newDetails << detail\n\n            } else if (behavior == \"block\") {\n                // Preserve previously appended details, update item and stop processing this item\n                proceed = false\n                item.maskedText = maskedText\n                // Append newDetails to existingDetails and set back\n                existingDetails.addAll(newDetails)\n                item.details = existingDetails\n                item.proceed = false\n                return item\n            }\n        } // while matcher.find()\n    } // for patterns\n\n    // Append newDetails to existingDetails\n    existingDetails.addAll(newDetails)\n\n    // update item fields and return\n    item.maskedText = maskedText\n    item.details = existingDetails\n    item.proceed = proceed\n    return item\n}\n\n// Process the whole batch (do not mutate input list elements if you want immutability — we clone)\nList outBatch = []\nfor (origItem in resultBatch) {\n    // clone small map to avoid accidental upstream mutation\n    def itemCopy = [:]\n    if (origItem instanceof Map) {\n        itemCopy.putAll(origItem)\n    } else {\n        itemCopy.original = origItem?.original\n        itemCopy.maskedText = origItem?.maskedText\n        itemCopy.details = origItem?.details\n    }\n    def processed = processItem(itemCopy, regexPatterns)\n    outBatch << processed\n}\n\n// Return same wrapper shape with updated result_batch\nreturn [ result_batch: outBatch ]",
				"compile_static":false,
				"isAsync":false,
				"captureStdOutput":false,
				"parameters":{
					"result_batch":{
						"source":"{{ n_Tatfs.outputs.result_batch }}",
						"ua:type":"mappedArray",
						"items":{
							"details":{
								"source":"{{ n_Tatfs.outputs.result_batch[0].details }}",
								"ua:type":"mappedArray",
								"items":{
									"entity":"{{ n_Tatfs.outputs.result_batch[0].details[0].entity }}",
									"mask":{
										"end":"{{ n_Tatfs.outputs.result_batch[0].details[0].mask.end }}",
										"operator":"{{ n_Tatfs.outputs.result_batch[0].details[0].mask.operator }}",
										"start":"{{ n_Tatfs.outputs.result_batch[0].details[0].mask.start }}",
										"text":"{{ n_Tatfs.outputs.result_batch[0].details[0].mask.text }}"
									},
									"original":{
										"end":"{{ n_Tatfs.outputs.result_batch[0].details[0].original.end }}",
										"start":"{{ n_Tatfs.outputs.result_batch[0].details[0].original.start }}",
										"text":"{{ n_Tatfs.outputs.result_batch[0].details[0].original.text }}"
									}
								}
							},
							"maskedText":"{{ n_Tatfs.outputs.result_batch[0].maskedText }}",
							"original":"{{ n_Tatfs.outputs.result_batch[0].original }}"
						}
					},
					"regexPatterns":{
						"source":"{{ n_ePDTm.outputs.result.regexPatterns }}",
						"ua:type":"mappedArray",
						"items":{
							"Name":"{{ n_ePDTm.outputs.result.regexPatterns[0].name }}",
							"behaviour":"{{ n_ePDTm.outputs.result.regexPatterns[0].behaviour }}",
							"pattern":"{{ n_ePDTm.outputs.result.regexPatterns[0].pattern }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Code By UnifyApps",
			"title":"Execute groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.result.original",
					"root.result.maskedText",
					"root.result.details.source",
					"root.result.details.ua:type",
					"root.result.details.items.entity",
					"root.result.details.items.original.text",
					"root.result.details.items.original.start",
					"root.result.details.items.original.end",
					"root.result.details.items.mask.operator",
					"root.result.details.items.mask.text",
					"root.result.details.items.mask.start",
					"root.result.details.items.mask.end",
					"root.result.proceed",
					"root.result.result_batch.source",
					"root.result.result_batch.ua:type",
					"root.result.result_batch.items.details.source",
					"root.result.result_batch.items.details.ua:type",
					"root.result.result_batch.items.details.items.entity",
					"root.result.result_batch.items.details.items.mask.end",
					"root.result.result_batch.items.details.items.mask.operator",
					"root.result.result_batch.items.details.items.mask.start",
					"root.result.result_batch.items.details.items.mask.text",
					"root.result.result_batch.items.details.items.original.end",
					"root.result.result_batch.items.details.items.original.start",
					"root.result.result_batch.items.details.items.original.text",
					"root.result.result_batch.items.maskedText",
					"root.result.result_batch.items.original",
					"root.result.result_batch.items.proceed"
				]
			},
			"context":{
				"appName":"callables",
				"resourceVersion":430,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_OSBxu-1",
			"id":"aTGC4",
			"index":4,
			"inputs":{
				"result":{
					"result_batch":{
						"source":"{{ urVzy.outputs.result.result_batch }}",
						"ua:type":"mappedArray",
						"items":{
							"details":{
								"source":"{{ urVzy.outputs.result.result_batch[0].details }}",
								"ua:type":"mappedArray",
								"items":{
									"entity":"{{ urVzy.outputs.result.result_batch[0].details[0].entity }}",
									"mask":{
										"end":"{{ urVzy.outputs.result.result_batch[0].details[0].mask.end }}",
										"operator":"{{ urVzy.outputs.result.result_batch[0].details[0].mask.operator }}",
										"start":"{{ urVzy.outputs.result.result_batch[0].details[0].mask.start }}",
										"text":"{{ urVzy.outputs.result.result_batch[0].details[0].mask.text }}"
									},
									"original":{
										"end":"{{ urVzy.outputs.result.result_batch[0].details[0].original.end }}",
										"start":"{{ urVzy.outputs.result.result_batch[0].details[0].original.start }}",
										"text":"{{ urVzy.outputs.result.result_batch[0].details[0].original.text }}"
									}
								}
							},
							"maskedText":"{{ urVzy.outputs.result.result_batch[0].maskedText }}",
							"original":"{{ urVzy.outputs.result.result_batch[0].original }}",
							"proceed":"{{ urVzy.outputs.result.result_batch[0].proceed }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":39717,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"tags":[
		
	],
	"version":25
}