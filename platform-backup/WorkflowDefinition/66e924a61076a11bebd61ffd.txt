{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1726555302575,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296211185,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd13672fcc41fb70f121",
		"status":"DEPLOYED",
		"version":143,
		"workflowVersion":247
	},
	"edges":[
		{
			"fromNodeId":"4aY8o",
			"priority":0,
			"skip":false,
			"toNodeId":"g3nhk",
			"type":"next"
		},
		{
			"fromNodeId":"g3nhk",
			"priority":0,
			"skip":false,
			"toNodeId":"t0fRN",
			"type":"next"
		},
		{
			"fromNodeId":"t0fRN",
			"priority":0,
			"skip":false,
			"toNodeId":"RGQNC",
			"type":"next"
		},
		{
			"fromNodeId":"RGQNC",
			"priority":0,
			"skip":false,
			"toNodeId":"tAEpY",
			"type":"next"
		},
		{
			"fromNodeId":"tAEpY",
			"priority":0,
			"skip":false,
			"toNodeId":"mPTc7",
			"type":"next"
		},
		{
			"fromNodeId":"mPTc7",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"lLa7t",
			"type":"if"
		},
		{
			"fromNodeId":"lLa7t",
			"priority":0,
			"skip":false,
			"toNodeId":"vlCqy",
			"type":"next"
		},
		{
			"fromNodeId":"mPTc7",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"nYsLB",
			"type":"next"
		},
		{
			"fromNodeId":"nYsLB",
			"priority":0,
			"skip":false,
			"toNodeId":"_o3KJS",
			"type":"next"
		},
		{
			"fromNodeId":"_o3KJS",
			"priority":0,
			"skip":false,
			"toNodeId":"5T4vA",
			"type":"next"
		},
		{
			"fromNodeId":"vlCqy",
			"priority":0,
			"skip":false,
			"toNodeId":"nab9H",
			"type":"next"
		},
		{
			"fromNodeId":"5T4vA",
			"priority":0,
			"skip":false,
			"toNodeId":"nab9H",
			"type":"next"
		},
		{
			"fromNodeId":"nab9H",
			"priority":0,
			"skip":false,
			"toNodeId":"UYyLh",
			"type":"next"
		},
		{
			"fromNodeId":"UYyLh",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"oIQqv",
			"type":"if"
		},
		{
			"fromNodeId":"oIQqv",
			"priority":0,
			"skip":false,
			"toNodeId":"rzyDK",
			"type":"next"
		},
		{
			"fromNodeId":"UYyLh",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"rzyDK",
			"type":"next"
		},
		{
			"fromNodeId":"rzyDK",
			"priority":0,
			"skip":false,
			"toNodeId":"7Wybs",
			"type":"next"
		},
		{
			"fromNodeId":"7Wybs",
			"priority":0,
			"skip":false,
			"toNodeId":"xHDZ6",
			"type":"next"
		},
		{
			"fromNodeId":"xHDZ6",
			"priority":0,
			"skip":false,
			"toNodeId":"NvpiO",
			"type":"next"
		},
		{
			"fromNodeId":"NvpiO",
			"priority":0,
			"skip":false,
			"toNodeId":"HrQdA",
			"type":"next"
		},
		{
			"fromNodeId":"HrQdA",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"lfTSn",
			"type":"if"
		},
		{
			"fromNodeId":"lfTSn",
			"priority":0,
			"skip":false,
			"toNodeId":"_WnP5q",
			"type":"next"
		},
		{
			"fromNodeId":"HrQdA",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_WnP5q",
			"type":"next"
		},
		{
			"fromNodeId":"_WnP5q",
			"priority":0,
			"skip":false,
			"toNodeId":"iAxnM",
			"type":"next"
		},
		{
			"fromNodeId":"iAxnM",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"C28ze",
			"type":"if"
		},
		{
			"fromNodeId":"C28ze",
			"priority":0,
			"skip":false,
			"toNodeId":"ZzD2Q",
			"type":"next"
		},
		{
			"fromNodeId":"ZzD2Q",
			"priority":0,
			"skip":false,
			"toNodeId":"2SO8f",
			"type":"next"
		},
		{
			"fromNodeId":"iAxnM",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"2SO8f",
			"type":"next"
		},
		{
			"fromNodeId":"2SO8f",
			"priority":0,
			"skip":false,
			"toNodeId":"sMdDO",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"66e924a61076a11bebd61ffd",
	"lastModifiedBy":0,
	"lcName":"observability | traces of message",
	"modifiedTime":1761722746275,
	"name":"Observability | Traces of Message",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":52,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"4aY8o",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"response":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"color":{
										"type":"string",
										"title":"color"
									},
									"stages":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"payload":{
													"type":"object",
													"properties":{
														"type":{
															"type":"string",
															"title":"type"
														},
														"content":{
															"type":"object",
															"title":"content"
														}
													},
													"title":"payload",
													"additionalProperties":false
												},
												"id":{
													"type":"string",
													"title":"id"
												},
												"time":{
													"type":"integer",
													"title":"time"
												},
												"title":{
													"type":"string",
													"title":"title"
												},
												"status":{
													"type":"string",
													"title":"status"
												},
												"workflowVariableId":{
													"type":"string",
													"title":"Workflow Variable Id"
												}
											},
											"additionalProperties":false,
											"required":[]
										},
										"title":"stages"
									},
									"id":{
										"type":"string",
										"title":"id"
									},
									"time":{
										"type":"integer",
										"title":"time"
									},
									"title":{
										"type":"string",
										"title":"title"
									},
									"status":{
										"type":"string",
										"title":"status"
									}
								},
								"additionalProperties":false
							},
							"title":"response"
						}
					},
					"additionalProperties":false
				},
				"setup":{
					"type":"object",
					"properties":{
						"messageId":{
							"type":"string",
							"title":"Message Id"
						},
						"agentId":{
							"type":"string",
							"title":"Agent Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger from automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":41,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"g3nhk",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"observabilityChangesEnabled":{
							"type":"boolean",
							"title":"Observability Changes Enabled"
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"observabilityChangesEnabled":true
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"observabilityChangesEnabled":{
							"type":"boolean",
							"title":"Observability Changes Enabled"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"changesEnabled",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":54,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"t0fRN",
			"index":0,
			"inputs":{
				"automationId":"67993c3c7a3b5b63f1420164",
				"runtimeConnections":{},
				"synchronous":true,
				"triggerWorkflowWithRuntimeType":"DEFAULT",
				"version":"-1",
				"parameters":{
					"workflowId":"66966960e8797a59f4a46292",
					"aiAgentId":"{{ 4aY8o.outputs.agentId }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"timeToLive":"60",
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2041,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"RGQNC",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ 4aY8o.outputs.messageId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_message",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"page":{
					"limit":20,
					"offset":0
				},
				"numberOfRecordsToFetch":"SINGLE",
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Fetch Bot Message",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":492,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"tAEpY",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"startTime":{
							"type":"integer",
							"title":"Start Time"
						},
						"endTime":{
							"type":"integer",
							"title":"End Time"
						},
						"messageId":{
							"type":"string",
							"title":"Message Id"
						}
					},
					"required":[]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"startTime":{
							"type":"integer",
							"title":"Start Time"
						},
						"endTime":{
							"type":"integer",
							"title":"End Time"
						},
						"messageId":{
							"type":"string",
							"title":"Message Id"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":400,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"mPTc7",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ RGQNC.outputs.properties.type }}",
						"filter":{
							"operator":"EQUAL",
							"value":"fan"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2415,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mPTc7@fenGp-1@y",
			"id":"lLa7t",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_caseId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ RGQNC.outputs.properties.caseId }}"
							}
						},
						{
							"property":"cTm",
							"filter":{
								"operator":"GT",
								"value":"{{ RGQNC.outputs.createdTime }}"
							}
						},
						{
							"property":"properties_type",
							"filter":{
								"operator":"EQUAL",
								"value":"bot"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_message",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"sortBy":[
					{
						"field":"cTm",
						"order":"ASC"
					}
				],
				"page":{
					"paginateBy":"OFFSET",
					"limit":20
				},
				"numberOfRecordsToFetch":"SINGLE",
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":426,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mPTc7@fenGp-1@y",
			"id":"vlCqy",
			"index":0,
			"inputs":{
				"variables":[
					{
						"source":"{{ tAEpY.outputs.startTime }}",
						"value":"{{ RGQNC.outputs.createdTime }}"
					},
					{
						"source":"{{ tAEpY.outputs.endTime }}",
						"value":"{{ lLa7t.outputs.createdTime }}"
					},
					{
						"source":"{{ tAEpY.outputs.messageId }}",
						"value":"{{ RGQNC.outputs.id }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.searchField.fields.items",
					"root.sortBy.items.field",
					"root.sortBy.items.order"
				]
			},
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2041,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mPTc7@fenGp-1@n",
			"id":"nYsLB",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"cTm",
							"filter":{
								"operator":"LT",
								"value":"{{ RGQNC.outputs.createdTime }}"
							}
						},
						{
							"property":"properties_caseId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ RGQNC.outputs.properties.caseId }}"
							}
						},
						{
							"property":"properties_type",
							"filter":{
								"operator":"EQUAL",
								"value":"fan"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_message",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"sortBy":[
					{
						"order":"DESC",
						"field":"cTm"
					}
				],
				"page":{
					"limit":20,
					"offset":0
				},
				"numberOfRecordsToFetch":"SINGLE",
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Fetch Fan Message",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.searchField.fields.items",
					"root.sortBy.items.field",
					"root.sortBy.items.order"
				]
			},
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2041,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mPTc7@fenGp-1@n",
			"id":"_o3KJS",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"cTm",
							"filter":{
								"operator":"LT",
								"value":"{{ RGQNC.outputs.createdTime }}"
							}
						},
						{
							"property":"properties_caseId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ RGQNC.outputs.properties.caseId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_message",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"sortBy":[
					{
						"order":"DESC",
						"field":"cTm"
					}
				],
				"page":{
					"limit":20,
					"offset":0
				},
				"numberOfRecordsToFetch":"SINGLE",
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Fetch Previous Message",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":426,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mPTc7@fenGp-1@n",
			"id":"5T4vA",
			"index":0,
			"inputs":{
				"variables":[
					{
						"source":"{{ tAEpY.outputs.startTime }}",
						"value":"{{ nYsLB.outputs.createdTime }}"
					},
					{
						"source":"{{ tAEpY.outputs.endTime }}",
						"value":"{{ RGQNC.outputs.createdTime }}"
					},
					{
						"source":"{{ tAEpY.outputs.messageId }}",
						"value":"{{ nYsLB.outputs.id }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"analytics_by_unifyapps",
				"resourceVersion":70,
				"resourceName":"analytics_by_unifyapps_query_reports",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"nab9H",
			"index":0,
			"inputs":{
				"projections":[
					{
						"aggregationFunction":"GROUP",
						"includePercentageChange":false,
						"name":"CASE_ID",
						"alias":"caseId"
					},
					{
						"aggregationFunction":"GROUP",
						"includePercentageChange":false,
						"name":"MESSAGE_ID",
						"alias":"messageId"
					},
					{
						"aggregationFunction":"GROUP",
						"includePercentageChange":false,
						"alias":"aiAgentId",
						"name":"AI_AGENT_ID"
					},
					{
						"aggregationFunction":"GROUP",
						"includePercentageChange":false,
						"name":"ID",
						"alias":"executionId"
					},
					{
						"aggregationFunction":"GROUP",
						"includePercentageChange":false,
						"name":"START_TIME",
						"alias":"startTime"
					},
					{
						"aggregationFunction":"GROUP",
						"includePercentageChange":false,
						"name":"END_TIME",
						"alias":"endTime"
					},
					{
						"aggregationFunction":"GROUP",
						"includePercentageChange":false,
						"name":"ROOT_EXECUTION_INSTANCE_ID",
						"alias":"rootExecutionInstanceId"
					}
				],
				"filter":{
					"filters":[
						{
							"property":"WORKFLOW_ID",
							"filter":{
								"operator":"EQUAL",
								"value":"66966960e8797a59f4a46292"
							}
						},
						{
							"property":"MESSAGE_ID",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ tAEpY.outputs.messageId }}"
							}
						}
					],
					"operator":"AND"
				},
				"entityType":"WORKFLOW_EXECUTION",
				"page":{
					"offset":0,
					"limit":1
				},
				"sorts":[
					{
						"field":"startTime",
						"order":"ASC"
					}
				],
				"timeFilter":{
					"since":"{{ tAEpY.outputs.startTime }}",
					"until":"{{ tAEpY.outputs.endTime }}"
				},
				"group":"PLATFORM"
			},
			"skip":false,
			"subTitle":"Analytics by UnifyApps",
			"title":"Analytics Query",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":50,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"UYyLh",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ nab9H.outputs.objects }})",
						"filter":{
							"operator":"LT",
							"value":"1"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":48,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"UYyLh@fenGp-1@y",
			"id":"oIQqv",
			"index":0,
			"inputs":{
				"result":{
					"totalSessions":10
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.nodeIds.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":58,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"rzyDK",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"sqlQuery":{
							"type":"string",
							"title":"Sql Query"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"startTime":{
							"type":"integer",
							"title":"Start Time"
						},
						"endTime":{
							"type":"integer",
							"title":"End Time"
						},
						"messageId":{
							"type":"string",
							"title":"Message Id"
						},
						"nodeIds":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Node Ids"
						},
						"rootExecutionStartTime":{
							"type":"integer",
							"title":"Root Ex"
						},
						"caseId":{
							"type":"string",
							"title":"Case Id"
						}
					},
					"additionalProperties":false,
					"required":[
						"caseId"
					]
				},
				"compile_static":false,
				"code":"import java.time.*\n\ndef generateSqlQuery(startTime, endTime, messageId, nodeIds, startDate, endDate, caseId) {\n    // Join nodeIds into a single string with quotes and commas\n    def nodeIdsList = nodeIds.collect { \"'$it'\" }.join(',')\n\n    // Define the SQL query with dynamic parameters in a single line\n    def sqlQuery = \"SELECT nodeId, entryTime, exitTime, timeTaken, payload, COUNT(*) FROM (SELECT wne.currentNodeId AS nodeId, wne.entryTime AS entryTime, wne.exitTime AS exitTime, (wne.exitTime - wne.entryTime) AS timeTaken, CAST(wne.outputs AS STRING) AS payload FROM WORKFLOW_NODE_EXECUTION wne JOIN WORKFLOW_EXECUTION we ON (wne.executionInstanceId = we.id OR wne.rootExecutionInstanceId = we.id OR wne.parentExecutionInstanceId = we.id OR wne.rootExecutionInstanceId=we.rootExecutionInstanceId) WHERE ((we.workflowId = '671150a90668236b2161c708' AND we.startTime BETWEEN \" + startTime + \" AND \" + endTime + \" AND we.caseId = '\"+ caseId +\"' ) OR (we.workflowId = '67850d225384a9541846f5b9' AND we.startTime BETWEEN \" + startTime + \" AND \" + endTime + \" AND we.caseId = '\"+ caseId +\"' )  OR we.messageId = '\" + messageId + \"') AND wne.entryTime BETWEEN \" + startTime + \" AND \" + endTime + \" AND we.startTime BETWEEN \" + startTime + \" AND \" + endTime + \" AND currentNodeId IN (\" + nodeIdsList + \") AND wne.entryTime IS NOT NULL AND wne.exitTime IS NOT NULL) AS AB GROUP BY nodeId, timeTaken, payload, entryTime, exitTime ORDER BY entryTime ASC;\"\n\n    return sqlQuery\n}\n\n// Example usage\n// def startTime = 1726511400000\n// def endTime = 1726597799999\n// def messageId = \"e_66e96f6734f7b23ffb3f2714\"\n// def nodeIds = [\"KH5aG\", \"I8vCn\", \"gB2z2\", \"j4UdH\", \"iQt45\", \"ei5Cp\", \"JbGgg\", \"L2YXQ\", \"OsR8e\", \"DrQze\", \"NtqR7\", \"y3suF\", \"4Jq1e\"]\n\n\n// def getStartAndEndOfDayUTC(long epochMillis) {\n//     // Convert epoch millis to Instant\n//     Instant instant = Instant.ofEpochMilli(epochMillis)\n\n//     // Convert to UTC ZonedDateTime\n//     ZonedDateTime utcDateTime = instant.atZone(ZoneOffset.UTC)\n\n//     // Get start of day\n//     ZonedDateTime startOfDay = utcDateTime.toLocalDate().atStartOfDay(ZoneOffset.UTC)\n\n//     // Get end of day (start of next day minus 1 nanosecond)\n//     ZonedDateTime endOfDay = startOfDay.plusDays(1).minusNanos(1)\n\n//     // Convert back to epoch millis\n//     long startOfDayEpochMillis = startOfDay.toInstant().toEpochMilli()\n//     long endOfDayEpochMillis = endOfDay.toInstant().toEpochMilli()\n\n//     return [startOfDayEpochMillis, endOfDayEpochMillis]\n// }\n\n// def (startOfDay, endOfDay) = getStartAndEndOfDayUTC(startTime)\n\n\ndef sqlQuery = generateSqlQuery(startTime, endTime, messageId, nodeIds.collect{it.nodeId}, \"\", \"\", caseId)\nreturn [\"sqlQuery\": sqlQuery];\n",
				"isAsync":false,
				"parameters":{
					"nodeIds":{
						"source":"{{ t0fRN.outputs.nodes }}",
						"ua:type":"mappedArray",
						"items":"{{ t0fRN.outputs.nodes[0] }}"
					},
					"caseId":"{{ RGQNC.outputs.properties.caseId }}",
					"startTime":"{{ tAEpY.outputs.startTime }}",
					"endTime":"{{ tAEpY.outputs.endTime }}",
					"messageId":"{{ tAEpY.outputs.messageId }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"analytics_by_unifyapps",
				"resourceVersion":18,
				"resourceName":"analytics_by_unifyapps_execute_query",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"7Wybs",
			"index":0,
			"inputs":{
				"outputSchema":{
					"type":"object",
					"properties":{
						"columns":{
							"type":"object",
							"properties":{
								"entryTime":{
									"type":"integer",
									"title":"entryTime"
								},
								"exitTime":{
									"type":"integer",
									"title":"exitTime"
								},
								"payload":{
									"type":"string",
									"title":"payload"
								},
								"count(*)":{
									"type":"integer",
									"title":"count(*)"
								},
								"id":{
									"type":"string",
									"title":"id"
								},
								"nodeId":{
									"type":"string",
									"title":"nodeId"
								}
							},
							"title":"columns",
							"additionalProperties":false,
							"required":[]
						}
					},
					"additionalProperties":false
				},
				"query":"{{ rzyDK.outputs.result.sqlQuery }}",
				"group":"PLATFORM"
			},
			"skip":false,
			"subTitle":"Analytics by UnifyApps",
			"title":"Execute Analytics SQL Query",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2041,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"xHDZ6",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ tAEpY.outputs.messageId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"service_hub_user_feedback",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"page":{
					"limit":20,
					"offset":0
				},
				"numberOfRecordsToFetch":"SINGLE",
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":120,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"NvpiO",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"feedback":{
							"type":"object",
							"properties":{
								"reaction":{
									"type":"string",
									"title":"Reaction"
								},
								"feedbackCategories":{
									"type":"string",
									"title":"Feedback Categories"
								},
								"userFeedback":{
									"type":"string",
									"title":"User Feedback"
								}
							},
							"additionalProperties":false,
							"title":"Feedback",
							"required":[]
						}
					},
					"required":[]
				}
			},
			"inputs":{
				"feedback":{
					"reaction":"skipped"
				}
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"feedback":{
							"type":"object",
							"properties":{
								"reaction":{
									"type":"string",
									"title":"Reaction"
								},
								"feedbackCategories":{
									"type":"string",
									"title":"Feedback Categories"
								},
								"userFeedback":{
									"type":"string",
									"title":"User Feedback"
								}
							},
							"additionalProperties":false,
							"title":"Feedback",
							"required":[]
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":50,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"HrQdA",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ xHDZ6.outputs.properties.reaction }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":62,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"HrQdA@fenGp-1@y",
			"id":"lfTSn",
			"index":0,
			"inputs":{
				"variables":[
					{
						"source":"{{ NvpiO.outputs.feedback }}",
						"value":{
							"reaction":"{{ xHDZ6.outputs.properties.reaction }}",
							"feedbackCategories":"{{ xHDZ6.outputs.properties.feedbackCategories }}",
							"userFeedback":"{{ xHDZ6.outputs.properties.userFeedback }}"
						}
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":10,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"_WnP5q",
			"index":0,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_aiAgentId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ 4aY8o.outputs.agentId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"knowledge",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"page":{
					"paginateBy":"OFFSET",
					"limit":20
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":41,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"iAxnM",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ g3nhk.outputs.observabilityChangesEnabled }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.objects.items",
					"root.parameters.nodes.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":58,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"iAxnM@fenGp-1@y",
			"id":"C28ze",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"response":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"color":{
										"type":"string",
										"title":"color"
									},
									"stages":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"payload":{
													"type":"object",
													"properties":{
														"type":{
															"type":"string",
															"title":"type"
														},
														"content":{
															"type":"object",
															"title":"content"
														}
													},
													"title":"payload",
													"additionalProperties":false
												},
												"id":{
													"type":"string",
													"title":"id"
												},
												"time":{
													"type":"integer",
													"title":"time"
												},
												"title":{
													"type":"string",
													"title":"title"
												},
												"status":{
													"type":"string",
													"title":"status"
												},
												"workflowVariableId":{
													"type":"string",
													"title":"Workflow Variable Id"
												}
											},
											"additionalProperties":false,
											"required":[]
										},
										"title":"stages"
									},
									"id":{
										"type":"string",
										"title":"id"
									},
									"time":{
										"type":"integer",
										"title":"time"
									},
									"title":{
										"type":"string",
										"title":"title"
									},
									"status":{
										"type":"string",
										"title":"status"
									}
								},
								"additionalProperties":false
							},
							"title":"response"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"objects":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Objects"
						},
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Nodes"
						},
						"feedback":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Feedback"
						},
						"knowledges":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Knowledges"
						}
					},
					"additionalProperties":false,
					"required":[
						"knowledges"
					]
				},
				"compile_static":false,
				"code":"import com.fasterxml.jackson.databind.ObjectMapper\n\nimport java.math.RoundingMode\n// import groovy.json.JsonSlurper\n// import groovy.json.JsonOutput\n// def jsonSlurper = new JsonSlurper()\n\nclass WorkflowProcessor {\n    private final ObjectMapper mapper = new ObjectMapper()\n    private final Map<String, String[]> knowledgeIdVsNameAndType = new HashMap<>();\n\n    public WorkflowProcessor(List knowledges) {\n        knowledges.each { knowledge ->\n            knowledgeIdVsNameAndType.put(knowledge.id, [knowledge.properties.name, knowledge.properties.sourceType])\n        }\n    }\n\n    def processWorkflow(List objects, List nodes, Map feedback) {\n        try {\n            def nodeMap = nodes.collectEntries { [it.nodeId, it] }\n            def nodeMapByCategory = nodes.findAll { it.isParent }.collectEntries { [(it.category): it] }\n            def result = []\n            def currentCategoryName = null;\n            def currentCategory = null;\n            for(nodeResult in objects) {\n                def node = nodeMap[nodeResult.nodeId]\n                if (currentCategory != null && node.category != currentCategoryName) {\n                    // category switch\n                    if (currentCategory.time == null) {\n                        currentCategory.put(\"time\", currentCategory.stages*.timeTaken.sum())\n                    }\n                    result.add(deepCopyMap(currentCategory))\n                    currentCategory = null;\n                }\n\n                if (currentCategory == null) {\n                    //new or changed category\n                    currentCategory = [:]\n                    currentCategory.stages = []\n                    def categoryNode = nodeMapByCategory.get(node.category)\n                    currentCategory << [\"title\": categoryNode.title, \"id\": categoryNode.nodeId, \"category\": categoryNode.category]\n                    currentCategoryName = categoryNode.category\n                }\n                def stages = processNode(nodeResult.nodeId, nodeResult.payload, nodeMap)\n                for (def stage in stages) {\n                    if (stage != null) {\n                        stage.put(\"timeTaken\", nodeResult.exitTime - nodeResult.entryTime)\n                        if (stage.title == null) {\n                            stage.title = node.title\n                        }\n                        stage.id = node.nodeId + stage.title\n                        stage.workflowVariableId = nodeResult.id\n                    }\n                    if (node.isParent) {\n                        currentCategory << [\"time\": nodeResult.exitTime - nodeResult.entryTime]\n                        if (stage != null) {\n                            currentCategory << [\"fallbackStage\": stage]\n                        }\n                    } else {\n                        if (stage != null) {\n                            currentCategory.stages << stage\n                        }\n                    }\n                }\n            }\n            if(currentCategory != null) {\n                if(currentCategory.time == null) {\n                    currentCategory.put(\"time\", currentCategory.stages*.timeTaken.sum())\n                }\n                result.add(deepCopyMap(currentCategory))\n            }\n\n            // println(JsonOutput.toJson(result.getClass().getSimpleName()))\n            return [response: formatFinalResult(result, feedback)]\n        } catch (IOException e) {\n            return [\n                    output   : [\n                            errorCode: -1,\n                            errorId  : UUID.randomUUID().toString(),\n                            message  : e.message\n                    ],\n                    errorCode: -1,\n                    errorId  : UUID.randomUUID().toString(),\n                    message  : \"Workflow execution failed\"\n            ]\n        }\n    }\n\n    private def processNode(String nodeId, String payload, Map<String, Map> nodeMap) {\n        def node = nodeMap[nodeId]\n        if (!node) return null\n        def payloadFormat = node.payloadFormat\n        switch (payloadFormat) {\n            case \"contentFilters\": return processContentFilters(payload)\n            case \"deniedTopics\": return processDeniedTopics(payload)\n            case \"customWordFilters\": return processCustomWordFilters(payload)\n            case \"redactSensitiveInformation\": return processRedactSensitiveInfo(payload)\n            case \"rephrasedQuery\": return processRephrasedQuery(payload)\n            case \"userIntentDetection\": return processUserIntentDetection(payload)\n            case \"chunkRetrieval\": return processChunkRetrieval(payload)\n            case \"chunkReranker\": return processChunkReranker(payload)\n            case \"responseGeneration\": return processResponseGeneration(payload)\n            case \"groundedness\": return processGroundednessScore(payload)\n            case \"detailedTaskExecution\":\n            case \"toolInput\":\n                return processDetailedTaskExecution(payload)\n            case \"toolOutput\":\n                return processGenericAction(payload, \"Tool Output\")\n            case \"taskExecution\":\n                def payloadMap = mapper.readValue(payload, Map)\n                if (payloadMap?.llmResponse) {\n                    return processGenericAction(payloadMap?.llmResponse, \"Task Execution\")\n                } else if (payloadMap?.output) {\n                    return processGenericAction(payloadMap.output, \"Task Execution\")\n                }\n                return processGenericAction(response, \"Task Execution\")\n            default: return null\n        }\n    }\n\n    private def processContentFilters(payload) {\n        def stages = []\n        Map<String, Object> rs = mapper.readValue(payload, Map)\n        def withinThreshold = rs?.withinThreshold ?: false\n        def contentFiltersObj = rs?.contentFilters\n\n        if (contentFiltersObj) {\n            contentFiltersObj.each { key, value ->\n                if (value instanceof Number) {\n                    BigDecimal bd = new BigDecimal(value.toString())\n                    contentFiltersObj[key] = bd.setScale(8, RoundingMode.DOWN).toPlainString()\n                }\n            }\n        }\n        stages << [\n                status : withinThreshold ? \"COMPLETED\" : \"FAILED\",\n                payload: [\n                        type   : 'JSON',\n                        content: contentFiltersObj\n                ]\n        ]\n        return  stages;\n    }\n\n    private def processDeniedTopics(payload) {\n        def stages = []\n        def deniedTopics = mapper.readValue(payload, Map)\n        def noDeniedTopics = deniedTopics.denial_topic_exist == \"false\" || deniedTopics.denial_topic_exist == false\n        def tmp = ''\n        stages <<  [\n                status : noDeniedTopics ? \"COMPLETED\" : \"FAILED\",\n                payload: [\n                        type   : 'TEXT',\n                        content: noDeniedTopics ?\n                                \"No denied topics detected in the query\" :\n                                \"Detected denied topics in the query \" + (deniedTopics.denial_reason ?: tmp)\n                ]\n        ]\n        return stages;\n    }\n\n    private def processCustomWordFilters(payload) {\n        def stages = []\n        def customFilters = mapper.readValue(payload, Map)\n        def content = [\n                title : \"Filtered Query\",\n                result: customFilters.block == false ?\n                        \"No custom word filters removed\" :\n                        \"Custom word filters detected: \" + customFilters.filtered_answer.toString()\n        ]\n\n        if (!customFilters.block) {\n            content.query = customFilters.filtered_answer\n        }\n        stages << [\n                status : customFilters.block == false ? \"COMPLETED\" : \"FAILED\",\n                payload: [\n                        type   : 'QUERY',\n                        content: content\n                ]\n        ]\n        return  stages\n    }\n\n    private def processRedactSensitiveInfo(payload) {\n        def stages=[]\n        def redactInfo = mapper.readValue(payload, Map)\n        def content = [\n                title : \"Processed Query\",\n                result: redactInfo.block == false ?\n                        \"No sensitive information redacted\" :\n                        \"Sensitive information detected: \" + redactInfo.processed_answer.toString()\n        ]\n\n        if (redactInfo.block == false) {\n            content.query = redactInfo.processed_answer\n        }\n        stages << [\n                status : redactInfo.block == false ? \"COMPLETED\" : \"FAILED\",\n                payload: [\n                        type   : 'QUERY',\n                        content: content\n                ]\n        ]\n        return  stages\n    }\n\n    private def processRephrasedQuery(payload) {\n        def stages = []\n        def rephrasedQuery = mapper.readValue(payload, Map)\n        stages << [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'TEXT',\n                        content: rephrasedQuery.chit_chat == true ? rephrasedQuery.reply : rephrasedQuery.rephrased_user_message\n                ]\n        ]\n        return stages\n    }\n\n    private def processUserIntentDetection(payload) {\n        def stages = []\n        def rs = mapper.readValue(payload, Map)\n        stages << [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'TEXT',\n                        content: rs.queryType\n                ]\n        ]\n        return stages;\n    }\n\n    private def processChunkRetrieval(payload) {\n        def stages = []\n        def jsonPayload = mapper.readValue(payload, Map)\n        def chunks = jsonPayload.objects\n        stages << [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'TABLE',\n                        content: [\n                                columns: [\n                                        [header: 'Knowledge', accessorKey: 'knowledge'],\n                                        [header: 'Knowledge Type', accessorKey: 'knowledgeType'],\n                                        [header: 'Content', accessorKey: 'content'],\n                                        [header: 'Source', accessorKey: 'source']\n                                ],\n                                data   : chunks.collect { chunk ->\n                                    [\n                                            knowledge: knowledgeIdVsNameAndType[chunk.document.properties.knowledgeId]?.get(0),\n                                            knowledgeType: knowledgeIdVsNameAndType[chunk.document.properties.knowledgeId]?.get(1),\n                                            content: truncateChunkContent(chunk.document.properties.text),\n                                            source: (chunk.document.properties.chunkMetadata?.websiteUrl ?:\n                                                    (chunk.document.properties.chunkMetadata?.referenceUrl ?:\n                                                            chunk.document.properties.chunkMetadata?.webViewUrl ?:\n                                                                    chunk.document.properties.chunkMetadata?.name))\n                                    ]\n                                }\n                        ]\n                ]\n        ]\n        return stages\n    }\n\n    private def processChunkReranker(payload) {\n        def stages = []\n        def jsonPayload = mapper.readValue(payload, Map)\n        def rerankedChunks = jsonPayload.chunks\n        stages << [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'TABLE',\n                        content: [\n                                columns: [\n                                        [header: 'Content', accessorKey: 'content'],\n                                        [header: 'Source', accessorKey: 'source'],\n                                        [header: 'Score', accessorKey: 'score']\n                                ],\n                                data   : rerankedChunks.collect { chunk ->\n                                    [\n                                            content: truncateChunkContent(chunk.content),\n                                            source: (chunk.chunkMetadata.websiteUrl ?:\n                                                    (chunk.chunkMetadata.referenceUrl ?:\n                                                            chunk.chunkMetadata.webViewUrl ?:\n                                                                    chunk.chunkMetadata.name)),\n                                            score : chunk.score\n                                    ]\n                                }\n                        ]\n                ]\n        ]\n        return stages\n    }\n\n    private def truncateChunkContent(content) {\n        if (content.length() > 300) {\n            return content.substring(0, 300) + \"...\"\n        }\n        return content\n    }\n\n    private def processResponseGeneration(payload) {\n        def stages = []\n        def response = mapper.readValue(payload, Map)\n        stages << [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'RESPONSE',\n                        content: response.response\n                ]\n        ]\n        return stages\n    }\n\n    private def processGroundednessScore(payload) {\n        def stages = []\n        def groundednessScore = mapper.readValue(payload, Map)\n        stages << [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'JSON',\n                        content: groundednessScore\n                ]\n        ]\n        return stages\n    }\n\n    private def processDetailedTaskExecution(payload) {\n//\n//        {\n//            \"publishThought\": true,\n//            \"thought\": \"Perfecto, hemos configurado los permisos para el primer archivo. Ahora hagamos lo mismo para el segundo archivo.\",\n//            \"toolId\": \"e_67dbbd9c88798139dbb97345\",\n//            \"toolInputs\": {\n//            \"fileId\": \"1lWa9tY7P7gb6pUCA9nsTQNhpCR56cx7ErhbmHgXorrg\",\n//            \"role\": \"reader\",\n//            \"type\": \"anyone\"\n//        },\n//            \"toolName\": \"add_permission_to_a_file_via_google_drive\"\n//        }\n\n\n        def stages = []\n        def llmOutput = mapper.readValue(payload, Map)\n        def thought = llmOutput.get(\"thought\")\n        def publishThought = llmOutput.get(\"publishThought\")\n        def toolName = llmOutput.get(\"toolName\")\n        def finalAnswer = llmOutput.get(\"finalAnswer\")\n        def toolInputs = llmOutput.get(\"result\")?.get(\"inputs\")\n        if(toolInputs == null) {\n            def toolId = llmOutput.get(\"toolId\")\n            if (toolId != null && !toolId.isEmpty()) {\n                def systemTools = [\"SetTopic\", \"SwitchTopic\", \"Clarify\", \"InvokeAgent\", \"ReferFromKnowledge\", \"PublishCitations\", \"CollectSlot\", \"WebSearch\", \"IngestKnowledge\"]\n                def systemToolStartsWith = \"lookup\"\n                if (systemTools.contains(toolId) || toolId.startsWith(systemToolStartsWith)) {\n                    toolInputs = llmOutput.get(\"toolInputs\")\n                }\n\n            }\n        }\n        def toolOutputError = llmOutput.get(\"error\")\n\n        if(publishThought && thought != null && !thought.isEmpty()) {\n            stages << [\n\n                    status : \"COMPLETED\",\n                    title: \"Thought\",\n                    payload: [\n                            type   : 'RESPONSE',\n                            content: thought\n                    ]\n            ]\n        }\n\n        if(finalAnswer != null && !finalAnswer.isEmpty()) {\n            stages << [\n\n                    status : \"COMPLETED\",\n                    title: \"Final Response\",\n                    payload: [\n                            type   : 'RESPONSE',\n                            content: finalAnswer\n                    ]\n            ]\n        }\n\n        if(toolName != null) {\n            stages << [\n\n                    status : \"COMPLETED\",\n                    title: \"Tool Execution\",\n                    payload: [\n                            type   : 'RESPONSE',\n                            content: toolName\n                    ]\n            ]\n        }\n\n        if(toolInputs != null) {\n            stages << [\n\n                    status : \"COMPLETED\",\n                    title: \"Tool Inputs\",\n                    payload: [\n                            type   : 'JSON',\n                            content: toolInputs\n                    ]\n            ]\n        }\n\n\n\n        return stages;\n    }\n\n    private def processGenericAction(payload, title) {\n        return [[\n                        status : \"COMPLETED\",\n                        title  : title,\n                        payload: [\n                                type   : 'RESPONSE',\n                                content: payload\n                        ]\n                ]]\n    }\n\n\n    private def formatFinalResult(result, feedback) {\n        def finalResult = [];\n        result.each{data ->\n            if (data.stages?.isEmpty() && data.fallbackStage != null) {\n                data.stages = [data.fallbackStage]\n            }\n            def stages = formatStages(data.stages)\n\n            if (data.category in [\"inputGaurdrails\", \"outputGaurdrails\"]) {\n                def redactStage = stages.find { it.id == \"redactsensitiveinformation\" }\n                if (redactStage) {\n                    stages.remove(redactStage)\n                    stages.add(0, redactStage)\n                }\n\n                // Change \"Filtered Query\" to \"Filtered Response\" in outputGaurdrails\n                if (data.category == \"outputGaurdrails\") {\n                    stages.each { stage ->\n                        if (stage.id == \"customwordfilters\" && stage.payload?.type == \"QUERY\") {\n                            if (stage.payload.content?.title == \"Filtered Query\") {\n                                stage.payload.content.title = \"Filtered Response\"\n                            }\n                        }\n                    }\n                }\n            }\n\n            finalResult.add([\n                    title : formatTitle(data.title).replace(\"Gaurdrails\", \"Guardrails\"),\n                    id    : data.category,\n                    color : getColorForCategory(data.category, data),\n                    time  : data.time,\n                    status: getStatusForCategory(data),\n                    stages: stages\n            ])\n        }\n\n        if (feedback.reaction != \"skipped\") {\n            finalResult << createFeedbackStage(feedback)\n        }\n        return finalResult\n    }\n\n\n    private String getColorForCategory(category, data) {\n        if (data.stages.isEmpty()) return \"disabled\"\n        switch (category) {\n            case \"inputGaurdrails\":\n            case \"outputGaurdrails\":\n                return \"blue\"\n            case \"rephraser\":\n            case \"userIntentDetection\":\n                return \"purple\"\n            case \"knowledgeRAG\":\n            case \"taskExecution\":\n                return \"pink\"\n            default:\n                return \"disabled\"\n        }\n    }\n\n    private String getStatusForCategory(data) {\n        if (data.stages.isEmpty()) return \"SKIPPED\"\n        return data.stages.any { it.status == \"FAILED\" } ? \"FAILED\" : \"COMPLETED\"\n    }\n\n    private def formatStages(stages) {\n        def finalStages = []\n        stages.each {stage ->\n            finalStages.add([\n                    title  : stage.title,\n                    id     : stage.id,\n                    workflowVariableId: stage.workflowVariableId,\n                    time   : stage.timeTaken,\n                    status : stage.payload ? stage.status : \"SKIPPED\",\n                    payload: stage.payload ?: []\n            ])\n        }\n        return finalStages\n    }\n\n    private def createFeedbackStage(feedback) {\n        [\n                title  : \"Feedback\",\n                id     : \"feedback\",\n                color  : feedback.reaction == \"like\" ? \"success\" : \"danger\",\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'FEEDBACK',\n                        content: [\n                                feedbackType: feedback.reaction == \"like\" ? \"positive\" : \"negative\",\n                                reason      : feedback.feedbackCategories,\n                                userFeedback: feedback.userFeedback\n                        ]\n                ]\n        ]\n    }\n\n    private String formatTitle(String action) {\n        action.split(/(?=[A-Z])/).collect { it.capitalize() }.join(' ')\n    }\n\n    def deepCopyMap(original) {\n        if (original instanceof Map) {\n            return original.collectEntries { k, v -> [(k): deepCopyMap(v)] }\n        } else if (original instanceof List) {\n            return original.collect { deepCopyMap(it) }  // Deep copy lists too\n        }\n        return original  // Return primitive values as is\n    }\n\n}\n\n// Usage\n//def input = jsonSlurper.parse(new File(\"/Users/navaneshwar/Downloads/groovy/extract.json\"))\ndef processor = new WorkflowProcessor(knowledges)\n//def response = processor.processWorkflow(input.objects, input.nodes, input.feedback)\n// println(JsonOutput.toJson(response))\n\ndef objectList = []\nif(binding.hasVariable('objects') && objects) {\n\tobjectList = objects\n}\ndef response = processor.processWorkflow(objectList, nodes, feedback)\nreturn response",
				"isAsync":false,
				"parameters":{
					"objects":{
						"ua:type":"mappedArray",
						"source":"{{ 7Wybs.outputs.objects }}",
						"items":"{{ 7Wybs.outputs.objects[0].columns }}"
					},
					"nodes":{
						"source":"{{ t0fRN.outputs.nodes }}",
						"ua:type":"mappedArray",
						"items":"{{ t0fRN.outputs.nodes[0] }}"
					},
					"feedback":"{{ NvpiO.outputs.feedback }}",
					"knowledges":"{{ _WnP5q.outputs.objects }}"
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":false
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":48,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"iAxnM@fenGp-1@y",
			"id":"ZzD2Q",
			"index":0,
			"inputs":{
				"result":{
					"response":{
						"ua:type":"mappedArray",
						"items":{
							"stages":{
								"ua:type":"mappedArray",
								"items":{
									"payload":{
										"content":"{{ C28ze.outputs.result.response[0].stages[0].payload.content }}",
										"type":"{{ C28ze.outputs.result.response[0].stages[0].payload.type }}"
									},
									"id":"{{ C28ze.outputs.result.response[0].stages[0].id }}",
									"time":"{{ C28ze.outputs.result.response[0].stages[0].time }}",
									"title":"{{ C28ze.outputs.result.response[0].stages[0].title }}",
									"status":"{{ C28ze.outputs.result.response[0].stages[0].status }}",
									"workflowVariableId":"{{ C28ze.outputs.result.response[0].stages[0].workflowVariableId }}"
								},
								"source":"{{ C28ze.outputs.result.response[0].stages }}"
							},
							"color":"{{ C28ze.outputs.result.response[0].color }}",
							"id":"{{ C28ze.outputs.result.response[0].id }}",
							"time":"{{ C28ze.outputs.result.response[0].time }}",
							"title":"{{ C28ze.outputs.result.response[0].title }}",
							"status":"{{ C28ze.outputs.result.response[0].status }}"
						},
						"source":"{{ C28ze.outputs.result.response }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.objects.items",
					"root.parameters.nodes.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":58,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"2SO8f",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"response":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"color":{
										"type":"string",
										"title":"color"
									},
									"stages":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"payload":{
													"type":"object",
													"properties":{
														"type":{
															"type":"string",
															"title":"type"
														},
														"content":{
															"type":"object",
															"title":"content"
														}
													},
													"title":"payload",
													"additionalProperties":false
												},
												"id":{
													"type":"string",
													"title":"id"
												},
												"time":{
													"type":"integer",
													"title":"time"
												},
												"title":{
													"type":"string",
													"title":"title"
												},
												"status":{
													"type":"string",
													"title":"status"
												}
											},
											"additionalProperties":false
										},
										"title":"stages"
									},
									"id":{
										"type":"string",
										"title":"id"
									},
									"time":{
										"type":"integer",
										"title":"time"
									},
									"title":{
										"type":"string",
										"title":"title"
									},
									"status":{
										"type":"string",
										"title":"status"
									}
								},
								"additionalProperties":false
							},
							"title":"response"
						}
					},
					"additionalProperties":false
				},
				"input":{
					"type":"object",
					"properties":{
						"objects":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Objects"
						},
						"nodes":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Nodes"
						},
						"feedback":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Feedback"
						},
						"knowledges":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Knowledges"
						}
					},
					"additionalProperties":false,
					"required":[
						"knowledges"
					]
				},
				"compile_static":false,
				"code":"import com.fasterxml.jackson.databind.ObjectMapper\nimport java.math.BigDecimal\nimport java.math.RoundingMode\n\n// import groovy.json.JsonSlurper\n// import groovy.json.JsonOutput\n// def jsonSlurper = new JsonSlurper()\n\nclass WorkflowProcessor {\n    private final ObjectMapper mapper = new ObjectMapper()\n    private final Map<String, String[]> knowledgeIdVsNameAndType = new HashMap<>();\n\n    public WorkflowProcessor(List knowledges) {\n        knowledges.each { knowledge ->\n            knowledgeIdVsNameAndType.put(knowledge.id, [knowledge.properties.name, knowledge.properties.sourceType])\n        }\n    }\n\n    def processWorkflow(List objects, List nodes, Map feedback) {\n        try {\n            def nodeMap = nodes.collectEntries { [it.nodeId, it] }\n            def result = initializeResult()\n\n            objects.each { obj ->\n                processObject(obj, nodeMap, result)\n            }\n\n            return [response: formatFinalResult(result, feedback)]\n        } catch (Exception e) {\n            return [\n                    output   : [\n                            errorCode: -1,\n                            errorId  : UUID.randomUUID().toString(),\n                            message  : e.message\n                    ],\n                    errorCode: -1,\n                    errorId  : UUID.randomUUID().toString(),\n                    message  : \"Workflow execution failed\"\n            ]\n        }\n    }\n\n    private def initializeResult() {\n        return ['inputGaurdrails', 'rephrasing', 'userIntentDetection', 'knowledgePipeline', 'aiAgentTask', 'outputGaurdrails'].collectEntries {\n            [it, [stages: [:], status: \"COMPLETED\", timeTaken: 0, fallbackStage: [:]]]\n        }\n    }\n\n    private void processObject(obj, nodeMap, result) {\n        def node = nodeMap[obj.nodeId]\n        if (!node) return\n\n        def parentLabel = node.parentLabel\n        def label = node.label\n        def category = node.category\n        def processedResult = processNode(obj.nodeId, obj.payload, nodeMap)\n\n        switch (parentLabel) {\n            case \"Input Gaurdrails\":\n                addStageResult(result.inputGaurdrails, label, processedResult, obj, true)\n                break\n            case \"Rephrasing\":\n                addStageResult(result.rephrasing, label, processedResult, obj, false)\n                break\n            case \"intentDetection\":\n                addStageResult(result.userIntentDetection, label, processedResult, obj, true)\n                break\n            case \"Knowledge Pipeline\":\n                addStageResult(result.knowledgePipeline, label, processedResult, obj, false)\n                break\n            case \"Output Gaurdrails\":\n                addStageResult(result.outputGaurdrails, label, processedResult, obj, true)\n                break\n            case \"aiAgentTask\":\n                if (processedResult instanceof List) {\n                    processedResult.each { stage ->\n                        def stageResult = [\n                                status   : stage?.status ?: \"FAILED\",\n                                timeTaken: obj.exitTime - obj.entryTime,\n                                payload  : stage?.payload ?: null,\n                                title    : \"LLM Response\"\n                        ]\n                        result.aiAgentTask.stages[stage.payload.content] = stageResult\n                        result.aiAgentTask.timeTaken += stageResult.timeTaken\n                    }\n                }\n                break\n            case \"timeTaken\":\n                addTimeTakenForCategory(category, result.get(category), obj)\n            default:\n                println \"Unknown parent label: ${parentLabel}\"\n        }\n    }\n\n    private void addStageResult(category, label, processedResult, obj, ignoreTimeTaken) {\n        def stageResult = [\n                status   : processedResult?.status ?: \"FAILED\",\n                timeTaken: obj.exitTime - obj.entryTime,\n                payload  : processedResult?.payload,\n                title    : formatTitle(label)\n        ]\n        category.stages[label.replaceAll(\" \", \"\")] = stageResult\n        if (!ignoreTimeTaken) {\n            category.timeTaken += stageResult.timeTaken\n        }\n    }\n\n    private void addTimeTakenForCategory(categoryLabel, category, obj) {\n        category.timeTaken = obj.exitTime - obj.entryTime\n        Map<String, Object> rs = mapper.readValue(obj.payload, Map)\n        switch (categoryLabel) {\n            case \"userIntentDetection\": {\n                def key = formatTitle(categoryLabel)\n                category.fallbackStage = [key: [status: \"COMPLETED\", timeTaken: obj.exitTime - obj.entryTime, payload: [\n                        type   : 'TEXT',\n                        content: rs.queryType\n                ],\n                                                title : key]]\n            }\n        }\n    }\n\n    private def processNode(String nodeId, String payload, Map<String, Map> nodeMap) {\n        def node = nodeMap[nodeId]\n        if (!node) return null\n\n        def label = node.label\n        def parentLabel = node.parentLabel\n\n        switch (label) {\n            case \"content filters\": return processContentFilters(parentLabel, payload)\n            case \"denied topics\": return processDeniedTopics(parentLabel, payload)\n            case \"custom word filters\": return processCustomWordFilters(parentLabel, payload)\n            case \"redact sensitive information\": return processRedactSensitiveInfo(parentLabel, payload)\n            case \"rephrased query\": return processRephrasedQuery(payload)\n            case \"intent Detection (LLM)\": return processUserIntentDetection(payload)\n            case \"chunk retrieval\": return processChunkRetrieval(payload)\n            case \"chunk reranker\": return processChunkReranker(payload)\n            case \"response generation\": return processResponseGeneration(payload)\n            case \"groundedness and relevance score\": return processGroundednessScore(payload)\n            case \"aiAgentTask\":\n                def payloadMap = mapper.readValue(payload, Map)\n                if (payloadMap?.llmResponse) {\n                    return processActions(payloadMap.llmResponse)\n                } else if (payloadMap?.output) {\n                    return processActions(payloadMap.output)\n                }\n                return processActions(response)\n            default: return null\n        }\n    }\n\n    private def processContentFilters(parentLabel, payload) {\n        Map<String, Object> rs = mapper.readValue(payload, Map)\n        def withinThreshold = rs?.withinThreshold ?: false\n        def contentFiltersObj = rs?.contentFilters\n\n        if (contentFiltersObj) {\n            contentFiltersObj.each { key, value ->\n                if (value instanceof Number) {\n                    BigDecimal bd = new BigDecimal(value.toString())\n                    contentFiltersObj[key] = bd.setScale(8, RoundingMode.DOWN).toPlainString()\n                }\n            }\n        }\n        return [\n                status : withinThreshold ? \"COMPLETED\" : \"FAILED\",\n                payload: [\n                        type   : 'JSON',\n                        content: contentFiltersObj\n                ]\n        ]\n    }\n\n    private def processDeniedTopics(parentLabel, payload) {\n        def deniedTopics = mapper.readValue(payload, Map)\n        def noDeniedTopics = deniedTopics.denial_topic_exist == \"false\" || deniedTopics.denial_topic_exist == false\n        def tmp = ''\n        return [\n                status : noDeniedTopics ? \"COMPLETED\" : \"FAILED\",\n                payload: [\n                        type   : 'TEXT',\n                        content: noDeniedTopics ?\n                                \"No denied topics detected in the query\" :\n                                \"Detected denied topics in the query \" + (deniedTopics.denial_reason ?: tmp)\n                ]\n        ]\n    }\n\n    private def processCustomWordFilters(parentLabel, payload) {\n        def customFilters = mapper.readValue(payload, Map)\n\n        def content = [\n                title : \"Filtered Query\",\n                result: customFilters.block == false ?\n                        \"No custom word filters removed\" :\n                        \"Custom word filters detected: \" + customFilters.filtered_answer.toString()\n        ]\n\n        if (!customFilters.block) {\n            content.query = customFilters.filtered_answer\n        }\n        return [\n                status : customFilters.block == false ? \"COMPLETED\" : \"FAILED\",\n                payload: [\n                        type   : 'QUERY',\n                        content: content\n                ]\n        ]\n    }\n\n    private def processRedactSensitiveInfo(parentLabel, payload) {\n        def redactInfo = mapper.readValue(payload, Map)\n\n        def content = [\n                title : \"Processed Query\",\n                result: redactInfo.block == false ?\n                        \"No sensitive information redacted\" :\n                        \"Sensitive information detected: \" + redactInfo.processed_answer.toString()\n        ]\n\n        if (redactInfo.block == false) {\n            content.query = redactInfo.processed_answer\n        }\n        return [\n                status : redactInfo.block == false ? \"COMPLETED\" : \"FAILED\",\n                payload: [\n                        type   : 'QUERY',\n                        content: content\n                ]\n        ]\n    }\n\n    private def processRephrasedQuery(payload) {\n        def rephrasedQuery = mapper.readValue(payload, Map)\n        return [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'TEXT',\n                        content: rephrasedQuery.chit_chat == true ? rephrasedQuery.reply : rephrasedQuery.rephrased_user_message\n                ]\n        ]\n    }\n\n    private def processUserIntentDetection(payload) {\n        def rs = mapper.readValue(payload, Map)\n        return [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'TEXT',\n                        content: rs.queryType\n                ]\n        ]\n    }\n\n    private def processChunkRetrieval(payload) {\n        def jsonPayload = mapper.readValue(payload, Map)\n        def chunks = jsonPayload.objects\n        return [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'TABLE',\n                        content: [\n                                columns: [\n                                        [header: 'Knowledge', accessorKey: 'knowledge'],\n                                        [header: 'Knowledge Type', accessorKey: 'knowledgeType'],\n                                        [header: 'Content', accessorKey: 'content'],\n                                        [header: 'Source', accessorKey: 'source']\n                                ],\n                                data   : chunks.collect { chunk ->\n                                    [\n                                            knowledge: knowledgeIdVsNameAndType[chunk.document.properties.knowledgeId]?.get(0),\n                                            knowledgeType: knowledgeIdVsNameAndType[chunk.document.properties.knowledgeId]?.get(1),\n                                            content: truncateChunkContent(chunk.document.properties.text),\n                                            source: (chunk.document.properties.chunkMetadata?.websiteUrl ?:\n                                                    (chunk.document.properties.chunkMetadata?.referenceUrl ?:\n                                                            chunk.document.properties.chunkMetadata?.webViewUrl ?:\n                                                                    chunk.document.properties.chunkMetadata?.name))\n                                    ]\n                                }\n                        ]\n                ]\n        ]\n    }\n\n    private def processChunkReranker(payload) {\n        def jsonPayload = mapper.readValue(payload, Map)\n        def rerankedChunks = jsonPayload.chunks\n        return [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'TABLE',\n                        content: [\n                                columns: [\n                                        [header: 'Content', accessorKey: 'content'],\n                                        [header: 'Source', accessorKey: 'source'],\n                                        [header: 'Score', accessorKey: 'score']\n                                ],\n                                data   : rerankedChunks.collect { chunk ->\n                                    [\n                                            content: truncateChunkContent(chunk.content),\n                                            source: (chunk.chunkMetadata.websiteUrl ?:\n                                                    (chunk.chunkMetadata.referenceUrl ?:\n                                                            chunk.chunkMetadata.webViewUrl ?:\n                                                                    chunk.chunkMetadata.name)),\n                                            score : chunk.score\n                                    ]\n                                }\n                        ]\n                ]\n        ]\n    }\n\n    private def truncateChunkContent(content) {\n        if (content.length() > 300) {\n            return content.substring(0, 300) + \"...\"\n        }\n        return content\n    }\n\n    private def processResponseGeneration(payload) {\n        def response = mapper.readValue(payload, Map)\n        return [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'RESPONSE',\n                        content: response.response\n                ]\n        ]\n    }\n\n    private def processGroundednessScore(payload) {\n        def groundednessScore = mapper.readValue(payload, Map)\n        return [\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'JSON',\n                        content: groundednessScore\n                ]\n        ]\n    }\n\n    private def processActions(result) {\n        return [[\n                        status : \"COMPLETED\",\n                        payload: [\n                                type   : 'RESPONSE',\n                                content: result\n                        ]\n                ]]\n        result.findResults { actionObj ->\n            def action = actionObj.action\n            def arguments = actionObj.arguments\n\n            if (action in [\"StartFlow\", \"SetSlot\"]) {\n                return null\n            }\n\n            def title = formatTitle(action)\n            def content = arguments.join(', ')\n\n            [\n                    status : \"COMPLETED\",\n                    payload: [\n                            type   : \"TEXT\",\n                            action : action,\n                            content: content\n                    ]\n            ]\n        }\n    }\n\n    private def formatFinalResult(result, feedback) {\n        def finalResult = result.collect { category, data ->\n            if (data.stages.isEmpty() && data.fallbackStage != null) {\n                data.stages = data.fallbackStage\n            }\n            def stages = formatStages(data.stages)\n\n            if (category in [\"inputGaurdrails\", \"outputGaurdrails\"]) {\n                def redactStage = stages.find { it.id == \"redactsensitiveinformation\" }\n                if (redactStage) {\n                    stages.remove(redactStage)\n                    stages.add(0, redactStage)\n                }\n\n                // Change \"Filtered Query\" to \"Filtered Response\" in outputGaurdrails\n                if (category == \"outputGaurdrails\") {\n                    stages.each { stage ->\n                        if (stage.id == \"customwordfilters\" && stage.payload?.type == \"QUERY\") {\n                            if (stage.payload.content?.title == \"Filtered Query\") {\n                                stage.payload.content.title = \"Filtered Response\"\n                            }\n                        }\n                    }\n                }\n            }\n\n            [\n                    title : formatTitle(category).replace(\"Gaurdrails\", \"Guardrails\"),\n                    id    : category,\n                    color : getColorForCategory(category, data),\n                    time  : data.timeTaken,\n                    status: getStatusForCategory(data),\n                    stages: stages\n            ]\n        }\n\n        if (feedback.reaction != \"skipped\") {\n            finalResult << createFeedbackStage(feedback)\n        }\n\n        finalResult\n    }\n\n\n    private String getColorForCategory(category, data) {\n        if (data.stages.isEmpty()) return \"disabled\"\n        switch (category) {\n            case \"inputGaurdrails\":\n            case \"outputGaurdrails\":\n                return \"blue\"\n            case \"rephrasing\":\n            case \"userIntentDetection\":\n                return \"purple\"\n            case \"knowledgePipeline\":\n            case \"aiAgentTask\":\n                return \"pink\"\n            default:\n                return \"gray\"\n        }\n    }\n\n    private String getStatusForCategory(data) {\n        if (data.stages.isEmpty()) return \"SKIPPED\"\n        return data.stages.values().any { it.status == \"FAILED\" } ? \"FAILED\" : \"COMPLETED\"\n    }\n\n    private def formatStages(stages) {\n        stages.collect { label, stage ->\n            [\n                    title  : stage.title,\n                    id     : label,\n                    time   : stage.timeTaken,\n                    status : stage.payload ? stage.status : \"SKIPPED\",\n                    payload: stage.payload ?: []\n            ]\n        }\n    }\n\n    private def createFeedbackStage(feedback) {\n        [\n                title  : \"Feedback\",\n                id     : \"feedback\",\n                color  : feedback.reaction == \"like\" ? \"success\" : \"danger\",\n                status : \"COMPLETED\",\n                payload: [\n                        type   : 'FEEDBACK',\n                        content: [\n                                feedbackType: feedback.reaction == \"like\" ? \"positive\" : \"negative\",\n                                reason      : feedback.feedbackCategories,\n                                userFeedback: feedback.userFeedback\n                        ]\n                ]\n        ]\n    }\n\n    private String formatTitle(String action) {\n        action.split(/(?=[A-Z])/).collect { it.capitalize() }.join(' ')\n    }\n}\n\n// Usage\ndef processor = new WorkflowProcessor(knowledges)\n// def input = jsonSlurper.parse(new File(\"/Users/navaneshwar/Downloads/groovy/extract.json\"))\n// def response = processor.processWorkflow(input.objects, input.nodes, input.feedback)\n// println(JsonOutput.prettyPrint(JsonOutput.toJson(response)))\ndef response = processor.processWorkflow(objects, nodes, feedback)\nreturn response",
				"isAsync":false,
				"parameters":{
					"objects":{
						"ua:type":"mappedArray",
						"source":"{{ 7Wybs.outputs.objects }}",
						"items":"{{ 7Wybs.outputs.objects[0].columns }}"
					},
					"nodes":{
						"source":"{{ t0fRN.outputs.nodes }}",
						"ua:type":"mappedArray",
						"items":"{{ t0fRN.outputs.nodes[0] }}"
					},
					"feedback":"{{ NvpiO.outputs.feedback }}",
					"knowledges":"{{ _WnP5q.outputs.objects }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":48,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"fenGp-1",
			"id":"sMdDO",
			"index":0,
			"inputs":{
				"result":{
					"response":{
						"ua:type":"mappedArray",
						"items":{
							"stages":{
								"ua:type":"mappedArray",
								"items":{
									"payload":{
										"content":"{{ 2SO8f.outputs.result.response[0].stages[0].payload.content }}",
										"type":"{{ 2SO8f.outputs.result.response[0].stages[0].payload.type }}"
									},
									"id":"{{ 2SO8f.outputs.result.response[0].stages[0].id }}",
									"time":"{{ 2SO8f.outputs.result.response[0].stages[0].time }}",
									"title":"{{ 2SO8f.outputs.result.response[0].stages[0].title }}",
									"status":"{{ 2SO8f.outputs.result.response[0].stages[0].status }}"
								},
								"source":"{{ 2SO8f.outputs.result.response[0].stages }}"
							},
							"color":"{{ 2SO8f.outputs.result.response[0].color }}",
							"id":"{{ 2SO8f.outputs.result.response[0].id }}",
							"time":"{{ 2SO8f.outputs.result.response[0].time }}",
							"title":"{{ 2SO8f.outputs.result.response[0].title }}",
							"status":"{{ 2SO8f.outputs.result.response[0].status }}"
						},
						"source":"{{ 2SO8f.outputs.result.response }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":520,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"AI Agent Deployment",
		"AI Agent",
		"Internal"
	],
	"version":249
}