{
	"appsUsed":[
		
	],
	"createdTime":1740599065215,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296195091,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd030c3d19149a9e34e0",
		"status":"DEPLOYED",
		"version":60,
		"workflowVersion":91
	},
	"edges":[
		{
			"fromNodeId":"DBzLs",
			"priority":0,
			"skip":false,
			"toNodeId":"w508p",
			"type":"next"
		},
		{
			"fromNodeId":"w508p",
			"priority":0,
			"skip":false,
			"toNodeId":"n_zeeIl",
			"type":"next"
		},
		{
			"fromNodeId":"n_zeeIl",
			"priority":0,
			"skip":false,
			"toNodeId":"n_1538h",
			"type":"next"
		},
		{
			"fromNodeId":"n_1538h",
			"priority":0,
			"skip":false,
			"toNodeId":"n_GEscf",
			"type":"loop"
		},
		{
			"fromNodeId":"n_GEscf",
			"priority":0,
			"skip":false,
			"toNodeId":"n_WLHo1",
			"type":"next"
		},
		{
			"fromNodeId":"n_WLHo1",
			"priority":0,
			"skip":false,
			"toNodeId":"n_EMraK",
			"type":"next"
		},
		{
			"fromNodeId":"n_EMraK",
			"name":"loopback",
			"priority":0,
			"skip":false,
			"toNodeId":"n_1538h",
			"type":"next"
		},
		{
			"fromNodeId":"n_1538h",
			"priority":0,
			"skip":false,
			"toNodeId":"iXfrU",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"67bdeaa2ba32d908560a258c",
	"lastModifiedBy":0,
	"lcName":"generate citations from reference",
	"modifiedTime":1761722728695,
	"name":"Generate Citations from Reference",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":78,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mJR3b-1",
			"id":"DBzLs",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"citationBlock":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Citation Block"
						},
						"imageBlock":{
							"type":"object",
							"properties":{
								"blockType":{
									"type":"string",
									"title":"blockType"
								},
								"data":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{},
										"additionalProperties":false
									},
									"title":"data"
								}
							},
							"additionalProperties":false,
							"title":"Image Block",
							"required":[]
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"chunkMetadata":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Chunk Metadata"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.chunkMetadata.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":78,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mJR3b-1",
			"id":"w508p",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"citationBlock":{
							"type":"object",
							"properties":{
								"blockType":{
									"type":"string",
									"title":"blockType"
								},
								"data":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{},
										"additionalProperties":false
									},
									"title":"data"
								}
							},
							"additionalProperties":false,
							"title":"Citation Block",
							"required":[]
						},
						"images":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"images"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"chunkMetadata":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Chunk Metadata"
						}
					}
				},
				"code":"import java.util.UUID\nString randomUuid = UUID.randomUUID().toString()\n\nstatic Map<String, Object> safeMap(Object obj) {\n    return (obj instanceof Map) ? (Map<String, Object>) obj : Collections.emptyMap()\n}\n\nstatic List<Map<String, Object>> getCitations(List<Object> rawChunkMetadata) {\n    List<Map<String, Object>> citations = []\n    Set<Object> seenEntityIds = new HashSet<>()\n\n    for (Object item : rawChunkMetadata) {\n        Map<String, Object> chunk = safeMap(item)\n        Map<String, Object> citation = [:]\n\n        Object uniqueEntityId = chunk[\"uniqueEntityId\"]\n        if (uniqueEntityId != null) {\n            if (seenEntityIds.contains(uniqueEntityId)) {\n                continue\n            }\n            seenEntityIds.add(uniqueEntityId)\n        }\n\n        if (chunk[\"channelName\"] != null) {\n            citation = [\n                appName             : \"slack\",\n                referenceUrl        : chunk[\"referenceUrl\"],\n                knowledgeSourceType : \"APPLICATION\",\n                title               : chunk[\"channelName\"]\n            ]\n        } else if (chunk[\"websiteUrl\"] != null) {\n            citation = [\n                referenceUrl        : chunk[\"websiteUrl\"],\n                knowledgeSourceType : \"WEBSITE\",\n                title               : chunk[\"title\"]\n            ]\n        } else if (chunk[\"webViewUrl\"] != null) {\n            citation = [\n                referenceUrl        : chunk[\"webViewUrl\"],\n                knowledgeSourceType : \"APPLICATION\",\n                appName             : \"gdrive\"\n            ]\n        } else if (chunk[\"appName\"] != null) {\n            citation = [\n                knowledgeSourceType : \"APPLICATION\",\n                referenceUrl        : chunk[\"referenceUrl\"],\n                name                : chunk[\"name\"],\n                appName             : chunk[\"appName\"]\n            ]\n        } else if (chunk[\"kind\"] != null) {\n            citation = [\n                knowledgeSourceType : \"APPLICATION\",\n                referenceUrl        : chunk[\"referenceUrl\"],\n                name                : chunk[\"name\"],\n                appName             : \"gdrive\"\n            ]\n        } else {\n            citation = [\n                knowledgeSourceType : \"FILE\",\n                referenceUrl        : chunk[\"referenceUrl\"],\n                name                : chunk[\"name\"],\n                source              : chunk[\"source\"]\n            ]\n        }\n\n        citation[\"iconUrl\"] = chunk[\"iconUrl\"]\n        citation[\"chunkContents\"] = chunk[\"chunkContents\"]\n        citation[\"chunkDetails\"] = chunk[\"chunkDetails\"]\n        //citation[\"id\"] = chunk[\"id\"]\n        citation[\"uniqueEntityId\"] = uniqueEntityId\n        citation[\"author\"] = chunk[\"author\"]\n        citation[\"date\"] = chunk[\"date\"]\n\n        if (chunk[\"chunkDetails\"] != null) {\n            citation[\"chunkDetails\"] = chunk[\"chunkDetails\"]\n        } else {\n            List<Map<String, Object>> chunkDetails = [[chunkId: chunk[\"chunkId\"]]]\n            citation[\"chunkDetails\"] = chunkDetails\n        }\n\n        citations.add(citation)\n    }\n\n    return citations\n}\n\nstatic List<Object> getImages(List<Object> rawChunkMetadata){\n    List<Object> images = []\n    Set<String> seenImages = new HashSet<>()\n\n    for (Object item : rawChunkMetadata) {\n        Map<String, Object> chunk = safeMap(item)\n        List<Object> files = []\n\n        // Check if this chunk is a video file\n        if (chunk[\"fileType\"] == \"video/mp4\") {\n            Map<String, Object> videoFile = [\n                fileType: chunk[\"fileType\"],\n                source: chunk[\"source\"],\n                sourceType: chunk[\"sourceType\"],\n                name: chunk[\"name\"],\n                referenceUrl: chunk[\"referenceUrl\"],\n                uniqueEntityId: chunk[\"uniqueEntityId\"]\n            ]\n            \n            String key = String.valueOf(chunk[\"source\"]) + \"|\" + String.valueOf(chunk[\"name\"]) + \"|\" + String.valueOf(chunk[\"referenceUrl\"])\n            if (!seenImages.contains(key)) {\n                seenImages.add(key)\n                images.add(videoFile)\n            }\n        }\n\n        if (chunk[\"imgFile\"] != null) {\n            if (chunk[\"imgFile\"] instanceof Collection) {\n                files.addAll((Collection) chunk[\"imgFile\"])\n            } else {\n                if (!(chunk[\"imgFile\"] instanceof Map && ((Map) chunk[\"imgFile\"]).isEmpty())) {\n                    files.add(chunk[\"imgFile\"])\n                }\n            }\n        }\n\n        if (chunk[\"imgFiles\"] != null) {\n            if (chunk[\"imgFiles\"] instanceof Collection) {\n                files.addAll((Collection) chunk[\"imgFiles\"])\n            } else {\n                if (!(chunk[\"imgFiles\"] instanceof Map && ((Map) chunk[\"imgFiles\"]).isEmpty())) {\n                    files.add(chunk[\"imgFiles\"])\n                }\n            }\n        }\n\n        for (Object f : files) {\n            Map<String, Object> fm = safeMap(f)\n            if (fm.isEmpty()) {\n                continue\n            }\n            String key = \"\"\n            Object url = fm.containsKey(\"url\") ? fm.get(\"url\") : fm.get(\"link\")\n            Object source = fm.get(\"source\")\n            Object name = fm.get(\"name\")\n            key = String.valueOf(source) + \"|\" + String.valueOf(name) + \"|\" + String.valueOf(url)\n            if (seenImages.contains(key)) {\n                continue\n            }\n            seenImages.add(key)\n            images.add(f)\n        }\n    }\n\n    return images\n}\n\nList<Object> chunkMetadata = binding.hasVariable(\"chunkMetadata\") ? (List<Object>) binding.getVariable(\"chunkMetadata\") : []\nList<Map<String, Object>> citations = chunkMetadata != null ? getCitations(chunkMetadata) : []\n\nMap<String, Object> citationBlock = [\n    blockType: \"Citation\",\n    data     : [\n        citations: citations\n    ]\n]\n\nList<Object> images = chunkMetadata != null ? getImages(chunkMetadata) : []\n\nreturn [\n    citationBlock: citationBlock,\n    images:images\n]",
				"compile_static":true,
				"captureStdOutput":false,
				"parameters":{
					"chunkMetadata":{
						"source":"{{ DBzLs.outputs.chunkMetadata }}",
						"ua:type":"mappedArray",
						"items":"{{ DBzLs.outputs.chunkMetadata[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"citations&images",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":450,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mJR3b-1",
			"id":"n_zeeIl",
			"index":3,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"type":"object"
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray"
				},
				"ua:title":"images",
				"ua:list_type":"OBJECT"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"images",
							"disableActions":true,
							"items":{
								"type":"object",
								"properties":{}
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"images",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"loop",
				"resourceVersion":456,
				"resourceName":"loop_for_each",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mJR3b-1",
			"id":"n_1538h",
			"index":4,
			"inputs":{
				"repeatMode":"SINGLE",
				"listSource":"{{ w508p.outputs.result.images }}",
				"captureIterations":false
			},
			"skip":false,
			"subTitle":"Loop",
			"title":"For each loop",
			"type":"LOOP"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":455,
				"resourceName":"utility_by_unifyapps_create_unifyapps_path_for_file",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_1538h@mJR3b-1@l",
			"id":"n_GEscf",
			"index":5,
			"inputs":{
				"file":"{{ n_1538h.outputs.item }}"
			},
			"skip":false,
			"subTitle":"url",
			"title":"Create UnifyApps path for file",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":452,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_1538h@mJR3b-1@l",
			"id":"n_WLHo1",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"file":{
							"type":"object",
							"title":"file"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"file":{
							"type":"object",
							"title":"file"
						},
						"url":{
							"type":"string",
							"title":"url"
						}
					}
				},
				"code":"import java.util.UUID\n\ndef file = (binding.hasVariable('file') && binding.getVariable('file') instanceof Map) ? (Map) binding.getVariable('file') : [:]\ndef url  = binding.hasVariable('url') ? binding.getVariable('url') : ''\n\nfile.url = url\nfile.showCaption = false\nfile.id = UUID.randomUUID().toString()\n\n[file: file]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"file":"{{ n_1538h.outputs.item }}",
					"url":"{{ n_GEscf.outputs.path }}"
				}
			},
			"skip":false,
			"subTitle":"image file",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":453,
				"resourceName":"variable_by_unifyapps_add_item_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_1538h@mJR3b-1@l",
			"id":"n_EMraK",
			"index":7,
			"inputs":{
				"itemToAdd":"{{ n_WLHo1.outputs.result.file }}",
				"insertLocation":"END",
				"listName":"{{ n_zeeIl.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"images",
			"title":"Add item to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":80,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"mJR3b-1",
			"id":"iXfrU",
			"index":8,
			"inputs":{
				"result":{
					"citationBlock":"{{ w508p.outputs.result.citationBlock }}",
					"imageBlock":{
						"blockType":"Media",
						"data":{
							"source":"{{ n_zeeIl.outputs.items }}",
							"ua:type":"mappedArray",
							"items":"{{ n_zeeIl.outputs.items[0] }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1866,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"AI Agent"
	],
	"version":93
}