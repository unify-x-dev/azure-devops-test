{
	"appsUsed":[
		
	],
	"createdTime":1748544401618,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296229290,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd25d60dd816d7798ffb",
		"status":"DEPLOYED",
		"version":49,
		"workflowVersion":113
	},
	"edges":[
		{
			"fromNodeId":"NVLFE",
			"priority":0,
			"skip":false,
			"toNodeId":"VWheD",
			"type":"next"
		},
		{
			"fromNodeId":"VWheD",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"1zFqM",
			"type":"if"
		},
		{
			"fromNodeId":"1zFqM",
			"priority":0,
			"skip":false,
			"toNodeId":"KP9cp",
			"type":"next"
		},
		{
			"fromNodeId":"VWheD",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"KP9cp",
			"type":"next"
		},
		{
			"fromNodeId":"KP9cp",
			"priority":0,
			"skip":false,
			"toNodeId":"cKuWx",
			"type":"next"
		},
		{
			"fromNodeId":"cKuWx",
			"priority":0,
			"skip":false,
			"toNodeId":"jX1S4",
			"type":"next"
		},
		{
			"fromNodeId":"jX1S4",
			"priority":0,
			"skip":false,
			"toNodeId":"IIXj1",
			"type":"next"
		},
		{
			"fromNodeId":"IIXj1",
			"priority":0,
			"skip":false,
			"toNodeId":"L2sH0",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"682debbafe3f32434fd08acb",
	"lastModifiedBy":0,
	"lcName":"publish tool form block",
	"modifiedTime":1761722769474,
	"name":"Publish tool Form Block",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"NVLFE",
			"index":0,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"response":{
							"type":"string",
							"title":"Response"
						}
					},
					"additionalProperties":false,
					"required":[
						"response"
					]
				},
				"setup":{
					"type":"object",
					"properties":{
						"field":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"type":{
										"type":"string",
										"title":"Type"
									},
									"options":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Options"
									},
									"key":{
										"type":"string",
										"title":"Key"
									},
									"title":{
										"type":"string",
										"title":"Title"
									},
									"format":{
										"type":"string",
										"title":"Format"
									}
								},
								"additionalProperties":false,
								"required":[
									"type",
									"options",
									"key",
									"title",
									"format"
								]
							},
							"title":"Fields"
						},
						"description":{
							"type":"string",
							"title":"Description"
						}
					},
					"additionalProperties":false,
					"required":[
						"field",
						"description"
					]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":19,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"VWheD",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"=LEN({{ NVLFE.outputs.field }})",
						"filter":{
							"operator":"EQUAL",
							"value":"0"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":19,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"VWheD@4ZR9C-1@y",
			"id":"1zFqM",
			"index":0,
			"inputs":{
				"result":{
					"response":"could not find any form fields"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.citations.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":119,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"KP9cp",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"coPilotBlocks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Co Pilot Blocks"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"fields":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"type":{
										"type":"string",
										"title":"Type"
									},
									"key":{
										"type":"string",
										"title":"Key"
									},
									"options":{
										"type":"array",
										"items":{
											"type":"string"
										},
										"title":"Options"
									},
									"format":{
										"type":"string",
										"title":"Format"
									}
								},
								"additionalProperties":false,
								"required":[
									"type",
									"key",
									"options",
									"format"
								]
							},
							"title":"Fields"
						},
						"description":{
							"type":"string",
							"title":"Description"
						}
					},
					"additionalProperties":false,
					"required":[
						"fields",
						"description"
					]
				},
				"compile_static":false,
				"code":"import java.util.UUID\n\nif (!binding.hasVariable('fields')) {\n  return [\"coPilotBlocks\": []]\n}\n\n// Property generator\ndef getProperty(field) {\n    def property = [\n        title: field.title,\n        type : mapType(field.type)\n    ]\n    switch(field.type?.toUpperCase()) {\n        case \"DROPDOWN\":\n        case \"DROP-DOWN\":\n        case \"DROP-DOWN\":\n        case \"SELECT\":\n        case \"SINGLE_SELECT\":\n        case \"SINGLE-SELECT\":\n            property.type = \"string\"\n            property.oneOf = getOptions(field.options)\n            property.searchType = \"ICONTAINS\"\n            property.format = \"single-select\"\n            break\n        case \"MULTI-SELECT\":\n        case \"MULTISELECT\":\n        case \"MULTI_SELECT\":\n            def multiOpts = field.options?.collect { opt ->\n                [const: opt, title: opt]\n            } ?: []\n            def items = [type: \"string\", oneOf: getOptions(field.options)]\n            property.type = \"array\"\n            property.searchType = \"ICONTAINS\"\n            property.format = multiOpts.size() > 3 ? \"multi-select\" : \"checkbox\"\n            property.items = items\n            break\n        case \"DATE\":\n            property.type = \"string\"\n            property.format = \"date\"\n            break\n        case \"NUMBER\":\n            property.type = \"number\"\n            break\n        case \"BOOLEAN\":\n            property.type = \"boolean\"\n            break\n        default:\n            property.type = \"string\"\n    }\n    return property\n}\n\ndef getOptions(options) {\n    if (options == null || options.isEmpty()) {\n        return []\n    }\n    def first = options[0]\n    if (first instanceof Map && first.containsKey('label') && first.containsKey('value')) {\n        // Handle array of {label, value} objects\n        opts = options.collect { opt ->\n            [const: opt.value, title: opt.label]\n        }\n    } else {\n        // Handle array of strings\n        opts = options.collect { opt ->\n            [const: opt, title: opt]\n        }\n    }\n    return opts\n}\n\ndef mapType(type) {\n    switch (type?.toUpperCase()) {\n        case \"TEXT\":\n        case \"SELECT\":\n        case \"MULTI_SELECT\":\n        case \"MULTISELECT\":\n        case \"MULTI-SELECT\":\n        case \"DATE\":\n            return \"string\"\n        case \"NUMBER\":\n            return \"number\"\n        case \"BOOLEAN\":\n            return \"boolean\"\n        default:\n            return \"string\"\n    }\n}\n\n// Layout generator\ndef getLayout(field) {\n    def layout = [\n        \"ui:placeholder\": field.placeholder ?: \"\",\n        \"ui:label\": false\n    ]\n    if (field.format?.toLowerCase() == \"checkbox\" || field.type?.toUpperCase() == 'MULTI_SELECT' || field.type?.toUpperCase() == 'MULTISELECT' || field.type?.toUpperCase() == 'MULTI-SELECT') {\n        layout[\"ui:widget\"] = \"CheckboxesWidget\"\n        layout[\"ua:width\"] = \"100%\"\n        layout[\"ua:orientation\"] = \"horizontal\"\n        layout[\"ua:widthRatio\"] = \"auto\"\n        layout[\"ua:fieldType\"] = \"CHECKBOX\"\n        layout[\"ua:containerClassName\"] = \"flex-wrap\"\n        return layout\n    }\n    \n    switch(field.type?.toUpperCase()) {\n        case \"TEXT\":\n            layout[\"ua:fieldType\"] = \"TEXT\"\n            layout[\"ua:valueType\"] = \"single\"\n            break\n        case \"DROPDOWN\":\n        case \"DROP-DOWN\":\n        case \"DROP-DOWN\":\n        case \"SELECT\":\n        case \"SINGLE_SELECT\":\n        case \"SINGLE-SELECT\":\n            layout[\"ua:disableClearable\"] = true\n            layout[\"ua:fieldType\"] = \"SINGLE_SELECT_DROPDOWN\"\n            layout[\"ua:valueType\"] = \"single\"\n            layout[\"ua:options\"] = [\n                \"ua:searchType\": \"ICONTAINS\",\n                \"ua:width\": \"100%\",\n                \"ua:hideTagsInDropdown\": true\n            ]\n            break\n        case \"MULTISELECT\":\n        case \"MULTI_SELECT\":\n            layout[\"ua:fieldType\"] = \"SELECT\"\n            layout[\"ua:valueType\"] = \"multiple\"\n            // layout[\"ua:options\"] = field.options ?: []\n            break\n        case \"DATE\":\n            layout[\"ua:fieldType\"] = \"DATE\"\n            layout[\"ua:valueType\"] = \"single\"\n            break\n        default:\n            layout[\"ua:fieldType\"] = \"TEXT\"\n            layout[\"ua:valueType\"] = \"single\"\n    }\n    return layout\n}\n\ndef properties = [:]\ndef required = []\ndef layouts = [:]\ndef onSubmit = false\ndef onChange = false\ndef singleSelect;\n\nfields.each { field ->\n    def prop = getProperty(field)\n    properties[field.key] = prop\n    layouts[field.key] = getLayout(field)\n    if (prop.format == 'checkbox' || prop.format == 'multi-select') {\n        onSubmit = true\n    }\n    if (prop.format == 'date') {\n        onChange = true\n    }\n\n    if (prop.format == \"single-select\") {\n        singleSelect = [key : field.key, properties: prop, title : field.title != null? field.title : field.key];\n    }\n}\n\ndef submitBehaviour = null\nif (onSubmit || properties.size() >= 2) {\n    submitBehaviour = 'onSubmit'\n} else if (onChange) {\n    submitBehaviour = 'onChange'\n}\n\ndef coPilotBlocks = [];\nif (binding.hasVariable('description')) {\n    coPilotBlocks.add([\n        \"blockType\" : \"Typography\",\n        \"data\": [\n            \"type\" : \"MARKDOWN\",\n            \"text\" : description\n        ]\n    ])\n}\n\nif (singleSelect != null && properties.size() == 1) {\n    def singleSelectBlock = [\n        \"blockType\": \"SingleSelect\",\n        \"id\": UUID.randomUUID().toString(),\n        \"data\": [\n            \"label\":singleSelect.properties.title,\n            \"options\": singleSelect.properties.oneOf\n        ]\n    ]\n    coPilotBlocks.add(singleSelectBlock)\n} else {\n    def formBlock = [\n        \"blockType\": \"Form\",\n        \"id\": UUID.randomUUID().toString(),\n        \"data\": [\n            \"submitBehaviour\" : submitBehaviour,\n         \"content\": [\n                \"jsonSchema\": [\n                    \"additionalProperties\": false,\n                    \"type\": \"object\",\n                    \"properties\": properties,\n                    \"required\": required\n                ],\n                \"uiSchema\": layouts\n            ]\n        ]\n    ]\n    coPilotBlocks.add(formBlock)\n}\nreturn [\"coPilotBlocks\": coPilotBlocks]\n",
				"parameters":{
					"fields":{
						"ua:type":"mappedArray",
						"items":{
							"type":"{{ NVLFE.outputs.field[0].type }}",
							"key":"{{ NVLFE.outputs.field[0].key }}",
							"options":{
								"source":"{{ NVLFE.outputs.field[0].options }}",
								"ua:type":"mappedArray",
								"items":"{{ NVLFE.outputs.field[0].options }}"
							},
							"format":"{{ NVLFE.outputs.field[0].format }}"
						},
						"source":"{{ NVLFE.outputs.field }}"
					},
					"description":"{{ NVLFE.outputs.description }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"conv_ai_by_unifyapps",
				"resourceVersion":108,
				"resourceName":"conv_ai_by_unifyapps_publish_response",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"cKuWx",
			"index":0,
			"inputs":{
				"callableInterfaceId":"__ua__publish_response_interface",
				"parameters":{
					"responses":[
						{
							"language":"en"
						}
					],
					"temporaryMessage":false,
					"coPilotBlocks":{
						"source":"{{ KP9cp.outputs.result.coPilotBlocks }}",
						"ua:type":"mappedArray",
						"items":"{{ KP9cp.outputs.result.coPilotBlocks[0] }}"
					},
					"publishToEndUser":true
				}
			},
			"skip":false,
			"subTitle":"Conversation AI by UnifyApps",
			"title":"Publish Response",
			"type":"CALL_INTERFACE_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":19,
				"resourceName":"variable_by_unifyapps_get_session_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"jX1S4",
			"index":0,
			"inputs":{
				"variableSchema":{
					"type":"object",
					"properties":{
						"caseId":{
							"type":"string",
							"title":"Case Id"
						},
						"aiAgentId":{
							"type":"string",
							"title":"Ai Agent Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Get Session Variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":19,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"IIXj1",
			"index":0,
			"inputs":{
				"automationId":"67133e74272bf52973eeed1f",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"statusToResumeWith":"USER_CLARIFICATION_RECEIVED",
					"caseId":"{{ jX1S4.outputs.caseId }}",
					"aiAgentId":"{{ jX1S4.outputs.aiAgentId }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"callables",
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"4ZR9C-1",
			"id":"L2sH0",
			"index":0,
			"inputs":{
				"result":{
					"response":"User submitted response"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1728,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":115
}