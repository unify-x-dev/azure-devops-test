{
	"appsUsed":[
		
	],
	"createdTime":1757066251826,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761559524502,
		"deployedBy":670,
		"deployedDefinitionId":"68ff43e43ee81015f2905b1e",
		"status":"DEPLOYED",
		"version":14,
		"workflowVersion":30
	},
	"edges":[
		{
			"fromNodeId":"RA2Aq",
			"priority":0,
			"skip":false,
			"toNodeId":"88S0T",
			"type":"next"
		},
		{
			"fromNodeId":"88S0T",
			"priority":0,
			"skip":false,
			"toNodeId":"n_yvvxi",
			"type":"next"
		},
		{
			"fromNodeId":"n_yvvxi",
			"priority":0,
			"skip":false,
			"toNodeId":"OVF7r",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"VIEW_RUNS",
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"68b56a34b6831d6a83c5a784",
	"lastModifiedBy":670,
	"lcName":"create gemini models payload",
	"modifiedTime":1761590880447,
	"name":"Create Gemini Models Payload",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":158,
				"resourceName":"callables_from_interface"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NmnYY-1",
			"id":"RA2Aq",
			"index":1,
			"inputs":{
				"result":{
					"additionalProperties":false,
					"ua:modal":{
						"field_type":"STRING",
						"is_optional":true
					},
					"type":"object",
					"properties":{
						"payload":{
							"type":"object",
							"title":"payload"
						}
					}
				},
				"callableInterfaceId":"67e72b531506404d8d5e331f",
				"setup":{
					"additionalProperties":false,
					"ua:modal":{
						"field_type":"STRING",
						"is_optional":true
					},
					"type":"object",
					"properties":{
						"top_p":{
							"type":"integer",
							"title":"top_p"
						},
						"response_format":{
							"type":"object",
							"properties":{
								"type":{
									"type":"string",
									"title":"type"
								}
							},
							"title":"response_format",
							"additionalProperties":false
						},
						"frequency_penalty":{
							"type":"integer",
							"title":"frequency_penalty"
						},
						"request_timeout":{
							"type":"integer",
							"title":"request_timeout"
						},
						"provider":{
							"type":"string",
							"title":"provider"
						},
						"max_tokens":{
							"type":"integer",
							"title":"max_tokens"
						},
						"presence_penalty":{
							"type":"integer",
							"title":"presence_penalty"
						},
						"temperature":{
							"type":"integer",
							"title":"temperature"
						},
						"messages":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"role":{
										"type":"string",
										"title":"role",
										"default":"user"
									},
									"content":{
										"type":"array",
										"items":{
											"type":"object",
											"properties":{
												"text":{
													"type":"string",
													"title":"text"
												},
												"type":{
													"type":"string",
													"title":"type",
													"default":"text"
												},
												"image_url":{
													"type":"object",
													"properties":{
														"url":{
															"type":"string",
															"title":"url"
														},
														"detail":{
															"type":"string",
															"title":"detail"
														}
													},
													"additionalProperties":false,
													"title":"image_url",
													"required":[]
												},
												"source":{
													"type":"object",
													"properties":{
														"image_type":{
															"type":"string",
															"title":"image_type"
														},
														"media_type":{
															"type":"string",
															"title":"media_type"
														},
														"image_data":{
															"type":"string",
															"title":"image_data"
														},
														"detail":{
															"type":"string",
															"title":"detail"
														}
													},
													"additionalProperties":false,
													"title":"Source",
													"required":[]
												},
												"tool_use_id":{
													"type":"string",
													"title":"tool_use_id"
												},
												"content":{
													"type":"string",
													"title":"content"
												},
												"name":{
													"type":"string",
													"title":"name"
												},
												"input":{
													"type":"object",
													"properties":{},
													"additionalProperties":false,
													"title":"input"
												},
												"id":{
													"type":"string",
													"title":"id"
												},
												"thinkingSignature":{
													"type":"string",
													"title":"Thinking Signature"
												}
											},
											"additionalProperties":false,
											"required":[]
										},
										"title":"content",
										"required":[]
									}
								},
								"additionalProperties":false
							},
							"title":"messages",
							"required":[]
						},
						"model":{
							"type":"string",
							"title":"model"
						},
						"logprobs":{
							"type":"boolean",
							"title":"logprobs"
						},
						"on_error_config":{
							"type":"object",
							"properties":{
								"error_msg":{
									"type":"string",
									"title":"error_msg"
								}
							},
							"additionalProperties":false,
							"title":"on_error_config",
							"required":[]
						},
						"retry_config":{
							"type":"object",
							"properties":{
								"initial_delay":{
									"type":"integer",
									"title":"initial_delay"
								},
								"num_retry":{
									"type":"integer",
									"title":"num_retry"
								},
								"max_delay":{
									"type":"integer",
									"title":"max_delay"
								},
								"backoff_factor":{
									"type":"integer",
									"title":"backoff_factor"
								}
							},
							"additionalProperties":false,
							"title":"retry_config",
							"required":[]
						},
						"top_k":{
							"type":"integer",
							"title":"top_k"
						},
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"type":{
										"type":"string",
										"title":"Type"
									},
									"function":{
										"type":"object",
										"properties":{
											"name":{
												"type":"string",
												"title":"Name"
											},
											"description":{
												"type":"string",
												"title":"Description"
											},
											"parameters":{
												"type":"object",
												"properties":{},
												"additionalProperties":false,
												"title":"Parameters"
											}
										},
										"additionalProperties":false,
										"title":"Function",
										"required":[]
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools"
						},
						"systemPrompt":{
							"type":"string",
							"title":"System Prompt"
						},
						"sessionId":{
							"type":"string",
							"title":"Session Id"
						},
						"modelId":{
							"type":"string",
							"title":"Model ID"
						},
						"stream":{
							"type":"boolean",
							"title":"stream"
						},
						"thoughtMethod":{
							"type":"string",
							"title":"Thought Method"
						},
						"isToolCallEnabled":{
							"type":"boolean",
							"title":"Is Tool Call Enabled"
						},
						"isMultipleToolCallEnabled":{
							"type":"boolean",
							"title":"Is Multiple Tool Call Enabled"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger interface",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.messages.source",
					"root.parameters.messages.ua:type",
					"root.parameters.messages.items.role",
					"root.parameters.messages.items.content.source",
					"root.parameters.messages.items.content.ua:type",
					"root.parameters.messages.items.content.items.type",
					"root.parameters.messages.items.content.items.text",
					"root.parameters.messages.items.content.items.image_url.url",
					"root.parameters.messages.items.content.items.image_url.detail",
					"root.parameters.messages.items.content.items.source.image_type",
					"root.parameters.messages.items.content.items.source.media_type",
					"root.parameters.messages.items.content.items.source.image_data",
					"root.parameters.messages.items.content.items.source.detail",
					"root.parameters.messages.items.content.items.tool_use_id",
					"root.parameters.messages.items.content.items.content",
					"root.parameters.messages.items.content.items.name",
					"root.parameters.messages.items.content.items.id",
					"root.parameters.systemPrompt",
					"root.parameters.model"
				]
			},
			"context":{
				"appName":"callables",
				"resourceVersion":166,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NmnYY-1",
			"id":"88S0T",
			"index":2,
			"inputs":{
				"automationId":"67de97fcf8210b1464da34d2",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"messages":{
						"source":"{{ RA2Aq.outputs.messages }}",
						"ua:type":"mappedArray",
						"items":{
							"role":"{{ RA2Aq.outputs.messages[0].role }}",
							"content":{
								"source":"{{ RA2Aq.outputs.messages[0].content }}",
								"ua:type":"mappedArray",
								"items":{
									"type":"{{ RA2Aq.outputs.messages[0].content[0].type }}",
									"text":"{{ RA2Aq.outputs.messages[0].content[0].text }}",
									"image_url":{
										"url":"{{ RA2Aq.outputs.messages[0].content[0].image_url.url }}",
										"detail":"{{ RA2Aq.outputs.messages[0].content[0].image_url.detail }}"
									},
									"source":{
										"image_type":"{{ RA2Aq.outputs.messages[0].content[0].source.image_type }}",
										"media_type":"{{ RA2Aq.outputs.messages[0].content[0].source.media_type }}",
										"image_data":"{{ RA2Aq.outputs.messages[0].content[0].source.image_data }}",
										"detail":"{{ RA2Aq.outputs.messages[0].content[0].source.detail }}"
									},
									"tool_use_id":"{{ RA2Aq.outputs.messages[0].content[0].tool_use_id }}",
									"content":"{{ RA2Aq.outputs.messages[0].content[0].content }}",
									"name":"{{ RA2Aq.outputs.messages[0].content[0].name }}",
									"id":"{{ RA2Aq.outputs.messages[0].content[0].id }}",
									"input":"{{ RA2Aq.outputs.messages[0].content[0].input }}"
								}
							}
						}
					},
					"systemPrompt":"{{ RA2Aq.outputs.systemPrompt }}",
					"model":"{{ RA2Aq.outputs.model }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				},
				"visibleOptionalFields":[
					"root.parameters.tools.items",
					"root.parameters.input_.messages.items.content.items.text",
					"root.parameters.input_.messages.items.content.items.type",
					"root.parameters.input_.messages.items.role"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":463,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":true,
			"fallbackMode":"STOP",
			"groupId":"NmnYY-1",
			"id":"n_yvvxi",
			"index":3,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"payload":{
							"type":"object",
							"properties":{
								"cachedContent":{
									"type":"string",
									"title":"cachedContent"
								},
								"contents":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{
											"role":{
												"type":"string",
												"title":"role"
											},
											"parts":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"text":{
															"type":"string",
															"title":"text"
														},
														"inlineData":{
															"type":"object",
															"properties":{
																"mimeType":{
																	"type":"string",
																	"title":"mimeType"
																},
																"data":{
																	"type":"string",
																	"title":"data"
																}
															},
															"additionalProperties":false,
															"title":"InlineData"
														}
													},
													"additionalProperties":false,
													"required":[]
												},
												"title":"parts"
											}
										},
										"additionalProperties":false
									},
									"title":"contents"
								},
								"systemInstruction":{
									"type":"object",
									"properties":{
										"role":{
											"type":"string",
											"title":"role"
										},
										"parts":{
											"type":"array",
											"items":{
												"type":"object",
												"properties":{
													"text":{
														"type":"string",
														"title":"text"
													}
												},
												"additionalProperties":false
											},
											"title":"parts"
										}
									},
									"title":"systemInstruction",
									"additionalProperties":false
								},
								"tools":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{
											"functionDeclarations":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"name":{
															"type":"string",
															"title":"name"
														},
														"description":{
															"type":"string",
															"title":"description"
														},
														"parameters":{
															"type":"object",
															"properties":{},
															"title":"parameters",
															"additionalProperties":false,
															"required":[]
														}
													},
													"additionalProperties":false
												},
												"title":"functionDeclarations"
											}
										},
										"additionalProperties":false
									},
									"title":"tools"
								},
								"safetySettings":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{
											"category":{
												"type":"string",
												"title":"category"
											},
											"threshold":{
												"type":"string",
												"title":"threshold"
											}
										},
										"additionalProperties":false
									},
									"title":"safetySettings"
								},
								"generationConfig":{
									"type":"object",
									"properties":{
										"temperature":{
											"type":"number",
											"title":"temperature"
										},
										"topP":{
											"type":"integer",
											"title":"topP"
										},
										"topK":{
											"type":"integer",
											"title":"topK"
										},
										"candidateCount":{
											"type":"integer",
											"title":"candidateCount"
										},
										"maxOutputTokens":{
											"type":"integer",
											"title":"maxOutputTokens"
										},
										"stopSequences":{
											"type":"array",
											"title":"stopSequences"
										},
										"responseMimeType":{
											"type":"string",
											"title":"responseMimeType"
										},
										"seed":{
											"type":"integer",
											"title":"seed"
										},
										"logprobs":{
											"type":"integer",
											"title":"logprobs"
										},
										"audioTimestamp":{
											"type":"boolean",
											"title":"audioTimestamp"
										}
									},
									"title":"generationConfig",
									"additionalProperties":false
								},
								"labels":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{},
										"additionalProperties":false
									},
									"title":"labels"
								}
							},
							"title":"payload",
							"additionalProperties":false,
							"required":[]
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"tools"
						},
						"input_":{
							"type":"object",
							"properties":{
								"messages":{
									"type":"array",
									"items":{
										"type":"object",
										"properties":{
											"content":{
												"type":"array",
												"items":{
													"type":"object",
													"properties":{
														"text":{
															"type":"string",
															"title":"text"
														},
														"type":{
															"type":"string",
															"title":"type"
														}
													},
													"additionalProperties":false
												},
												"title":"content"
											},
											"role":{
												"type":"string",
												"title":"role"
											}
										},
										"additionalProperties":false
									},
									"title":"messages"
								}
							},
							"additionalProperties":false,
							"title":"input_"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"def convert_openai_to_gemini(source_payload):\n    import json\n    import re\n    messages = source_payload.get(\"messages\", [])\n    \n    gemini_contents = []\n    gemini_system_instruction = None\n\n    for message in messages:\n        role = message.get(\"role\")\n        content_parts = message.get(\"content\", [])\n\n        if not role or not content_parts:\n            continue\n\n        if role == \"system\":\n            system_text = content_parts[0].get(\"text\", \"\")\n            if system_text:\n                gemini_system_instruction = {\"parts\": [{\"text\": system_text}]}\n        \n        elif role == \"user\":\n            gemini_parts = []\n            for part in content_parts:\n                part_type = part.get(\"type\")\n                if part_type == \"text\":\n                    gemini_parts.append({\"text\": part.get(\"text\", \"\")})\n                elif part_type == \"image_url\":\n                    image_url_data = part.get(\"image_url\", {}).get(\"url\", \"\")\n                    # Regex to parse the data URI scheme\n                    match = re.match(r\"data:(?P<mime_type>[\\w/\\-\\.+]+);base64,(?P<data>.+)\", image_url_data)\n                    if match:\n                        mime_type = match.group(\"mime_type\")\n                        data = match.group(\"data\")\n                        gemini_parts.append({\n                            \"inlineData\": {\n                                \"mimeType\": mime_type,\n                                \"data\": data\n                            }\n                        })\n            if gemini_parts:\n                gemini_contents.append({\"role\": \"user\", \"parts\": gemini_parts})\n\n        elif role == \"assistant\":\n            assistant_text = content_parts[0].get(\"text\", \"\")\n            if assistant_text: # Only add non-empty assistant messages\n                gemini_contents.append({\n                    \"role\": \"model\",\n                    \"parts\": [{\"text\": assistant_text}]\n                })\n\n    final_payload = {\"contents\": gemini_contents}\n    if gemini_system_instruction:\n        final_payload[\"systemInstruction\"] = gemini_system_instruction\n\n    return final_payload\n\ndef convert_tools_to_declarations(tools_json):\n    import json\n    function_list = []\n\n    for tool in tools_json:\n        if tool.get(\"type\") == \"function\" and \"function\" in tool:\n            function_data = tool[\"function\"]\n            \n            # Extract the required fields\n            name = function_data.get(\"name\")\n            description = function_data.get(\"description\", \"\") \n            parameters = function_data.get(\"parameters\", {}) \n            \n            if name:\n                new_func = {\n                    \"name\": name,\n                    \"description\": description,\n                    \"parameters\": parameters\n                }\n                function_list.append(new_func)\n    \n    output_declarations = [\n        {\n            \"functionDeclarations\": function_list\n        }\n    ]\n    \n    return output_declarations\ntry:\n    x = tools\nexcept:\n    tools = []\npayload = convert_openai_to_gemini(input_)\npayload['tools'] = convert_tools_to_declarations(tools)\n    \nresult = {\"payload\" : payload}\n\n",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"tools":{
						"source":"{{ RA2Aq.outputs.tools }}",
						"ua:type":"mappedArray",
						"items":"{{ RA2Aq.outputs.tools[0] }}"
					},
					"input_":{
						"messages":{
							"source":"{{ RA2Aq.outputs.messages }}",
							"ua:type":"mappedArray",
							"items":{
								"content":{
									"source":"{{ RA2Aq.outputs.messages[0].content }}",
									"ua:type":"mappedArray",
									"items":{
										"text":"{{ RA2Aq.outputs.messages[0].content[0].text }}",
										"type":"{{ RA2Aq.outputs.messages[0].content[0].type }}"
									}
								},
								"role":"{{ RA2Aq.outputs.messages[0].role }}"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":158,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NmnYY-1",
			"id":"OVF7r",
			"index":4,
			"inputs":{
				"result":{
					"payload":"{{ n_yvvxi.outputs.result.payload }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":0,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":false,
	"version":31
}