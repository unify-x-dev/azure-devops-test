{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1740599059269,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296302925,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd6ed60dd816d7799134",
		"status":"DEPLOYED",
		"version":66,
		"workflowVersion":92
	},
	"edges":[
		{
			"fromNodeId":"RBADX",
			"priority":0,
			"skip":false,
			"toNodeId":"OZcaf",
			"type":"next"
		},
		{
			"fromNodeId":"OZcaf",
			"priority":0,
			"skip":false,
			"toNodeId":"_C3D4V",
			"type":"next"
		},
		{
			"fromNodeId":"_C3D4V",
			"priority":0,
			"skip":false,
			"toNodeId":"mVDZv",
			"type":"next"
		},
		{
			"fromNodeId":"mVDZv",
			"priority":0,
			"skip":false,
			"toNodeId":"n_yfMhY",
			"type":"next"
		},
		{
			"fromNodeId":"n_yfMhY",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_AhBg6",
			"type":"next"
		},
		{
			"fromNodeId":"_AhBg6",
			"priority":0,
			"skip":false,
			"toNodeId":"n_40NgC",
			"type":"next"
		},
		{
			"fromNodeId":"n_40NgC",
			"priority":0,
			"skip":false,
			"toNodeId":"n_P46DY",
			"type":"next"
		},
		{
			"fromNodeId":"n_yfMhY",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"SaADu",
			"type":"if"
		},
		{
			"fromNodeId":"n_P46DY",
			"priority":0,
			"skip":false,
			"toNodeId":"SaADu",
			"type":"next"
		},
		{
			"fromNodeId":"SaADu",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"IdP95",
			"type":"if"
		},
		{
			"fromNodeId":"IdP95",
			"priority":0,
			"skip":false,
			"toNodeId":"UPYvx",
			"type":"next"
		},
		{
			"fromNodeId":"UPYvx",
			"priority":0,
			"skip":false,
			"toNodeId":"uKcmK",
			"type":"next"
		},
		{
			"fromNodeId":"uKcmK",
			"priority":0,
			"skip":false,
			"toNodeId":"ANvDM",
			"type":"next"
		},
		{
			"fromNodeId":"SaADu",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"ANvDM",
			"type":"next"
		},
		{
			"fromNodeId":"ANvDM",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"esvgD",
			"type":"if"
		},
		{
			"fromNodeId":"esvgD",
			"priority":0,
			"skip":false,
			"toNodeId":"2U6B7",
			"type":"next"
		},
		{
			"fromNodeId":"2U6B7",
			"priority":0,
			"skip":false,
			"toNodeId":"_3J73W",
			"type":"next"
		},
		{
			"fromNodeId":"_3J73W",
			"priority":0,
			"skip":false,
			"toNodeId":"0LMSh",
			"type":"next"
		},
		{
			"fromNodeId":"ANvDM",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"0LMSh",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"67bdcc45121e241b793a6108",
	"lastModifiedBy":0,
	"lcName":"push complete message to stream",
	"modifiedTime":1761722855520,
	"name":"Push Complete Message to Stream",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":78,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"vjWLd-1",
			"id":"RBADX",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"success":{
							"type":"string",
							"title":"Success"
						}
					},
					"additionalProperties":false,
					"required":[
						"success"
					]
				},
				"setup":{
					"type":"object",
					"properties":{
						"messageId":{
							"type":"string",
							"title":"Message Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2,
				"resourceName":"storage_by_unifyapps_get_record_by_id",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"vjWLd-1",
			"id":"OZcaf",
			"index":2,
			"inputs":{
				"object_type":"service_hub_message",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"translationsOption":"DEFAULT",
				"id":"{{ RBADX.outputs.messageId }}",
				"readThroughSessionVariables":false
			},
			"skip":false,
			"subTitle":"message",
			"title":"Fetch record by ID",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":535,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"vjWLd-1",
			"id":"_C3D4V",
			"index":3,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_userId_caseId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ __RUN__.outputs.userId }}_{{ OZcaf.outputs.properties.caseId }}"
							}
						},
						{
							"property":"properties_instanceType",
							"filter":{
								"operator":"EQUAL",
								"value":"ACCUMULATOR"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"e_ai_agent_streaming_detail",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"translationsOption":"DEFAULT",
				"page":{
					"paginateBy":"OFFSET",
					"limit":20
				},
				"numberOfRecordsToFetch":"SINGLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":380,
				"resourceName":"variable_by_unifyapps_get_session_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"vjWLd-1",
			"id":"mVDZv",
			"index":4,
			"inputs":{
				"variableSchema":{
					"type":"object",
					"properties":{
						"api_stream":{
							"type":"boolean",
							"title":"Api Stream"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Get Session Variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":107,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"vjWLd-1",
			"id":"n_yfMhY",
			"index":5,
			"inputs":{
				"filters":[
					{
						"property":"{{ OZcaf.outputs.properties.additional.streamingInProgress }}",
						"filter":{
							"operator":"MISSING"
						}
					},
					{
						"property":"{{ OZcaf.outputs.properties.additional.streamingInProgress }}",
						"filter":{
							"operator":"NOT_EQUAL",
							"value":"false"
						}
					},
					{
						"filters":[
							{
								"property":"{{ OZcaf.outputs.properties.additional.internalMessageType }}",
								"filter":{
									"operator":"EXISTS"
								}
							},
							{
								"property":"{{ OZcaf.outputs.properties.additional.internalMessageType }}",
								"filter":{
									"operator":"EQUAL",
									"value":"THOUGHT"
								}
							}
						],
						"operator":"AND"
					},
					{
						"filters":[
							{
								"property":"{{ OZcaf.outputs.properties.additional.temporaryMessage }}",
								"filter":{
									"operator":"EXISTS"
								}
							},
							{
								"property":"{{ OZcaf.outputs.properties.additional.temporaryMessage }}",
								"filter":{
									"operator":"EQUAL",
									"value":"true"
								}
							}
						],
						"operator":"AND"
					}
				],
				"operator":"OR"
			},
			"skip":false,
			"subTitle":"if it's not thought then final answer",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.updateFields.items.fieldName",
					"root.updateFields.items.actionType"
				]
			},
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":232,
				"resourceName":"storage_by_unifyapps_update_record_fields_by_id",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"n_yfMhY@vjWLd-1@n",
			"id":"_AhBg6",
			"index":6,
			"inputs":{
				"recordId":"{{ OZcaf.outputs.properties.caseId }}",
				"writeThroughSessionVariables":false,
				"object_type":"service_hub_case",
				"skipIfBlank":false,
				"skipPermissionCheck":false,
				"updateFields":[
					{
						"fieldName":"properties.additional.generatingResponse",
						"actionType":"SET",
						"setValue":"false"
					},
					{
						"fieldName":"properties.additional.responseGenerationStatus",
						"actionType":"SET",
						"setValue":"completed"
					}
				],
				"unsetIfNull":false
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				},
				"timeoutConfig":{
					"enabled":false
				}
			},
			"skip":false,
			"subTitle":"generatingResponse=false",
			"title":"Update an existing record's fields",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":488,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_yfMhY@vjWLd-1@n",
			"id":"n_40NgC",
			"index":7,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"payload":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Payload"
						}
					}
				},
				"code":"return [ 'payload': [\n  \"responseGenerationStatus\": \"completed\"\n] ]",
				"compile_static":false,
				"captureStdOutput":false
			},
			"skip":false,
			"subTitle":"mqtt payload",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"chat_by_unifyapps",
				"resourceVersion":482,
				"resourceName":"chat_by_unifyapps_send_message",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"CONTINUE",
			"groupId":"n_yfMhY@vjWLd-1@n",
			"id":"n_P46DY",
			"index":8,
			"inputs":{
				"payload":{
					"additional":"{{ n_40NgC.outputs.result.payload }}"
				},
				"topic":"case_{{ OZcaf.outputs.properties.caseId }}"
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false,
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"CONTINUE",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				},
				"timeoutConfig":{
					"enabled":false
				}
			},
			"skip":false,
			"subTitle":"Chat by UnifyApps",
			"title":"Send message",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":77,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"vjWLd-1",
			"id":"SaADu",
			"index":9,
			"inputs":{
				"filters":[
					{
						"property":"{{ _C3D4V.outputs.properties.waitingInstanceId }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":54,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"SaADu@vjWLd-1@y",
			"id":"IdP95",
			"index":10,
			"inputs":{
				"automationId":"66e598f208d0f101e7cd4734",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"messageId":"{{ OZcaf.outputs.properties.messageId }}",
					"hasAttachments":"{{ OZcaf.outputs.properties.hasAttachments }}"
				}
			},
			"skip":false,
			"subTitle":"message attachments",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.coPilotBlocks.items",
					"root.parameters.choiceList.items",
					"root.parameters.attachments.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":72,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"SaADu@vjWLd-1@y",
			"id":"UPYvx",
			"index":11,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"botMessage":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"botMessage"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"messageContent":{
							"type":"string",
							"title":"Message Content"
						},
						"coPilotBlocks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Co Pilot Blocks"
						},
						"caseId":{
							"type":"string",
							"title":"Case Id"
						},
						"fromCustomerUserId":{
							"type":"string",
							"title":"From Customer User Id"
						},
						"messageCreatedTime":{
							"type":"string",
							"title":"Message Created Time"
						},
						"messageId":{
							"type":"string",
							"title":"Message Id"
						},
						"internalMessageType":{
							"type":"string",
							"title":"Internal Message Type"
						},
						"choiceList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Choice List"
						},
						"serviceHubMessage":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Service Hub Message"
						},
						"attachments":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Attachments"
						}
					}
				},
				"code":"static Map<String, Object> safeMap(Object obj) {\n    return (obj instanceof Map) ? (Map<String, Object>) obj : Collections.emptyMap()\n}\n\nList<Map<String, Object>> messages = []\nString text = \"\"\n\nif (binding.hasVariable(\"messageContent\")) {\n    text = binding.getVariable(\"messageContent\")?.toString()\n    Map<String, Object> textBlock = [\n        blockType: \"Typography\",\n        data: [\n            type: \"MARKDOWN\",\n            text: text\n        ]\n    ]\n    messages.add(textBlock)\n}\n\nif (binding.hasVariable(\"choiceList\")) {\n    List<Object> choiceList = (List<Object>) binding.getVariable(\"choiceList\")\n    messages.add(getChoicesContent(choiceList))\n}\n\nif (binding.hasVariable(\"coPilotBlocks\")) {\n    List<Map<String, Object>> coPilotBlocks = (List<Map<String, Object>>) binding.getVariable(\"coPilotBlocks\")\n    messages.addAll(coPilotBlocks)\n}\n\nString messageId = binding.hasVariable(\"messageId\") ? binding.getVariable(\"messageId\")?.toString() : \"\"\nString caseId = binding.hasVariable(\"caseId\") ? binding.getVariable(\"caseId\")?.toString() : \"\"\nObject messageCreatedTime = binding.hasVariable(\"messageCreatedTime\") ? binding.getVariable(\"messageCreatedTime\") : null\nObject fromCustomerUserId = binding.hasVariable(\"fromCustomerUserId\") ? binding.getVariable(\"fromCustomerUserId\") : null\n\nMap<String, Object> botMessage = [\n    messageType: \"Bot\",\n    messageId: messageId,\n    caseId: caseId,\n    createdTime: messageCreatedTime,\n    fromCustomerUserId: fromCustomerUserId,\n    message: messages\n]\n\nList<Map<String, Object>> attachmentList = []\nboolean hasAttachment = false\n\nif (binding.hasVariable(\"attachments\")) {\n    List<Map<String, Object>> attachments = (List<Map<String, Object>>) binding.getVariable(\"attachments\")\n    Map<String, Object> serviceHubMessage = safeMap(binding.hasVariable(\"serviceHubMessage\") ? binding.getVariable(\"serviceHubMessage\") : null)\n    Map<String, Object> properties = safeMap(serviceHubMessage[\"properties\"])\n\n    if (!attachments.isEmpty()) {\n        if (\"fan\".equals(properties[\"type\"])) {\n            hasAttachment = true\n            attachmentList.addAll(getFanAttachments(attachments))\n        } else {\n            messages.addAll(getBrandAttachments(attachments))\n        }\n    }\n}\n\nif (!attachmentList.isEmpty()) {\n    botMessage[\"attachments\"] = attachmentList\n}\n\nMap<String, Object> serviceHubMessage = safeMap(binding.hasVariable(\"serviceHubMessage\") ? binding.getVariable(\"serviceHubMessage\") : null)\nMap<String, Object> properties = safeMap(serviceHubMessage[\"properties\"])\nMap<String, Object> content = safeMap(properties[\"content\"])\n\nif (content.containsKey(\"interfaceDetails\")) {\n    botMessage[\"interfaceDetails\"] = content[\"interfaceDetails\"]\n}\nif (content.containsKey(\"previewDetails\")) {\n    botMessage[\"previewDetails\"] = content[\"previewDetails\"]\n}\n\n\nif (binding.hasVariable(\"internalMessageType\")) {\n    String internalMessageType = binding.getVariable(\"internalMessageType\")?.toString()\n    if (internalMessageType != null && !internalMessageType.trim().isEmpty()) {\n        botMessage[\"additional\"] = [\"internalMessageType\": \"THOUGHT\"]\n    }\n}\n\nif (properties.containsKey(\"additional\")) {\n    botMessage[\"additional\"] = properties[\"additional\"]\n}\n\nreturn [\"botMessage\": botMessage]\n\n// ========================\n// ==== Helper Methods ====\n// ========================\n\nstatic Map<String, Object> getChoicesContent(List<Object> choices) {\n    Map<String, Object> data = [:]\n    for (int i = 0; i < choices.size(); i++) {\n        data[\"\" + i] = getChoice(safeMap(choices[i]))\n    }\n\n    return [\n        blockType : \"Stack\",\n        appearance: [\n            alignItems    : \"flex-start\",\n            wrapContent   : true,\n            styles        : [\n                gap : [all: \"gap-md\"],\n                width: \"w-full\"\n            ],\n            justifyContent: \"flex-start\",\n            direction     : \"row\"\n        ],\n        data: data\n    ]\n}\n\nstatic Map<String, Object> getChoice(Map<String, Object> option) {\n    String optionId = option[\"id\"] != null ? option[\"id\"].toString() : option[\"title\"]?.toString()\n    List<Map<String, Object>> events = []\n\n    if (option[\"url\"] != null) {\n        events.add([\n            action   : [\n                actionType: \"navigate\",\n                payload   : [\n                    path               : option[\"url\"],\n                    history            : \"push\",\n                    preserveSearchParams: false,\n                    target             : \"_blank\"\n                ]\n            ],\n            id       : optionId,\n            eventType: \"onClick\"\n        ])\n    }\n\n    Map<String, Object> resp = [\n        content   : [value: option[\"title\"]],\n        appearance: [\n            color  : \"neutral\",\n            size   : \"sm\",\n            variant: \"outline\"\n        ],\n        blockType : \"Button\"\n    ]\n\n    if (!events.isEmpty()) {\n        resp[\"events\"] = events\n    }\n\n    return resp\n}\n\nstatic List<Map<String, Object>> getFanAttachments(List<Map<String, Object>> attachments) {\n    List<Map<String, Object>> attachmentData = []\n    for (Map<String, Object> attachment : attachments) {\n        attachmentData.add([\n            id      : attachment[\"id\"],\n            name    : attachment[\"name\"],\n            url     : attachment[\"data\"],\n            fileType: attachment[\"fileType\"],\n            mimeType: attachment[\"mimeType\"]\n        ])\n    }\n    return attachmentData\n}\n\nstatic List<Map<String, Object>> getBrandAttachments(List<Map<String, Object>> attachments) {\n    List<Map<String, Object>> imageOrVideoData = []\n    List<Map<String, Object>> otherData = []\n\n    for (Map<String, Object> attachment : attachments) {\n        if (attachment[\"mimeType\"]?.toString()?.contains(\"image\") == true) {\n            Map<String, Object> imageOrVideo = [\n                id      : attachment[\"id\"],\n                name    : attachment[\"name\"],\n                url     : attachment[\"data\"],\n                fileType: attachment[\"fileType\"],\n                mimeType: attachment[\"mimeType\"],\n                showCaption: attachment[\"caption\"] != null && attachment[\"caption\"].toString().trim() != \"\"\n            ]\n            if (imageOrVideo[\"showCaption\"]) {\n                imageOrVideo[\"caption\"] = attachment[\"caption\"]\n            }\n            imageOrVideoData.add(imageOrVideo)\n        } else {\n            otherData.add([\n                id      : attachment[\"id\"],\n                name    : attachment[\"name\"],\n                url     : attachment[\"data\"],\n                fileType: attachment[\"fileType\"],\n                mimeType: attachment[\"mimeType\"]\n            ])\n        }\n    }\n\n    List<Map<String, Object>> returnData = []\n    if (!imageOrVideoData.isEmpty()) {\n        returnData.add([blockType: \"Media\", data: imageOrVideoData])\n    }\n    if (!otherData.isEmpty()) {\n        returnData.add([blockType: \"Media\", data: otherData])\n    }\n\n    return returnData\n}\n",
				"compile_static":true,
				"parameters":{
					"messageContent":"{{ OZcaf.outputs.properties.content.text }}",
					"caseId":"{{ OZcaf.outputs.properties.caseId }}",
					"fromCustomerUserId":"{{ OZcaf.outputs.properties.fromCustomerUserId }}",
					"messageCreatedTime":"{{ OZcaf.outputs.createdTime }}",
					"messageId":"{{ OZcaf.outputs.id }}",
					"internalMessageType":"{{ OZcaf.outputs.properties.additional.internalMessageType }}",
					"serviceHubMessage":"{{ OZcaf.outputs }}",
					"coPilotBlocks":{
						"ua:type":"mappedArray",
						"source":"{{ OZcaf.outputs.properties.content.coPilotBlocks.blocks }}",
						"items":"{{ OZcaf.outputs.properties.content.coPilotBlocks.blocks[0] }}"
					},
					"choiceList":{
						"source":"{{ OZcaf.outputs.properties.content.choiceList }}",
						"ua:type":"mappedArray",
						"items":"{{ OZcaf.outputs.properties.content.choiceList[0] }}"
					},
					"attachments":{
						"source":"{{ IdP95.outputs.attachments }}",
						"ua:type":"mappedArray",
						"items":"{{ IdP95.outputs.attachments[0] }}"
					}
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":true
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"prepare already streamed content",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.signal_payload.payload.chunkContent",
					"root.signal_payload.payload.coPilotBlocks.items",
					"root.signal_payload.payload.eventType",
					"root.signal_payload.payload.messageType",
					"root.signal_payload.payload.completeData"
				]
			},
			"context":{
				"appName":"signals_by_unifyapps",
				"resourceVersion":79,
				"resourceName":"signals_by_unifyapps_emit_signal",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"SaADu@vjWLd-1@y",
			"id":"uKcmK",
			"index":12,
			"inputs":{
				"automation_id":"67b7748b4372d31da7c2e130",
				"with_signal_id":false,
				"waitingInstanceRuntimeType":"{{ _C3D4V.outputs.properties.waitingInstanceRunTimeType }}",
				"waitingInstanceId":"{{ _C3D4V.outputs.properties.waitingInstanceId }}",
				"signal_payload":{
					"payload":{
						"completeData":"{{ UPYvx.outputs.result.botMessage }}",
						"eventType":"push_complete_message",
						"messageType":"{{ OZcaf.outputs.properties.additional.internalMessageType }}"
					}
				},
				"nodeId":"wonjF"
			},
			"skip":false,
			"subTitle":"Signals by UnifyApps",
			"title":"Emit signal",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":2,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"vjWLd-1",
			"id":"ANvDM",
			"index":13,
			"inputs":{
				"filters":[
					{
						"property":"{{ _C3D4V.outputs.properties.waitingInstanceId }}",
						"filter":{
							"operator":"EXISTS"
						}
					},
					{
						"property":"{{ mVDZv.outputs.api_stream }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.coPilotBlocks.items",
					"root.parameters.choiceList.items",
					"root.parameters.attachments.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":72,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"ANvDM@vjWLd-1@y",
			"id":"esvgD",
			"index":14,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"botMessage":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"botMessage"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"messageContent":{
							"type":"string",
							"title":"Message Content"
						},
						"coPilotBlocks":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Co Pilot Blocks"
						},
						"caseId":{
							"type":"string",
							"title":"Case Id"
						},
						"fromCustomerUserId":{
							"type":"string",
							"title":"From Customer User Id"
						},
						"messageCreatedTime":{
							"type":"string",
							"title":"Message Created Time"
						},
						"messageId":{
							"type":"string",
							"title":"Message Id"
						},
						"internalMessageType":{
							"type":"string",
							"title":"Internal Message Type"
						},
						"choiceList":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Choice List"
						},
						"serviceHubMessage":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Service Hub Message"
						},
						"attachments":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Attachments"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def text = \"\"\ndef messages = []\nif(binding.hasVariable('messageContent')) {\ntext = messageContent\ndef textBlock = [\"blockType\":\"Typography\", \"data\":[\"type\":\"MARKDOWN\", \"text\":text]]\nmessages.add(textBlock)\n}\nif(binding.hasVariable('choiceList')) {\n  messages.addAll(getChoicesContent(choiceList))\n}\nif(binding.hasVariable('coPilotBlocks')) {\n  messages.addAll(coPilotBlocks)\n}\n\ndef botMessage = [\"messageType\":\"Bot\",\"messageId\": messageId, \"caseId\": caseId, \"createdTime\": messageCreatedTime,\"fromCustomerUserId\":fromCustomerUserId, \"message\": messages]\ndef attachmentList = []\nif(binding.hasVariable(\"attachments\") && attachments) {\n        if (serviceHubMessage?.properties?.type == 'fan') {\n            hasAttachment = true\n            attachmentList.addAll(getFanAttachments(attachments))\n        } else {\n            messages.addAll(getBrandAttachments(attachments))\n        }        \n    }\nif(attachmentList.size() > 0) {    \nbotMessage.put(\"attachments\", attachmentList)\n}\n\n\nif(binding.hasVariable('serviceHubMessage') && serviceHubMessage?.properties?.content?.interfaceDetails) {\n  botMessage << [\"interfaceDetails\":serviceHubMessage?.properties?.content?.interfaceDetails]\n}\n\nif(binding.hasVariable('serviceHubMessage') && serviceHubMessage?.properties?.content?.previewDetails) {\n  botMessage << [\"previewDetails\":serviceHubMessage?.properties?.content?.previewDetails]\n}\n\n\n\n\nif(binding.hasVariable(\"internalMessageType\")&& internalMessageType != null && internalMessageType.trim()!= \"\") {\n  botMessage << [\"additional\":[\"internalMessageType\":\"THOUGHT\"]]\n}\n\nif(binding.hasVariable('serviceHubMessage') && serviceHubMessage?.properties?.additional) {\n  botMessage << [\"additional\":serviceHubMessage?.properties?.additional]\n}\n\n\nreturn [\"botMessage\": botMessage]\n\n\n\ndef getChoicesContent(def choices) {\n    def data = [:]\n    int i=0\n    for (choice in choices) {\n        data.put(\"\"+i,getChoice(choice))\n        i++;\n    }\n    def result = [\n        \"blockType\":\"Stack\",\n        \"appearance\":[\n            \"alignItems\":\"flex-start\",\n            \"wrapContent\":true,\n            \"styles\":[\n                \"gap\":[\"all\":\"gap-md\"],\n                \"width\":\"w-full\" \n            ],\n            \"justifyContent\":\"flex-start\",\n            \"direction\":\"row\"\n        ],\n        \"data\":data\n    ]\n return result\n}\n\ndef getChoice(def option) {\n    def optionId = option.id\n    if (!optionId) {\n        optionId = option.title\n    }\n    def events = []\n    if (option.url) {\n        def event = [\n            \"action\": [\n                \"actionType\": \"navigate\",\n                \"payload\": [\n                    \"path\": option.url,\n                    \"history\": \"push\",\n                    \"preserveSearchParams\": false,\n                    \"target\": \"_blank\"\n                ]\n            ],\n            \"id\": option.id,\n            \"eventType\": \"onClick\"\n        ]\n        events << event\n    }\n\n    def resp = [\n        \"content\":[\n            \"value\":option.title\n        ],\n        \"appearance\":[\n            \"color\":\"neutral\",\n            \"size\":\"sm\",\n            \"variant\":\"outline\",\n            /*\"styles\": [\n                \"width\":\"w-full\"\n            ]*/\n        ],\n        \"blockType\":\"Button\"\n    ]\n\n    if(option.url) {\n        resp.put('events', events)\n    }\n    return resp\n}\n\n\ndef getFanAttachments(def attachments) {\n    def attachmentData = []\n    attachments.each { attachment -> \n            attachmentData <<  [id: attachment.id, 'name': attachment.name, url: attachment.data, fileType: attachment.fileType, mimeType: attachment.mimeType]\n    }\n    return attachmentData\n}\n\ndef getBrandAttachments(def attachments) {\n    def imageOrVideoData = []\n    def otherData = []\n    attachments.each { attachment -> \n        if (attachment.mimeType.contains(\"image\")) {\n            def imageOrVideo = [id: attachment.id, 'name': attachment.name, url: attachment.data, fileType: attachment.fileType, mimeType: attachment.mimeType]\n            if (attachment.caption != null && attachment.caption != \"\") {\n                imageOrVideo['caption'] = attachment.caption\n                imageOrVideo['showCaption'] = true\n            } else {\n                imageOrVideo['showCaption'] = false\n            }\n            imageOrVideoData << imageOrVideo\n        } else {\n            otherData <<  [id: attachment.id, 'name': attachment.name, url: attachment.data, fileType: attachment.fileType, mimeType: attachment.mimeType]\n        } \n    }\n    def returnData = []\n    if (imageOrVideoData) {\n        returnData.add([\"blockType\":\"Media\", \"data\":imageOrVideoData])\n    }\n    if (otherData) {\n        returnData.add([\"blockType\":\"Media\", \"data\":otherData])\n    }\n    return returnData\n}\n\n",
				"parameters":{
					"coPilotBlocks":{
						"ua:type":"mappedArray",
						"source":"{{ OZcaf.outputs.properties.content.coPilotBlocks.blocks }}",
						"items":"{{ OZcaf.outputs.properties.content.coPilotBlocks.blocks[0] }}"
					},
					"messageContent":"{{ OZcaf.outputs.properties.content.text }}",
					"caseId":"{{ OZcaf.outputs.properties.caseId }}",
					"fromCustomerUserId":"{{ OZcaf.outputs.properties.fromCustomerUserId }}",
					"messageCreatedTime":"{{ OZcaf.outputs.createdTime }}",
					"messageId":"{{ OZcaf.outputs.id }}",
					"internalMessageType":"{{ OZcaf.outputs.properties.additional.internalMessageType }}",
					"choiceList":{
						"source":"{{ OZcaf.outputs.properties.content.choiceList }}",
						"ua:type":"mappedArray",
						"items":"{{ OZcaf.outputs.properties.content.choiceList[0] }}"
					},
					"serviceHubMessage":"{{ OZcaf.outputs }}",
					"attachments":{
						"source":"{{ IdP95.outputs.attachments }}",
						"ua:type":"mappedArray",
						"items":"{{ IdP95.outputs.attachments[0] }}"
					}
				}
			},
			"options":{
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":false
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false
				},
				"logConfig":{
					"enabled":true
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false
				}
			},
			"skip":false,
			"subTitle":"prepare already streamed content",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.signal_payload.payload.chunkContent",
					"root.signal_payload.payload.coPilotBlocks.items",
					"root.signal_payload.payload.eventType",
					"root.signal_payload.payload.messageType",
					"root.signal_payload.payload.completeMessage"
				]
			},
			"context":{
				"appName":"signals_by_unifyapps",
				"resourceVersion":79,
				"resourceName":"signals_by_unifyapps_emit_signal",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"ANvDM@vjWLd-1@y",
			"id":"2U6B7",
			"index":15,
			"inputs":{
				"automation_id":"6835e54e0c98860093440ef7",
				"with_signal_id":false,
				"waitingInstanceRuntimeType":"{{ _C3D4V.outputs.properties.waitingInstanceRunTimeType }}",
				"waitingInstanceId":"{{ _C3D4V.outputs.properties.waitingInstanceId }}",
				"signal_payload":{
					"completed":false,
					"payload":{
						"messageType":"THOUGHT",
						"eventType":"coPilotBlock",
						"completeMessage":"{{ esvgD.outputs.result.botMessage }}"
					}
				},
				"nodeId":"wonjF"
			},
			"skip":false,
			"subTitle":"Signals by UnifyApps",
			"title":"Emit signal",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.signal_payload.payload.chunkContent",
					"root.signal_payload.payload.coPilotBlocks.items",
					"root.signal_payload.payload.eventType",
					"root.signal_payload.payload.messageType",
					"root.signal_payload.payload.completeMessage"
				]
			},
			"context":{
				"appName":"signals_by_unifyapps",
				"resourceVersion":79,
				"resourceName":"signals_by_unifyapps_emit_signal",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"ANvDM@vjWLd-1@y",
			"id":"_3J73W",
			"index":16,
			"inputs":{
				"automation_id":"68a7438a7cdf147e40665747",
				"with_signal_id":false,
				"waitingInstanceRuntimeType":"{{ _C3D4V.outputs.properties.waitingInstanceRunTimeType }}",
				"waitingInstanceId":"{{ _C3D4V.outputs.properties.waitingInstanceId }}",
				"signal_payload":{
					"completed":false,
					"payload":{
						"messageType":"THOUGHT",
						"eventType":"coPilotBlock",
						"completeMessage":"{{ esvgD.outputs.result.botMessage }}"
					}
				},
				"nodeId":"wonjF"
			},
			"skip":false,
			"subTitle":"Signals by UnifyApps",
			"title":"Emit signal",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":80,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"vjWLd-1",
			"id":"0LMSh",
			"index":17,
			"inputs":{
				"result":{
					"success":"true"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1866,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"AI Agent"
	],
	"version":94
}