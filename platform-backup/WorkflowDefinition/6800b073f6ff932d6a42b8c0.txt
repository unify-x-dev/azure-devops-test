{
	"appsUsed":[
		
	],
	"createdTime":1757441885882,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296263497,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd47d60dd816d7799089",
		"status":"DEPLOYED",
		"version":7,
		"workflowVersion":27
	},
	"edges":[
		{
			"fromNodeId":"vdj1d",
			"priority":0,
			"skip":false,
			"toNodeId":"n_iMDld",
			"type":"next"
		},
		{
			"fromNodeId":"n_iMDld",
			"priority":0,
			"skip":false,
			"toNodeId":"n_1D1oa",
			"type":"next"
		},
		{
			"fromNodeId":"n_1D1oa",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_pi2kI",
			"type":"if"
		},
		{
			"fromNodeId":"n_pi2kI",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8AsLl",
			"type":"next"
		},
		{
			"fromNodeId":"n_8AsLl",
			"priority":0,
			"skip":false,
			"toNodeId":"n_n6RMw",
			"type":"next"
		},
		{
			"fromNodeId":"n_1D1oa",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"n_n6RMw",
			"type":"next"
		},
		{
			"fromNodeId":"n_n6RMw",
			"priority":0,
			"skip":false,
			"toNodeId":"fpxuE",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"6800b073f6ff932d6a42b8c0",
	"lastModifiedBy":0,
	"lcName":"ppt to html",
	"modifiedTime":1761722812091,
	"name":"PPT to HTML",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":208,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"L0gt6-1",
			"id":"vdj1d",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"slides":{
							"type":"string",
							"title":"slides"
						},
						"tables":{
							"type":"string",
							"title":"tables"
						},
						"full_text":{
							"type":"string",
							"title":"full_text"
						},
						"images_base64":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"images_base64"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"url":{
							"type":"string",
							"title":"url"
						},
						"file":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"file"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":458,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"L0gt6-1",
			"id":"n_iMDld",
			"index":2,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"url":{
							"type":"string",
							"title":"url"
						}
					}
				}
			},
			"inputs":{
				"url":"{{ vdj1d.outputs.url }}"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"url":{
							"type":"string",
							"title":"url"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":439,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"L0gt6-1",
			"id":"n_1D1oa",
			"index":3,
			"inputs":{
				"filters":[
					{
						"property":"{{ vdj1d.outputs.file }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"utility_by_unifyapps_generate_public_url",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_1D1oa@L0gt6-1@y",
			"id":"n_pi2kI",
			"index":4,
			"inputs":{
				"file":"{{ vdj1d.outputs.file }}",
				"expiryTime":1
			},
			"skip":false,
			"subTitle":"Utility by UnifyApps",
			"title":"Generate public file URL",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":0,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_1D1oa@L0gt6-1@y",
			"id":"n_8AsLl",
			"index":5,
			"inputs":{
				"variables":[
					{
						"source":"{{ n_iMDld.outputs.url }}",
						"value":"{{ n_pi2kI.outputs.url }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":768,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"L0gt6-1",
			"id":"n_n6RMw",
			"index":6,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"slides":{
							"type":"string",
							"title":"slides"
						},
						"tables":{
							"type":"string",
							"title":"tables"
						},
						"full_text":{
							"type":"string",
							"title":"full_text"
						},
						"images_base64":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"images_base64"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"url":{
							"type":"string",
							"title":"url"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"import zipfile\nimport re\nimport base64\nimport requests\nimport tempfile\nimport os\nimport io\n\n# Download the file treating it as a PPT/PPTX\nwith tempfile.NamedTemporaryFile(delete=False, suffix='.pptx') as tmp_file:\n    response = requests.get(url, stream=True, verify=False)\n    response.raise_for_status()\n    for chunk in response.iter_content(chunk_size=8192):\n        if chunk:\n            tmp_file.write(chunk)\n    temp_file_name = tmp_file.name\n\nall_text = []\nall_tables = []\nimages_base64 = []\n\n# Read file content\nwith open(temp_file_name, 'rb') as f:\n    file_content = f.read()\n\n# Treat it as a PPTX (which is a ZIP file)\ntry:\n    with zipfile.ZipFile(io.BytesIO(file_content), 'r') as zip_file:\n        # Get all slide XML files\n        slide_files = sorted([f for f in zip_file.namelist() if 'ppt/slides/slide' in f and f.endswith('.xml') and 'slideLayout' not in f and 'slideMaster' not in f])\n        \n        for slide_num, file_name in enumerate(slide_files, 1):\n            slide_xml = zip_file.read(file_name).decode('utf-8', errors='ignore')\n            \n            slide_content = {\n                'slide_number': slide_num,\n                'title': '',\n                'content': [],\n                'tables': [],\n                'notes': ''\n            }\n            \n            # Extract all text from <a:t> tags\n            text_pattern = r'<a:t[^>]*>([^<]*)</a:t>'\n            matches = re.findall(text_pattern, slide_xml)\n            \n            texts = []\n            for match in matches:\n                cleaned_text = match.strip()\n                if cleaned_text:\n                    # Decode XML entities\n                    cleaned_text = cleaned_text.replace('&amp;', '&')\n                    cleaned_text = cleaned_text.replace('&lt;', '<')\n                    cleaned_text = cleaned_text.replace('&gt;', '>')\n                    cleaned_text = cleaned_text.replace('&quot;', '\"')\n                    cleaned_text = cleaned_text.replace('&apos;', \"'\")\n                    texts.append(cleaned_text)\n            \n            # First text is usually title\n            if texts:\n                slide_content['title'] = texts[0]\n                slide_content['content'] = texts[1:] if len(texts) > 1 else []\n            \n            # Extract tables\n            if '<a:tbl>' in slide_xml:\n                # Find table rows\n                row_pattern = r'<a:tr[^>]*>(.*?)</a:tr>'\n                rows = re.findall(row_pattern, slide_xml, re.DOTALL)\n                \n                table_data = []\n                for row in rows:\n                    # Extract cells from each row\n                    cell_texts = re.findall(text_pattern, row)\n                    if cell_texts:\n                        cleaned_cells = []\n                        for cell in cell_texts:\n                            cell = cell.strip()\n                            if cell:\n                                cell = cell.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&apos;', \"'\")\n                                cleaned_cells.append(cell)\n                        if cleaned_cells:\n                            table_data.append(cleaned_cells)\n                \n                if table_data:\n                    slide_content['tables'].append(table_data)\n                    all_tables.append({\n                        'slide': slide_num,\n                        'data': table_data\n                    })\n            \n            # Extract notes if exists\n            notes_file = file_name.replace('slides/slide', 'notesSlides/notesSlide')\n            if notes_file in zip_file.namelist():\n                try:\n                    notes_xml = zip_file.read(notes_file).decode('utf-8', errors='ignore')\n                    notes_matches = re.findall(text_pattern, notes_xml)\n                    notes_texts = []\n                    for match in notes_matches:\n                        cleaned = match.strip()\n                        # Skip if it's the same as title (often repeated in notes)\n                        if cleaned and cleaned != slide_content['title']:\n                            cleaned = cleaned.replace('&amp;', '&').replace('&lt;', '<').replace('&gt;', '>').replace('&quot;', '\"').replace('&apos;', \"'\")\n                            notes_texts.append(cleaned)\n                    if notes_texts:\n                        slide_content['notes'] = ' '.join(notes_texts)\n                except:\n                    pass\n            \n            all_text.append(slide_content)\n        \n        # Extract all images\n        for file_name in zip_file.namelist():\n            if 'ppt/media/' in file_name and not file_name.endswith('/'):\n                try:\n                    image_data = zip_file.read(file_name)\n                    image_b64 = base64.b64encode(image_data).decode('utf-8')\n                    images_base64.append(image_b64)\n                except:\n                    pass\n\nexcept zipfile.BadZipFile:\n    # If it's not a valid ZIP, it might be an old binary PPT format\n    # Try to extract readable strings\n    strings = re.findall(b'[\\x20-\\x7E]{10,}', file_content)\n    \n    readable_texts = []\n    for s in strings[:1000]:  # Limit to first 1000 strings\n        try:\n            text = s.decode('utf-8', errors='ignore').strip()\n            # Filter out system strings\n            if text and not any(marker in text.lower() for marker in ['microsoft', 'powerpoint', 'arial', 'calibri', 'root entry']):\n                if len(text) > 10 and (' ' in text or len(text) > 30):\n                    readable_texts.append(text)\n        except:\n            pass\n    \n    # Group texts into slides (10 texts per slide as approximation)\n    if readable_texts:\n        texts_per_slide = 10\n        for i in range(0, len(readable_texts), texts_per_slide):\n            chunk = readable_texts[i:i+texts_per_slide]\n            slide_content = {\n                'slide_number': (i // texts_per_slide) + 1,\n                'title': chunk[0] if chunk else '',\n                'content': chunk[1:] if len(chunk) > 1 else [],\n                'tables': [],\n                'notes': ''\n            }\n            all_text.append(slide_content)\n\n# Clean up\nos.unlink(temp_file_name)\n\n\n# Create a simple text output\nplain_text = []\nfor slide in all_text:\n    if slide['title']:\n        plain_text.append(slide['title'])\n    plain_text.extend(slide['content'])\n    if slide['notes']:\n        plain_text.append(slide['notes'])\n\nfull_text = '\\n'.join(plain_text)\n\nresult = {\n    'slides': all_text,\n    'tables': all_tables,\n    'full_text': full_text,\n    'images_base64': images_base64\n}",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"url":"{{ n_iMDld.outputs.url }}"
				}
			},
			"skip":false,
			"subTitle":"pptToHtml",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":262,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"L0gt6-1",
			"id":"fpxuE",
			"index":7,
			"inputs":{
				"result":{
					"slides":"{{ n_n6RMw.outputs.result.slides }}",
					"tables":"{{ n_n6RMw.outputs.result.tables }}",
					"full_text":"{{ n_n6RMw.outputs.result.full_text }}",
					"images_base64":{
						"source":"{{ n_n6RMw.outputs.result.images_base64 }}",
						"ua:type":"mappedArray",
						"items":"{{ n_n6RMw.outputs.result.images_base64[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":0,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":29
}