{
	"appsUsed":[
		
	],
	"createdTime":1744279533773,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761674857274,
		"deployedBy":0,
		"deployedDefinitionId":"69010669cb9893140dafaf27",
		"status":"DEPLOYED",
		"version":83,
		"workflowVersion":140
	},
	"edges":[
		{
			"fromNodeId":"5bATh",
			"priority":0,
			"skip":false,
			"toNodeId":"Fl5Sw",
			"type":"next"
		},
		{
			"fromNodeId":"Fl5Sw",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"23heT",
			"type":"if"
		},
		{
			"fromNodeId":"23heT",
			"priority":0,
			"skip":false,
			"toNodeId":"t6qAF",
			"type":"next"
		},
		{
			"fromNodeId":"Fl5Sw",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"t6qAF",
			"type":"next"
		},
		{
			"fromNodeId":"t6qAF",
			"priority":0,
			"skip":false,
			"toNodeId":"P1jZj",
			"type":"next"
		},
		{
			"fromNodeId":"P1jZj",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"xUSfg",
			"type":"if"
		},
		{
			"fromNodeId":"xUSfg",
			"priority":0,
			"skip":false,
			"toNodeId":"JQMzd",
			"type":"next"
		},
		{
			"fromNodeId":"JQMzd",
			"priority":0,
			"skip":false,
			"toNodeId":"zg64t",
			"type":"next"
		},
		{
			"fromNodeId":"P1jZj",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"zg64t",
			"type":"next"
		},
		{
			"fromNodeId":"zg64t",
			"priority":0,
			"skip":false,
			"toNodeId":"cKKiQ",
			"type":"next"
		},
		{
			"fromNodeId":"cKKiQ",
			"priority":0,
			"skip":false,
			"toNodeId":"TUgkl",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"67e2d9d194875751e6bc1ad9",
	"lastModifiedBy":0,
	"lcName":"ai eval | metrics | json correctness",
	"modifiedTime":1761722692302,
	"name":"AI Eval | Metrics | Json Correctness",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":157,
				"resourceName":"callables_from_interface"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"DrOWd-1",
			"id":"5bATh",
			"index":0,
			"inputs":{
				"result":{
					"ua:modal":{
						"field_type":"STRING",
						"is_optional":true
					},
					"properties":{
						"score":{
							"type":"number",
							"title":"Score"
						},
						"reason":{
							"type":"string",
							"title":"Reason"
						},
						"cost":{
							"type":"number",
							"title":"Cost"
						}
					},
					"required":[]
				},
				"callableInterfaceId":"67e2b5d9e1d4f12ce20011f0",
				"setup":{
					"ua:modal":{
						"field_type":"STRING",
						"is_optional":true
					},
					"properties":{
						"criteria":{
							"type":"string",
							"title":"Evaluation Criteria"
						},
						"evaluationSteps":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Evaluation Steps"
						},
						"model":{
							"type":"string",
							"title":"Model"
						},
						"evaluationParameters":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Evaluation Parameters"
						},
						"testCase":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Test Case"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger interface",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":391,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"DrOWd-1",
			"id":"Fl5Sw",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ 5bATh.outputs.context }}",
						"filter":{
							"operator":"MISSING"
						}
					},
					{
						"property":"{{ 5bATh.outputs.evaluationParameters }}",
						"filter":{
							"operator":"MISSING"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":418,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"Fl5Sw@DrOWd-1@y",
			"id":"23heT",
			"index":0,
			"inputs":{
				"result":{
					"reason":"Missing ",
					"score":-1
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":477,
				"resourceName":"variable_by_unifyapps_create_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"DrOWd-1",
			"id":"t6qAF",
			"index":0,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{
					"createList":{
						"ui:title":"",
						"ua:type":{
							"ui:widget":"hidden"
						},
						"items":{
							"ui:title":"Initial list items",
							"ui:description":"Set the initial values of the list (defaults to empty)"
						},
						"ui:order":[
							"*",
							"items"
						]
					},
					"ua:title":{
						"ui:widget":"hidden"
					},
					"ua:list_type":{
						"ui:widget":"hidden"
					}
				},
				"schema":{
					"allOf":[
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"OBJECT"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"items":{
												"type":"object",
												"properties":{}
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"STRING"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of String"
											},
											"items":{
												"type":"string"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"INTEGER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Integers"
											},
											"items":{
												"type":"integer"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"NUMBER"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Numbers"
											},
											"items":{
												"type":"number"
											}
										}
									}
								}
							}
						},
						{
							"if":{
								"properties":{
									"ua:list_type":{
										"const":"BOOLEAN"
									}
								}
							},
							"then":{
								"properties":{
									"createList":{
										"type":"object",
										"properties":{
											"source":{
												"type":"string",
												"format":"ua:source",
												"title":"List of Booleans"
											},
											"items":{
												"type":"boolean"
											}
										}
									}
								}
							}
						}
					],
					"format":"ua:list",
					"type":"object",
					"properties":{
						"ua:title":{
							"type":"string"
						},
						"ua:list_type":{
							"type":"string",
							"title":"List Type",
							"oneOf":[
								{
									"const":"OBJECT",
									"title":"Object"
								},
								{
									"const":"STRING",
									"title":"String"
								},
								{
									"const":"NUMBER",
									"title":"Number"
								},
								{
									"const":"INTEGER",
									"title":"Integer"
								},
								{
									"const":"BOOLEAN",
									"title":"Boolean"
								}
							],
							"default":"OBJECT"
						},
						"createList":{
							"type":"object",
							"properties":{
								"ua:type":{
									"type":"string",
									"default":"mappedArray"
								},
								"source":{
									"type":"string",
									"format":"ua:source",
									"title":"List Item Source"
								},
								"items":{
									"additionalProperties":false,
									"type":[
										"object",
										"string",
										"number",
										"boolean",
										"integer"
									],
									"properties":{}
								}
							}
						}
					}
				}
			},
			"inputs":{
				"createList":{
					"ua:type":"mappedArray",
					"source":"{{ 5bATh.outputs.evaluationSteps }}",
					"items":"{{ 5bATh.outputs.evaluationSteps[0] }}"
				},
				"ua:title":"evaluation steps",
				"ua:list_type":"STRING"
			},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"type":"object",
					"properties":{
						"items":{
							"type":"array",
							"title":"evaluation steps",
							"disableActions":true,
							"items":{
								"type":"string"
							}
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Create list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":391,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"DrOWd-1",
			"id":"P1jZj",
			"index":0,
			"inputs":{
				"filters":[
					{
						"property":"{{ 5bATh.outputs.criteria }}",
						"filter":{
							"operator":"EXISTS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":439,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"P1jZj@DrOWd-1@y",
			"id":"xUSfg",
			"index":0,
			"inputs":{
				"automationId":"67de3f121b43942f73d616cf",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":409,
				"resourceName":"variable_by_unifyapps_add_items_to_list",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"P1jZj@DrOWd-1@y",
			"id":"JQMzd",
			"index":0,
			"inputs":{
				"insertLocation":"END",
				"itemsToAdd":{
					"ua:type":"mappedArray",
					"source":"{{ xUSfg.outputs.steps }}",
					"items":"{{ xUSfg.outputs.steps[0] }}"
				},
				"listName":"{{ t6qAF.outputs.items[0] }}"
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Add items to list",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"utility_by_unifyapps",
				"resourceVersion":1,
				"resourceName":"utility_by_unifyapps_to_json_object",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"DrOWd-1",
			"id":"zg64t",
			"index":0,
			"inputs":{
				"jsonSchema":{
					"type":"object",
					"properties":{
						"testCases":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"INPUT":{
										"type":"string",
										"title":"INPUT"
									},
									"ACTUAL_OUTPUT":{
										"type":"string",
										"title":"ACTUAL_OUTPUT"
									}
								},
								"additionalProperties":false
							},
							"title":"testCases"
						}
					},
					"additionalProperties":false
				},
				"jsonString":"{{ 5bATh.outputs.testCase }}"
			},
			"skip":false,
			"subTitle":"Utility ",
			"title":"Deserialise string to JSON object",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":161,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"DrOWd-1",
			"id":"cKKiQ",
			"index":0,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"score":{
							"type":"integer",
							"title":"Score"
						},
						"reason":{
							"type":"string",
							"title":"Reason"
						}
					},
					"additionalProperties":false,
					"required":[
						"score",
						"reason"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"testCase":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Test Case"
						}
					},
					"additionalProperties":false,
					"required":[
						"testCase"
					]
				},
				"compile_static":false,
				"code":"import com.fasterxml.jackson.databind.ObjectMapper\nimport com.fasterxml.jackson.core.type.TypeReference\n\ndef validateJsonSchema(output, schema) {\n    try {\n        // Basic type checking\n        if (schema.type == 'object') {\n            // Check if output is a map/object\n            if (!(output instanceof Map)) {\n                return false\n            }\n            \n            // If schema has properties, do more detailed validation\n            if (schema.properties) {\n                return validateProperties(output, schema.properties)\n            }\n            \n            return true\n        }\n        \n        // Add more type checks as needed\n        if (schema.type == 'array') {\n            if (!(output instanceof List)) {\n                return false\n            }\n            \n            // Optional array-specific validations\n            if (schema.containsKey('minItems') && output.size() < schema.minItems) {\n                return false\n            }\n            \n            // Validate array item types if specified\n            if (schema.items) {\n                return output.every { item -> \n                    validateItemType(item, schema.items)\n                }\n            }\n            \n            return true\n        }\n        \n        // Default fallback\n        return false\n    } catch (Exception e) {\n        println \"Schema validation error: ${e.message}\"\n        return false\n    }\n}\n\ndef validateItemType(item, itemSchema) {\n    if (itemSchema.type == 'string') {\n        return item instanceof String\n    }\n    if (itemSchema.type == 'number') {\n        return item instanceof Number\n    }\n    if (itemSchema.type == 'boolean') {\n        return item instanceof Boolean\n    }\n    return true\n}\n\ndef validateProperties(output, properties) {\n    // Check each specified property\n    return properties.every { propName, propSchema ->\n        // Check if property exists\n        if (!output.containsKey(propName)) {\n            return false\n        }\n        \n        def propValue = output[propName]\n        \n        // Validate property type\n        if (propSchema.type == 'array') {\n            if (!(propValue instanceof List)) {\n                return false\n            }\n            \n            // Optional array validations\n            if (propSchema.containsKey('minItems') && propValue.size() < propSchema.minItems) {\n                return false\n            }\n            \n            // Validate array item types if specified\n            if (propSchema.items) {\n                return propValue.every { item -> \n                    validateItemType(item, propSchema.items)\n                }\n            }\n        }\n        \n        return true\n    }\n}\n\ndef convertToMap(testCase) {\n    def objectMapper = new ObjectMapper()\n\n    // Check if required keys exist\n    if (!testCase.containsKey(\"ACTUAL_OUTPUT\") || !testCase.containsKey(\"INPUT\")) {\n        return ['score': 0, 'reason': \"Missing required keys: ACTUAL_OUTPUT or INPUT\"]\n    }\n\n    try {\n        // Parse JSON strings to maps\n        def output = parseJson(testCase.ACTUAL_OUTPUT, objectMapper)\n        def expectedJsonSchema = parseJson(testCase.INPUT, objectMapper)\n        \n        // Validate JSON schema\n        def isValid = validateJsonSchema(output, expectedJsonSchema)\n    \n        return [\n            'score': isValid ? 1 : 0, \n            'reason': isValid ? \"Output matches the expected JSON schema.\" : \"Output does not conform to the expected JSON schema.\"\n        ]\n    } catch (Exception e) {\n        return [\n            'score': 0, \n            'reason': \"JSON parsing error: ${e.message}\"\n        ]\n    }\n}\n\ndef parseJson(data, ObjectMapper objectMapper) {\n    try {\n        // If it's already a Map, return it\n        if (data instanceof Map) {\n            return data\n        }\n        \n        // If it's a string, parse it\n        if (data instanceof String) {\n            return objectMapper.readValue(data, new TypeReference<Map<String, Object>>() {})\n        }\n        \n        // If it's not a string or Map, return null\n        return null\n    } catch (Exception e) {\n        throw new RuntimeException(\"Failed to parse JSON: ${e.message}\")\n    }\n}\n\n// // Example test cases with more complex schemas\n// def testCase1 = [\n//     \"output\": '{\"benefits\": [\"health insurance\", \"flexible working hours\"]}',\n//     \"expectedJsonSchema\": '{\"type\": \"object\", \"properties\": {\"benefits\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}}}}'\n// ]\n\n// def testCase2 = [\n//     \"output\": '{\"benefits\": [\"health insurance\"]}',\n//     \"expectedJsonSchema\": '{\"type\": \"object\", \"properties\": {\"benefits\": {\"type\": \"array\",  \"items\": {\"type\": \"string\"}}}}'\n// ]\n\n// def testCase3 = [\n//     \"output\": '{\"benefits\": [1]}',\n//     \"expectedJsonSchema\": '{\"type\": \"object\", \"properties\": {\"benefits\": {\"type\": \"array\",\"items\": {\"type\": \"string\"}}}}'\n// ]\n\n// def testCase4 = [\n//     \"output\": '{\"name\": \"John\", \"age\": 30}',\n//     \"expectedJsonSchema\": '{\"type\": \"object\", \"properties\": {\"name\": {\"type\": \"string\"}, \"age\": {\"type\": \"number\"}}}'\n// ]\n\n// Run and print test cases\nreturn convertToMap(testCase)",
				"parameters":{
					"testCase":"{{ zg64t.outputs.result.testCases[0] }}"
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":418,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"DrOWd-1",
			"id":"TUgkl",
			"index":0,
			"inputs":{
				"result":{
					"score":"{{ cKKiQ.outputs.result.score }}",
					"reason":"{{ cKKiQ.outputs.result.reason }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":-1,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"version":142
}