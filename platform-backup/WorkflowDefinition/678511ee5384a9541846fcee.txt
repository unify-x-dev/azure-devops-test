{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1736864943149,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760546202936,
		"deployedBy":45768,
		"deployedDefinitionId":"68efcd9a91b109323d43bbfb",
		"status":"DEPLOYED",
		"version":81,
		"workflowVersion":109
	},
	"edges":[
		{
			"fromNodeId":"YtaWZ",
			"priority":0,
			"skip":false,
			"toNodeId":"XUiha",
			"type":"next"
		},
		{
			"fromNodeId":"XUiha",
			"priority":0,
			"skip":false,
			"toNodeId":"n_UeqPM",
			"type":"next"
		},
		{
			"fromNodeId":"n_UeqPM",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_olQNN",
			"type":"if"
		},
		{
			"fromNodeId":"n_olQNN",
			"priority":0,
			"skip":false,
			"toNodeId":"n_8Jn5k",
			"type":"next"
		},
		{
			"fromNodeId":"n_8Jn5k",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_pl28T",
			"type":"if"
		},
		{
			"fromNodeId":"n_pl28T",
			"priority":0,
			"skip":false,
			"toNodeId":"iw1RO",
			"type":"next"
		},
		{
			"fromNodeId":"n_8Jn5k",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"iw1RO",
			"type":"next"
		},
		{
			"fromNodeId":"n_UeqPM",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"iw1RO",
			"type":"next"
		},
		{
			"fromNodeId":"iw1RO",
			"priority":0,
			"skip":false,
			"toNodeId":"h0Eep",
			"type":"next"
		},
		{
			"fromNodeId":"h0Eep",
			"priority":0,
			"skip":false,
			"toNodeId":"6qehR",
			"type":"next"
		},
		{
			"fromNodeId":"6qehR",
			"priority":0,
			"skip":false,
			"toNodeId":"n_Hi11Y",
			"type":"next"
		},
		{
			"fromNodeId":"n_Hi11Y",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KjCTf",
			"type":"next"
		},
		{
			"fromNodeId":"n_KjCTf",
			"priority":0,
			"skip":false,
			"toNodeId":"_Rhwoj",
			"type":"next"
		},
		{
			"fromNodeId":"_Rhwoj",
			"priority":0,
			"skip":false,
			"toNodeId":"n_3fPGV",
			"type":"next"
		},
		{
			"fromNodeId":"n_3fPGV",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"n_nB6K9",
			"type":"if"
		},
		{
			"fromNodeId":"n_nB6K9",
			"priority":0,
			"skip":false,
			"toNodeId":"n_KCuYz",
			"type":"next"
		},
		{
			"fromNodeId":"n_KCuYz",
			"priority":0,
			"skip":false,
			"toNodeId":"n_QRxXn",
			"type":"next"
		},
		{
			"fromNodeId":"n_3fPGV",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"_grBRf",
			"type":"next"
		},
		{
			"fromNodeId":"n_QRxXn",
			"priority":0,
			"skip":false,
			"toNodeId":"_vUw65",
			"type":"next"
		},
		{
			"fromNodeId":"_grBRf",
			"priority":0,
			"skip":false,
			"toNodeId":"_vUw65",
			"type":"next"
		},
		{
			"fromNodeId":"_vUw65",
			"priority":0,
			"skip":false,
			"toNodeId":"_7Xfi4",
			"type":"next"
		},
		{
			"fromNodeId":"_7Xfi4",
			"priority":0,
			"skip":false,
			"toNodeId":"5yZWr",
			"type":"next"
		},
		{
			"fromNodeId":"5yZWr",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"6PcYP",
			"type":"if"
		},
		{
			"fromNodeId":"6PcYP",
			"priority":0,
			"skip":false,
			"toNodeId":"cw2C4",
			"type":"next"
		},
		{
			"fromNodeId":"cw2C4",
			"priority":0,
			"skip":false,
			"toNodeId":"NIaSh",
			"type":"next"
		},
		{
			"fromNodeId":"5yZWr",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"NIaSh",
			"type":"next"
		},
		{
			"fromNodeId":"NIaSh",
			"name":"yes",
			"priority":0,
			"skip":false,
			"toNodeId":"Ha7mh",
			"type":"if"
		},
		{
			"fromNodeId":"Ha7mh",
			"priority":0,
			"skip":false,
			"toNodeId":"rFaF6",
			"type":"next"
		},
		{
			"fromNodeId":"NIaSh",
			"name":"no",
			"priority":0,
			"skip":false,
			"toNodeId":"rFaF6",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"678511ee5384a9541846fcee",
	"lastModifiedBy":0,
	"lcName":"validate and clean llm response ",
	"modifiedTime":1761722753348,
	"name":"Validate And Clean LLM response ",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root.result":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":7,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"YtaWZ",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"publishThought":{
							"type":"boolean",
							"title":"publishThought"
						},
						"finalAnswer":{
							"type":"string",
							"title":"Final Answer"
						},
						"errorMessage":{
							"type":"string",
							"title":"Error Message"
						},
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									},
									"toolName":{
										"type":"string",
										"title":"Tool Name"
									},
									"toolInputs":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Inputs"
									},
									"actionId":{
										"type":"string",
										"title":"Action Id"
									},
									"toolAdditional":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Additional"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools"
						},
						"followups":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Followups"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"llmResponse":{
							"type":"string",
							"title":"llmResponse"
						},
						"caseId":{
							"type":"string",
							"title":"caseId"
						},
						"availableTools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Available Tools"
						},
						"agentId":{
							"type":"string",
							"title":"Agent Id"
						},
						"modelId":{
							"type":"string",
							"title":"modelId"
						},
						"errorMessage":{
							"type":"string",
							"title":"Error Message"
						},
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"name"
									},
									"arguments":{
										"type":"string",
										"title":"arguments"
									},
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"toolsToExecute"
						},
						"enableFollowups":{
							"type":"boolean",
							"title":"Enable Followups"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":2,
				"resourceName":"storage_by_unifyapps_get_record_by_id",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"XUiha",
			"index":2,
			"inputs":{
				"object_type":"e_ai_agent_conversation_state",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"id":"{{ YtaWZ.outputs.caseId }}",
				"readThroughSessionVariables":false
			},
			"skip":false,
			"subTitle":"conv state",
			"title":"Fetch record by ID",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":442,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"n_UeqPM",
			"index":3,
			"inputs":{
				"filters":[
					{
						"property":"{{ XUiha.outputs.properties.promptGuardrail.executionState }}",
						"filter":{
							"operator":"EQUAL",
							"value":"IN_PROGRESS"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":524,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_UeqPM@NDWxv-1@y",
			"id":"n_olQNN",
			"index":4,
			"inputs":{
				"automationId":"68db6c55bea61507c175ff4e",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":442,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_UeqPM@NDWxv-1@y",
			"id":"n_8Jn5k",
			"index":5,
			"inputs":{
				"filters":[
					{
						"property":"{{ n_olQNN.outputs.block }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":514,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_8Jn5k@n_UeqPM@NDWxv-1@y@y",
			"id":"n_pl28T",
			"index":6,
			"inputs":{
				"result":{
					"publishThought":false,
					"finalAnswer":"{{ n_olQNN.outputs.blockedMessage }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":74,
				"resourceName":"variable_by_unifyapps_get_session_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"iw1RO",
			"index":7,
			"inputs":{
				"variableSchema":{
					"type":"object",
					"properties":{
						"collectSlotInputs":{
							"type":"object",
							"properties":{
								"status":{
									"type":"string",
									"title":"Status"
								}
							},
							"additionalProperties":false,
							"title":"Collect Slot Inputs",
							"required":[]
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Get Session Variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":173,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"h0Eep",
			"index":8,
			"inputs":{
				"automationId":"67e2d58d94875751e6bc1066",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"modelId":"{{ YtaWZ.outputs.modelId }}"
				}
			},
			"skip":false,
			"subTitle":"Get ModelName",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":157,
				"resourceName":"variable_by_unifyapps_create_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"6qehR",
			"index":9,
			"inputSchema":{
				"type":"SCHEMA_AND_LAYOUT",
				"dynamic":false,
				"layout":{},
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"finalAnswer":{
							"type":"string",
							"title":"Final Answer"
						},
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"publishThoughts":{
							"type":"boolean",
							"title":"publishThoughts"
						},
						"errMsg":{
							"type":"string",
							"title":"errMsg"
						},
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									},
									"toolName":{
										"type":"string",
										"title":"Tool Name"
									},
									"toolInputs":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Inputs"
									},
									"actionId":{
										"type":"string",
										"title":"Action Id"
									},
									"toolAdditional":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Additional"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools"
						},
						"translatedThought":{
							"type":"string",
							"title":"Translated Thought"
						}
					},
					"required":[]
				}
			},
			"inputs":{},
			"outputSchema":{
				"dynamic":false,
				"schema":{
					"additionalProperties":false,
					"type":"object",
					"properties":{
						"finalAnswer":{
							"type":"string",
							"title":"Final Answer"
						},
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"publishThoughts":{
							"type":"boolean",
							"title":"publishThoughts"
						},
						"errMsg":{
							"type":"string",
							"title":"errMsg"
						},
						"tools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									},
									"toolName":{
										"type":"string",
										"title":"Tool Name"
									},
									"toolInputs":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Inputs"
									},
									"actionId":{
										"type":"string",
										"title":"Action Id"
									},
									"toolAdditional":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Additional"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools"
						},
						"translatedThought":{
							"type":"string",
							"title":"Translated Thought"
						}
					},
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"finalAnswer",
			"title":"Create variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":665,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"n_Hi11Y",
			"index":10,
			"inputs":{
				"object_type":"static_thought",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"translationsOption":"DEFAULT",
				"page":{
					"paginateBy":"OFFSET",
					"limit":200
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"options":{
				"bulkheadConfig":{
					"enabled":false,
					"maxLeaseTimeUnit":"SECONDS",
					"maxWaitDurationUnit":"SECONDS"
				},
				"businessHoursConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"cacheConfig":{
					"enabled":true,
					"timeToLive":"3600",
					"usagePolicy":"ALWAYS"
				},
				"circuitBreakerConfig":{
					"enabled":false
				},
				"disableLogging":false,
				"enabledForReExecution":false,
				"hookConfig":{
					"enabled":false,
					"postHooks":[
						
					],
					"preHooks":[
						
					]
				},
				"logConfig":{
					"enabled":false,
					"logPolicies":[
						
					]
				},
				"rateLimitConfig":{
					"enabled":false,
					"waitForNextWindow":false
				},
				"retryConfig":{
					"backOffFactor":null,
					"captureRetries":false,
					"enabled":false
				},
				"stepError":"STOP",
				"telemetryConfig":{
					"enableTelemetry":false,
					"metricConfigs":[
						
					]
				}
			},
			"skip":false,
			"subTitle":"StaticThoughts",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				},
				"visibleOptionalFields":[
					"root.parameters.toolsToExecute.items.name",
					"root.parameters.toolsToExecute.items.arguments",
					"root.parameters.toolsToExecute.items.toolId"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":512,
				"resourceName":"code_by_unifyapps_python",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"n_KjCTf",
			"index":11,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"name"
									},
									"arguments":{
										"type":"string",
										"title":"arguments"
									},
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"toolsToExecute"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"Name"
									},
									"arguments":{
										"type":"string",
										"title":"Arguments"
									},
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools To Execute"
						}
					}
				},
				"configurationMode":"DEFAULT",
				"code":"import json\nfrom json_repair import repair_json\n\ndef safe_deserialize_arguments(toolsToExecute: list):\n    result = []\n\n    for tool in toolsToExecute:\n        name=tool.get(\"name\",None)\n        toolId=tool.get(\"toolId\",None)\n        args_str = tool.get(\"arguments\", \"\")\n        try:\n            # Try normal JSON parsing\n            arguments = json.loads(args_str)\n        except json.JSONDecodeError:\n            print(f\"[WARN] Invalid JSON in tool '{name}', attempting repair...\")\n            try:\n                repaired = repair_json(args_str)\n                arguments = json.loads(repaired)\n                print(f\"[INFO] Successfully repaired arguments for '{name}'\")\n            except Exception as e:\n                print(f\"[ERROR] Failed to repair arguments for '{name}': {e}\")\n                arguments = None\n\n        result.append({\n            \"name\": name,\n            \"toolId\":toolId,\n            \"arguments\": json.dumps(arguments,ensure_ascii=False)\n        })\n    \n    return result\n\nif 'toolsToExecute' in locals():\n    if len(toolsToExecute) > 0:\n        if any(not (tool.get(\"name\") or \"\").strip() for tool in toolsToExecute):\n            result = {\"toolsToExecute\": []}\n        else:\n            parsed_tools = safe_deserialize_arguments(toolsToExecute)\n            result = {\"toolsToExecute\": parsed_tools}\n    else:\n        result = {\"toolsToExecute\": []}\nelse:\n    result = {\"toolsToExecute\": []}",
				"isAsync":false,
				"python_version":"3.12",
				"captureStdOutput":false,
				"parameters":{
					"toolsToExecute":{
						"source":"{{ YtaWZ.outputs.toolsToExecute }}",
						"ua:type":"mappedArray",
						"items":{
							"name":"{{ YtaWZ.outputs.toolsToExecute[0].name }}",
							"arguments":"{{ YtaWZ.outputs.toolsToExecute[0].arguments }}",
							"toolId":"{{ YtaWZ.outputs.toolsToExecute[0].toolId }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Python script",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.toolsToExecute.items.name",
					"root.parameters.toolsToExecute.items.arguments",
					"root.parameters.availableTools.items",
					"root.parameters.toolsToExecute.items.toolId",
					"root.parameters.staticThoughts.items.toolName",
					"root.parameters.staticThoughts.items.toolType",
					"root.parameters.staticThoughts.items.staticThoughtId",
					"root.parameters.staticThoughts.items.staticThought"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":11,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"_Rhwoj",
			"index":12,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"publishThought",
						"errorMessage"
					],
					"properties":{
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"finalAnswer":{
							"type":"string",
							"title":"finalAnswer"
						},
						"publishThought":{
							"type":"boolean",
							"title":"Publish Thought"
						},
						"errorMessage":{
							"type":"string",
							"title":"Error Message"
						},
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"id":{
										"type":"string",
										"title":"Id"
									},
									"name":{
										"type":"string",
										"title":"Name"
									},
									"toolInput":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Input"
									},
									"actionId":{
										"type":"string",
										"title":"Action Id"
									},
									"toolAdditional":{
										"type":"object",
										"properties":{},
										"additionalProperties":false,
										"title":"Tool Additional"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Tools To Execute"
						},
						"thoughtMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Thought Map"
						},
						"isStaticThought":{
							"type":"boolean",
							"title":"Is Static Thought"
						},
						"followups":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Follow Ups"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[
						"llmResponse"
					],
					"properties":{
						"llmResponse":{
							"type":"string",
							"title":"Llm Response"
						},
						"availableTools":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false,
								"required":[]
							},
							"title":"Available Tools"
						},
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"name"
									},
									"arguments":{
										"type":"string",
										"title":"arguments"
									},
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"toolsToExecute"
						},
						"agentId":{
							"type":"string",
							"title":"Agent Id"
						},
						"collectSlotStatus":{
							"type":"string",
							"title":"Collect Slot Status"
						},
						"triggeredByAgentWaitingInstanceId":{
							"type":"string",
							"title":"Triggered By Agent Waiting Instance Id"
						},
						"formatErrorMessage":{
							"type":"string",
							"title":"Format Error Message"
						},
						"staticThoughts":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"toolName":{
										"type":"string",
										"title":"toolName"
									},
									"toolType":{
										"type":"string",
										"title":"toolType"
									},
									"staticThoughtId":{
										"type":"string",
										"title":"staticThoughtId"
									},
									"staticThought":{
										"type":"string",
										"title":"staticThought"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"staticThoughts"
						},
						"enableFollowups":{
							"type":"boolean",
							"title":"Enable Followups"
						}
					}
				},
				"code":"import java.util.regex.Matcher\nimport java.util.regex.Pattern\n\nMap<String, Object> getStaticThought(String toolName, Map toolInput, List<Map> staticThoughtArray) {\n    String tool = toReadableTitle(toolName) ?: \"\"\n    \n    if (staticThoughtArray == null) {\n        staticThoughtArray = []\n    }\n    List<Map> candidates = staticThoughtArray.findAll { it.toolName == toolName }\n    if (candidates.isEmpty()) {\n        candidates = staticThoughtArray.findAll { it.toolType == \"GLOBAL\" }\n    }\n    if (candidates.isEmpty()) {\n        candidates = staticThoughtArray.findAll { it.toolType == \"FALLBACK\" }\n    }\n\n    if (candidates.isEmpty()) {\n        return [\n            id        : \"FALLBACK_0\",\n            template  : \"Handling your request...\",\n            toolName  : tool,\n            topicName : toolInput?.topicName ?: null,\n            agentName : toolInput?.agentName ?: null\n        ]\n    }\n\n    Map pick = candidates[new Random().nextInt(candidates.size())]\n\n    return [\n        id        : pick.staticThoughtId,\n        template  : pick.staticThought,\n        toolName  : tool,\n        topicName : toolInput?.topicName ?: null,\n        agentName : toolInput?.agentName ?: null\n    ]\n}\n\nMap<String, Object> safeMap(Object obj) {\n    return (obj instanceof Map) ? (Map<String, Object>) obj : Collections.emptyMap()\n}\n\nString toReadableTitle(String input) {\n    if (input == null || input.isEmpty()) {\n        return \"\"\n    }\n    \n    String spaced = input.replaceAll('_', ' ')\n\n    spaced = spaced.replaceAll(/([a-z])([A-Z])/, '$1 $2')\n\n    return spaced\n        .split(' ')\n        .collect { word ->\n            word.isEmpty() ? \"\" : word[0].toUpperCase() + word.substring(1).toLowerCase()\n        }\n        .join(' ')\n}\n\n// deprecated\nString snakeToTitleCase(String snakeCase) {\n    if (snakeCase == null || snakeCase.isEmpty()) {\n        return \"\"\n    }\n    return snakeCase.split('_')\n        .collect { word ->\n            word.isEmpty() ? \"\" : word[0].toUpperCase() + word.substring(1).toLowerCase()\n        }\n        .join(' ')\n}\n\nString getThought(String llmResponse) {\n    Pattern thoughtPattern = ~/(?:Thought:)?([\\s\\S]*?)(?=\\n{1,}\\n{1,}Action:|\\n{1,}ActionInput:|\\n{0,}Final[\\s]*Answer:|\\n{1,}chunk[\\s]*Ids:|$)/\n    Pattern exactThoughtPattern = ~/Thought:([\\s\\S]*?)(?=\\n{1,}Thought:|\\n{1,}Action:|\\n{1,}ActionInput:|\\n{0,}Final[\\s]*Answer:|\\n{1,}chunk[\\s]*Ids:|$)/\n\n    Matcher thoughtMatch = thoughtPattern.matcher(llmResponse)\n    Matcher exactThoughtMatch = exactThoughtPattern.matcher(llmResponse)\n\n    String thought = null\n    String exactThought = null\n\n    if (thoughtMatch.find() && thoughtMatch.groupCount() >= 1) {\n        thought = thoughtMatch.group(1)?.trim()\n    }\n\n    if (exactThoughtMatch.find() && exactThoughtMatch.groupCount() >= 1) {\n        exactThought = exactThoughtMatch.group(1)?.trim()\n    }\n\n    if (exactThought != null && thought != null && thought.contains(\"Thought:\")) {\n        thought = exactThought\n    }\n    if(thought == \"\"){\n        thought = null\n    }\n    return thought\n}\n\nList<String> extractFollowups(String finalAnswer) {\n    if (!finalAnswer) return []\n\n    Pattern pattern = Pattern.compile('(?i)Followups\\\\s*:\\\\s*(.*)')\n    Matcher matcher = pattern.matcher(finalAnswer)\n\n    if (matcher.find() && matcher.groupCount() >= 1) {\n        String content = matcher.group(1).trim()\n        if (!content.isEmpty()) {\n            return content.split(/\\s*\\|\\s*/).collect { it.trim() }.findAll { it }\n        }\n    }\n\n    return []\n}\n\nString getFinalAnswer(String llmResponse) {\n    Pattern finalAnswerPattern = ~/(?:Final[\\s]*Answer:)([\\s\\S]*?)(?=\\n{1,}Thought:|\\n{1,}Action:|\\n{1,}ActionInput:|\\n{1,}Final[\\s]*Answer:|\\n{1,}chunk[\\s]*Ids:|$)/\n    Matcher matcher = finalAnswerPattern.matcher(llmResponse)\n\n    if (matcher.find() && matcher.groupCount() >= 1) {\n        String ans = matcher.group(1).trim()\n        ans = ans.replaceAll(/(?i)\\s*Followups\\s*:\\s*.*$/, \"\").trim()\n        // cleanup dangling markdown bold markers\n        if (ans.indexOf(\"**\\n\") == 0)\n            ans = ans.replaceAll(/^\\*+/, \"\").replaceAll(/\\*+$/, \"\")\n        return ans\n    }\n\n    return null\n}\n\nList<Integer> parseCitations(String finalAnswer) {\n    if (!finalAnswer?.trim()) return []\n\n    List<Integer> chunkIds = []\n    Pattern pattern = Pattern.compile(/\\$\\$\\[(.*?)\\]\\$\\$/, Pattern.DOTALL)\n    Matcher matcher = pattern.matcher(finalAnswer)\n\n    while (matcher.find()) {\n        String matchContent = matcher.group(1)\n        for (String part : matchContent.split(',')) {\n            String trimmed = part.trim()\n            if (trimmed) {\n                try {\n                    chunkIds.add(Integer.parseInt(trimmed))\n                } catch (NumberFormatException ignore) {\n                    // skip unparsable numbers\n                }\n            }\n        }\n    }\n    return chunkIds.unique().sort()\n}\n\nList<Map<String, Object>> getToolsToExecute(Map<String, Object> toolMap,\n                                            List<Object> requestedTools,\n                                            String llmResponse,\n                                            String agentId) {\n    List<Map<String, Object>> toExecute = []\n\n    for (Object r : requestedTools) {\n        Map<String, Object> req = safeMap(r)\n        String name = req[\"name\"]?.toString() ?: \"\"\n        Map<String, Object> selectedTool = safeMap(toolMap.get(name))\n\n        if (!selectedTool.isEmpty()) {\n            Object arguments = req[\"arguments\"]\n            Map<String, Object> parsedArgs = (arguments != null)\n                    ? (Map<String, Object>) com.unifyapps.infra.utils.JsonUtils.fromJson(arguments.toString(), Map.class)\n                    : new LinkedHashMap<String, Object>()\n\n            Map<String, Object> toolEntry = new LinkedHashMap<>()\n            toolEntry.put(\"name\", selectedTool[\"name\"])\n            toolEntry.put(\"id\", req[\"toolId\"] ?: UUID.randomUUID().toString()[0..22])\n            toolEntry.put(\"toolInput\", parsedArgs)\n            toolEntry.put(\"actionId\", selectedTool[\"id\"])\n            toolEntry.put(\"toolAdditional\", selectedTool[\"additional\"])\n            toExecute.add(toolEntry)\n        }\n    }\n\n    Pattern chunkIdsPattern = ~/chunk[\\s]*Ids:([\\s\\S]*?)(?=\\n{1,}Thought:|\\n{1,}Action:|\\n{1,}ActionInput:|\\n{1,}Final[\\s]*Answer:|\\n{1,}chunk[\\s]*Ids:|$)/\n    Matcher chunkIdsMatch = chunkIdsPattern.matcher(llmResponse)\n    String chunkIds = null\n\n    if (chunkIdsMatch.find() && chunkIdsMatch.groupCount() >= 1) {\n        chunkIds = chunkIdsMatch.group(1)?.trim()\n    }\n\n    if (chunkIds != null && chunkIds.length() > 0) {\n        Pattern digitPattern = ~/\\d+/\n        Matcher matcher = digitPattern.matcher(chunkIds)\n        List<Integer> numbers = []\n\n        while (matcher.find()) {\n            numbers.add(Integer.parseInt(matcher.group()))\n        }\n\n        String jsonStr = \"{\\\"chunkIds\\\":[\" + String.join(\",\", numbers.collect { it.toString() }) + \"]}\"\n        Map<String, Object> citationTool = new LinkedHashMap<>()\n        citationTool.put(\"name\", \"PublishCitations\")\n        citationTool.put(\"id\", \"PublishCitations\")\n        citationTool.put(\"actionId\",\"PublishCitations\")\n        citationTool.put(\"toolInput\", (Map<String, Object>) com.unifyapps.infra.utils.JsonUtils.fromJson(jsonStr, Map.class))\n        toExecute.add(citationTool)\n    }\n\n    return toExecute\n}\n\nMap<String, Object> getFormatErrorMsg() {\n    def defaultErrorMessage =\n            \"\"\"\n    You didn't use the right format. You MUST either use a tool (among the available ones), OR give the best final answer.Here is the expected format You must follow:\n    ```\n    Thought: <Should always think about what to do next. Use clear and simple language in Markdown format. Address your thoughts to the user in a conversational manner, referring to users as \\\"you\\\" rather than \\\"the user.\\\">\n    Tool Execution:Then execute a tool from the list provided to you except `publishCitations`.\n    ```\n    This Thought/Tool Execution process can repeat N times. Once you know the final answer, you must return the following format:\n    ```\n    Thought: I now can give a great answer\n    Final Answer: Your final answer must be the great and the most complete as possible, it must be outcome described\\nTool Execution: Then execute the `publishCitations` tool if `ReferFromKnowledge` tool is used before.\n    ```\n    \"\"\"\n    String formatErrorMessage = binding.hasVariable(\"formatErrorMessage\")\n            ? binding.getVariable(\"formatErrorMessage\")\n            : null\n    return [\n            errorMessage: formatErrorMessage?:defaultErrorMessage\n    ]\n}\n\n\n// ==== Main Logic ====\n\nString llmResponse = binding.hasVariable(\"llmResponse\") ? binding.getVariable(\"llmResponse\") : \"\"\nString agentId = binding.hasVariable(\"agentId\") ? binding.getVariable(\"agentId\") : \"\"\nString thought = getThought(llmResponse)\nboolean enableFollowups = binding.hasVariable('enableFollowups') ? binding.getVariable('enableFollowups') : false\nList<String> followups = enableFollowups ? extractFollowups(llmResponse) : []\nString finalAnswer = getFinalAnswer(llmResponse)\nString formatErrorMessage = binding.hasVariable(\"formatErrorMessage\")?binding.getVariable(\"formatErrorMessage\"):null\nList<Map<String,Object>> staticThoughtArray = binding.hasVariable(\"staticThoughts\")\n    ? (List<Map<String,Object>>) binding.getVariable(\"staticThoughts\")\n    : null\n\nMap<String, Object> toolMap = [:]\nObject collectSlotStatus = binding.hasVariable(\"collectSlotStatus\") ? binding.getVariable(\"collectSlotStatus\") : null\n\nif (binding.hasVariable(\"availableTools\")) {\n    List<Map<String, Object>> availableTools = (List<Map<String, Object>>) binding.getVariable(\"availableTools\")\n    for (Map<String, Object> t : availableTools) {\n        toolMap[t[\"name\"].toString().trim()] = t\n    }\n}\n\nList<Object> toolsToExecute = binding.hasVariable(\"toolsToExecute\") ? (List<Object>) binding.getVariable(\"toolsToExecute\") : []\nList<Map<String, Object>> toolsExecutionQueue = getToolsToExecute(toolMap, toolsToExecute, llmResponse, agentId)\nMap<String, Object> toolToExecute = toolsExecutionQueue ? toolsExecutionQueue[0] : null\n\nboolean isStaticThought = false\nMap<String, Object> thoughtMap = null\n\n// when no tool to execute\nif (toolToExecute == null || toolToExecute[\"actionId\"] == \"PublishCitations\") {\n    if (finalAnswer == null) {\n        if (!toolsToExecute.isEmpty()) {\n            String toolName = safeMap(toolsToExecute[0])[\"name\"] as String\n            return [errorMessage: toolName + \" is not a valid tool, carefully consider and use only if tool is present in the list of available tools or else provide the final answer if you are not sure about which tool to use \"]\n        }\n        return getFormatErrorMsg()\n    } else if (!binding.hasVariable(\"triggeredByAgentWaitingInstanceId\")) {\n        thought = null\n    }\n} else {\n    if (finalAnswer != null) {\n        thought = null\n        toolsExecutionQueue = []\n    } else if (toolToExecute[\"actionId\"] == \"CollectSlot\") {\n        thought = null\n    } else if (thought == null) {\n        Map<String, Object> toolInput = com.unifyapps.infra.utils.JsonUtils.fromJson(com.unifyapps.infra.utils.JsonUtils.toJson(toolToExecute[\"toolInput\"]), Map.class)\n        thoughtMap = getStaticThought(toolToExecute[\"name\"] as String, toolInput, staticThoughtArray)\n        thought = thoughtMap != null ? thoughtMap[\"template\"] : null\n        isStaticThought = true\n    }\n}\n\nif (finalAnswer != null && finalAnswer.length() > 0) {\n    List<Integer> chunkIds = parseCitations(finalAnswer)\n    if (chunkIds.size() > 0) {\n        toolsExecutionQueue.add([\n                name     : \"PublishCitations\",\n                actionId : \"PublishCitations\",\n                id       : UUID.randomUUID().toString()[0..22],\n                toolInput: [chunkIds: chunkIds]\n        ])\n    }\n}\n\nreturn [\n        thought        : thought,\n        thoughtMap     : thoughtMap,\n        isStaticThought: isStaticThought,\n        toolsToExecute : toolsExecutionQueue,\n        finalAnswer    : finalAnswer,\n        followups      : followups,\n        publishThought : thought != null && !thought.isEmpty(),\n]",
				"compile_static":true,
				"captureStdOutput":false,
				"parameters":{
					"llmResponse":"{{ YtaWZ.outputs.llmResponse }}",
					"agentId":"{{ YtaWZ.outputs.agentId }}",
					"collectSlotStatus":"{{ iw1RO.outputs.collectSlotInputs.status }}",
					"triggeredByAgentWaitingInstanceId":"{{ XUiha.outputs.properties.triggerDetails.triggeredByAgentDetails.waitingInstanceId }}",
					"formatErrorMessage":"{{ YtaWZ.outputs.errorMessage }}",
					"enableFollowups":"{{ YtaWZ.outputs.enableFollowups }}",
					"availableTools":{
						"ua:type":"mappedArray",
						"source":"{{ YtaWZ.outputs.availableTools }}",
						"items":"{{ YtaWZ.outputs.availableTools[0] }}"
					},
					"toolsToExecute":{
						"ua:type":"mappedArray",
						"items":{
							"name":"{{ n_KjCTf.outputs.result.toolsToExecute[0].name }}",
							"arguments":"{{ n_KjCTf.outputs.result.toolsToExecute[0].arguments }}",
							"toolId":"{{ n_KjCTf.outputs.result.toolsToExecute[0].toolId }}"
						},
						"source":"{{ n_KjCTf.outputs.result.toolsToExecute }}"
					},
					"staticThoughts":{
						"source":"{{ n_Hi11Y.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":{
							"toolName":"{{ n_Hi11Y.outputs.objects[0].properties.toolName }}",
							"toolType":"{{ n_Hi11Y.outputs.objects[0].properties.toolType }}",
							"staticThoughtId":"{{ n_Hi11Y.outputs.objects[0].properties.staticThoughtId }}",
							"staticThought":"{{ n_Hi11Y.outputs.objects[0].properties.staticThought }}"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"validate and Extract Tool",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":439,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"n_3fPGV",
			"index":13,
			"inputs":{
				"filters":[
					{
						"property":"{{ _Rhwoj.outputs.result.isStaticThought }}",
						"filter":{
							"operator":"EQUAL",
							"value":"true"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"isStaticThought?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":452,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_3fPGV@NDWxv-1@y",
			"id":"n_nB6K9",
			"index":14,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"templatedValue":{
							"type":"string",
							"title":"Templated Value"
						},
						"staticThought":{
							"type":"string",
							"title":"Static Thought"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"thoughtMap":{
							"type":"object",
							"properties":{},
							"additionalProperties":false,
							"title":"Thought Map"
						}
					}
				},
				"code":"String resolveThoughtValue(Map<String, Object> thoughtMap) {\n    if (thoughtMap == null || !thoughtMap.containsKey(\"id\")) {\n        return null\n    }\n\n    String id = thoughtMap[\"id\"] as String\n\n    if (id.startsWith(\"SETTOPIC\") || id.startsWith(\"SWITCHTOPIC\")) {\n        return thoughtMap[\"topicName\"] as String\n    } else if (id.startsWith(\"INVOKEAGENT\")) {\n        return thoughtMap[\"agentName\"] as String\n    } else {\n        return thoughtMap[\"toolName\"] as String\n    }\n}\n\nif (!binding.hasVariable('thoughtMap')) {\n    return [\"templatedValue\": \"\", \"staticThought\": \"\"]\n}\n\ndef templatedValue = resolveThoughtValue(thoughtMap)\ndef staticThought = thoughtMap?.template ?: \"\"\n\nif (staticThought?.contains(\"{1}\")) {\n    staticThought = staticThought.replace(\"{1}\", templatedValue ?: \"\")\n}\n\nreturn [\"templatedValue\": templatedValue, \"staticThought\": staticThought]",
				"compile_static":false,
				"captureStdOutput":false,
				"parameters":{
					"thoughtMap":"{{ _Rhwoj.outputs.result.thoughtMap }}"
				}
			},
			"skip":false,
			"subTitle":"Extract Templated Value",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":467,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_3fPGV@NDWxv-1@y",
			"id":"n_KCuYz",
			"index":15,
			"inputs":{
				"automationId":"68c6c5ca4735b46ff83ed947",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"labels":{
						"items":{
							"label":"{{ _Rhwoj.outputs.result.thoughtMap.id }}",
							"parameters":{
								"items":"{{ n_nB6K9.outputs.result.templatedValue }}",
								"ua:type":"mappedArray"
							}
						},
						"ua:type":"mappedArray"
					}
				}
			},
			"skip":false,
			"subTitle":"Translation LookUp",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":447,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_3fPGV@NDWxv-1@y",
			"id":"n_QRxXn",
			"index":16,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.translatedThought }}",
						"value":"=IF(ISBLANK({{ n_KCuYz.outputs.translatedTexts[0].translatedText }}), {{ n_nB6K9.outputs.result.staticThought }}, {{ n_KCuYz.outputs.translatedTexts[0].translatedText }})"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":447,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"n_3fPGV@NDWxv-1@n",
			"id":"_grBRf",
			"index":17,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.translatedThought }}",
						"value":"{{ _Rhwoj.outputs.result.thought }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":199,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"_vUw65",
			"index":18,
			"inputs":{
				"automationId":"67f439a9faf9a1695c2e7fa9",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"aiAgentId":"{{ YtaWZ.outputs.agentId }}",
					"answer":"{{ 6qehR.outputs.translatedThought }}",
					"caseId":"{{ YtaWZ.outputs.caseId }}"
				}
			},
			"skip":false,
			"subTitle":"Guardrail On Thought",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":161,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"_7Xfi4",
			"index":19,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.finalAnswer }}",
						"value":"{{ _Rhwoj.outputs.result.finalAnswer }}"
					},
					{
						"source":"{{ 6qehR.outputs.thought }}",
						"value":"{{ _vUw65.outputs.response }}"
					},
					{
						"source":"{{ 6qehR.outputs.publishThoughts }}",
						"value":"{{ _Rhwoj.outputs.result.publishThought }}"
					},
					{
						"source":"{{ 6qehR.outputs.errMsg }}",
						"value":"{{ _Rhwoj.outputs.result.errorMessage }}"
					},
					{
						"source":"{{ 6qehR.outputs.tools }}",
						"value":{
							"ua:type":"mappedArray",
							"items":{
								"toolId":"{{ _Rhwoj.outputs.result.toolsToExecute[0].id }}",
								"toolName":"{{ _Rhwoj.outputs.result.toolsToExecute[0].name }}",
								"toolInputs":"{{ _Rhwoj.outputs.result.toolsToExecute[0].toolInput }}",
								"actionId":"{{ _Rhwoj.outputs.result.toolsToExecute[0].actionId }}",
								"toolAdditional":"{{ _Rhwoj.outputs.result.toolsToExecute[0].toolAdditional }}"
							},
							"source":"{{ _Rhwoj.outputs.result.toolsToExecute }}"
						}
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":153,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"5yZWr",
			"index":20,
			"inputs":{
				"filters":[
					{
						"property":"{{ 6qehR.outputs.finalAnswer }}",
						"filter":{
							"operator":"EXISTS"
						}
					},
					{
						"property":"=ISBLANK({{ 6qehR.outputs.finalAnswer }})",
						"filter":{
							"operator":"EQUAL",
							"value":"false"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"finalAnswer?",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":167,
				"resourceName":"callables_call_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5yZWr@NDWxv-1@y",
			"id":"6PcYP",
			"index":21,
			"inputs":{
				"automationId":"67deb2086ff2a87705083ae4",
				"runtimeConnections":{},
				"synchronous":true,
				"version":"-1",
				"parameters":{
					"caseId":"{{ YtaWZ.outputs.caseId }}",
					"agentId":"{{ YtaWZ.outputs.agentId }}",
					"finalAnswer":"{{ 6qehR.outputs.finalAnswer }}"
				}
			},
			"skip":false,
			"subTitle":"RunthroughGaurdrail",
			"title":"Call automation",
			"type":"CALL_WORKFLOW"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":156,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"5yZWr@NDWxv-1@y",
			"id":"cw2C4",
			"index":22,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.finalAnswer }}",
						"value":"{{ 6PcYP.outputs.finalAnswer }}"
					}
				]
			},
			"skip":false,
			"subTitle":"update final Answer",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"if_else",
				"resourceVersion":15,
				"resourceName":"if_else_condition",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"NIaSh",
			"index":23,
			"inputs":{
				"filters":[
					{
						"property":"{{ XUiha.outputs.properties.triggerDetails.triggeredByAgentDetails.waitingInstanceId }}",
						"filter":{
							"operator":"EXISTS"
						}
					},
					{
						"property":"{{ 6qehR.outputs.tools[0].toolId }}",
						"filter":{
							"operator":"EQUAL",
							"value":"PublishCitations"
						}
					}
				],
				"operator":"AND"
			},
			"skip":false,
			"subTitle":"Condition",
			"title":"Condition",
			"type":"IF_ELSE"
		},
		{
			"context":{
				"appName":"variable_by_unifyapps",
				"resourceVersion":15,
				"resourceName":"variable_by_unifyapps_update_variables",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NIaSh@NDWxv-1@y",
			"id":"Ha7mh",
			"index":24,
			"inputs":{
				"variables":[
					{
						"source":"{{ 6qehR.outputs.finalAnswer }}",
						"value":"{{ 6qehR.outputs.finalAnswer }} these are the citation inputs , make sure to use these citations when generating final answer strictly \n{{ 6qehR.outputs.tools[0].toolId }}+{{ 6qehR.outputs.tools[0].toolName }}+{{ 6qehR.outputs.tools[0].toolInputs }}"
					}
				]
			},
			"skip":false,
			"subTitle":"Variable by UnifyApps",
			"title":"Update variables",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.result.thought",
					"root.result.publishThought",
					"root.result.toolId",
					"root.result.finalAnswer",
					"root.result.errorMessage"
				]
			},
			"context":{
				"appName":"callables",
				"resourceVersion":159,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"NDWxv-1",
			"id":"rFaF6",
			"index":25,
			"inputs":{
				"result":{
					"thought":"{{ 6qehR.outputs.thought }}",
					"publishThought":"{{ 6qehR.outputs.publishThoughts }}",
					"finalAnswer":"{{ 6qehR.outputs.finalAnswer }}",
					"errorMessage":"{{ 6qehR.outputs.errMsg }}",
					"tools":{
						"source":"{{ 6qehR.outputs.tools }}",
						"ua:type":"mappedArray",
						"items":{
							"toolId":"{{ 6qehR.outputs.tools[0].toolId }}",
							"toolName":"{{ 6qehR.outputs.tools[0].toolName }}",
							"toolInputs":"{{ 6qehR.outputs.tools[0].toolInputs }}",
							"actionId":"{{ 6qehR.outputs.tools[0].actionId }}",
							"toolAdditional":"{{ 6qehR.outputs.tools[0].toolAdditional }}"
						}
					},
					"followups":{
						"source":"{{ _Rhwoj.outputs.result.followups }}",
						"ua:type":"mappedArray",
						"items":"{{ _Rhwoj.outputs.result.followups[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":311,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		"AI Agent",
		"Internal"
	],
	"version":110
}