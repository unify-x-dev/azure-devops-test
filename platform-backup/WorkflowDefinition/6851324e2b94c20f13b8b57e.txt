{
	"appsUsed":[
		
	],
	"createdTime":1750490455989,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1760296244423,
		"deployedBy":-1,
		"deployedDefinitionId":"68ebfd34d60dd816d779904a",
		"status":"DEPLOYED",
		"version":47,
		"workflowVersion":69
	},
	"description":"This automation converts the thinking_agent_without_tools models to agent_system_prompt_without_tools(default) response format.",
	"edges":[
		{
			"fromNodeId":"n_1XNM7",
			"priority":0,
			"skip":false,
			"toNodeId":"_u0Zp7",
			"type":"next"
		},
		{
			"fromNodeId":"_u0Zp7",
			"priority":0,
			"skip":false,
			"toNodeId":"n_ggUk3",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"6851324e2b94c20f13b8b57e",
	"lastModifiedBy":0,
	"lcName":"thinkingagentwithouttoolsresponseconverter",
	"modifiedTime":1761722791376,
	"name":"ThinkingAgentWithoutToolsResponseConverter",
	"nodes":[
		{
			"context":{
				"appName":"callables",
				"resourceVersion":444,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_tGkfr-1",
			"id":"n_1XNM7",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"additionalProperties":false,
					"properties":{
						"llmResponse":{
							"type":"string",
							"title":"llmResponse"
						},
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"name"
									},
									"arguments":{
										"type":"string",
										"title":"arguments"
									},
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"toolsToExecute"
						}
					}
				},
				"setup":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"llmResponse":{
							"type":"string",
							"title":"llmResponse"
						},
						"toolsToExecute":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"name":{
										"type":"string",
										"title":"name"
									},
									"arguments":{
										"type":"string",
										"title":"arguments"
									},
									"toolId":{
										"type":"string",
										"title":"Tool Id"
									}
								},
								"additionalProperties":false,
								"required":[]
							},
							"title":"toolsToExecute"
						},
						"enableFollowups":{
							"type":"boolean",
							"title":"Enable Followups"
						}
					}
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":448,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_tGkfr-1",
			"id":"_u0Zp7",
			"index":2,
			"inputs":{
				"output":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"thought":{
							"type":"string",
							"title":"thought"
						},
						"finalAnswer":{
							"type":"string",
							"title":"finalAnswer"
						},
						"finalLlmResponse":{
							"type":"string",
							"title":"finalLlmResponse"
						}
					}
				},
				"input":{
					"type":"object",
					"additionalProperties":false,
					"required":[],
					"properties":{
						"llmResponse":{
							"type":"string",
							"title":"llmResponse"
						},
						"enableFollowups":{
							"type":"boolean",
							"title":"Enable Followups"
						}
					}
				},
				"code":"import java.util.regex.Pattern\nimport java.util.regex.Matcher\n\nstatic Map<String, Object> safeMap(Object obj) {\n    return (obj instanceof Map) ? (Map<String, Object>) obj : Collections.emptyMap()\n}\n\nboolean enableFollowups = binding.hasVariable('enableFollowups')?binding.getVariable(\"enableFollowups\"):false\nString llmResponse = binding.hasVariable(\"llmResponse\") ? binding.getVariable(\"llmResponse\")?.toString() : \"\"\nString xmlThoughtContent = getXmlThoughtContent(llmResponse)\nString thought = (xmlThoughtContent != null && !xmlThoughtContent.isEmpty()) ? xmlThoughtContent : getThought(removeXmlThoughtTags(llmResponse))\nList<String> followups = enableFollowups?getFollowups(llmResponse):[]\nString finalAnswer = getFinalAnswer(removeXmlThoughtTags(llmResponse))\n\nString finalLlmResponse = \"\"\nif (thought != null && !thought.isEmpty()) {\n    finalLlmResponse += \"Thought: \" + thought\n}\nif (finalAnswer != null && !finalAnswer.isEmpty()) {\n    finalLlmResponse += \"\\nFinalAnswer: \" + finalAnswer\n}\nif (followups && !followups.isEmpty() && enableFollowups) {\n    finalLlmResponse += \"\\nFollowups: \" + followups.join(\" | \")\n}\n\nreturn [\n    thought          : thought,\n    finalAnswer      : finalAnswer,\n    finalLlmResponse : finalLlmResponse\n]\n\n// ---------------------------\n// Helper methods\n// ---------------------------\n\n// static String getThought(String llmResponse) {\n//     Pattern pattern1 = Pattern.compile('(?:Thought:)?([\\\\s\\\\S]*?)(?=\\\\n{1,}\\\\n{1,}Action:|\\\\n{1,}ActionInput:|\\\\n{1,}Final\\\\s*Answer:|\\\\n{1,}chunk\\\\s*Ids:|$)')\n//     Pattern pattern2 = Pattern.compile('Thought:([\\\\s\\\\S]*?)(?=\\\\n{1,}Thought:|\\\\n{1,}Action:|\\\\n{1,}ActionInput:|\\\\n{1,}Final\\\\s*Answer:|\\\\n{1,}chunk\\\\s*Ids:|$)')\n\n//     Matcher match1 = pattern1.matcher(llmResponse)\n//     Matcher match2 = pattern2.matcher(llmResponse)\n\n//     String thought = (match1.find() && match1.groupCount() >= 1) ? match1.group(1).trim() : null\n//     String exactThought = (match2.find() && match2.groupCount() >= 1) ? match2.group(1).trim() : null\n\n//     if (exactThought != null && thought != null && thought.contains(\"Thought:\")) {\n//         thought = exactThought\n//     }\n\n//     return thought\n// }\n\nstatic String getThought(String llmResponse) {\n    if (llmResponse.trim().matches(\"(?i)^Final\\\\s*Answer:.*\")) {\n        return null\n    }\n\n    Pattern pattern1 = Pattern.compile('(?:Thought:)?([\\\\s\\\\S]*?)(?=\\\\n{0,}Final\\\\s*Answer:|\\\\n{0,}Action:|\\\\n{0,}ActionInput:|\\\\n{0,}chunk\\\\s*Ids:|$)')\n    Pattern pattern2 = Pattern.compile('Thought:([\\\\s\\\\S]*?)(?=\\\\n{0,}Thought:|\\\\n{0,}Action:|\\\\n{0,}ActionInput:|\\\\n{0,}Final\\\\s*Answer:|\\\\n{0,}chunk\\\\s*Ids:|$)')\n\n    Matcher match1 = pattern1.matcher(llmResponse)\n    Matcher match2 = pattern2.matcher(llmResponse)\n\n    String thought = (match1.find() && match1.groupCount() >= 1) ? match1.group(1).trim() : null\n    String exactThought = (match2.find() && match2.groupCount() >= 1) ? match2.group(1).trim() : null\n\n    if (exactThought != null && thought != null && thought.contains(\"Thought:\")) {\n        thought = exactThought\n    }\n\n    if (thought != null && thought.trim().matches(\"(?i)^Final\\\\s*Answer:.*\")) {\n        return null\n    }\n\n    return thought\n}\n\nstatic String getFinalAnswer(String llmResponse) {\n    Pattern pattern = Pattern.compile('Final\\\\s*Answer:([\\\\s\\\\S]*?)(?=\\\\n{1,}Thought:|\\\\n{1,}Action:|\\\\n{1,}ActionInput:|\\\\n{1,}Final\\\\s*Answer:|\\\\n{1,}chunk\\\\s*Ids:|$)')\n    Matcher match = pattern.matcher(llmResponse)\n    return (match.find() && match.groupCount() >= 1) ? match.group(1).trim() : null\n}\n\nstatic String getXmlThoughtContent(String llmResponse) {\n    Pattern pattern = Pattern.compile('(?s)<(think|thought|reasoning)>(.*?)</\\\\1>')\n    Matcher match = pattern.matcher(llmResponse)\n    return (match.find() && match.groupCount() >= 2) ? match.group(2).trim() : \"\"\n}\n\nstatic String removeXmlThoughtTags(String text) {\n    return text.replaceAll('(?s)<(think|thought|reasoning)>.*?</\\\\1>', \"\").trim()\n}\n\nstatic List<String> getFollowups(String llmResponse) {\n    String cleanedResponse = removeXmlThoughtTags(llmResponse)\n\n    Pattern pattern = Pattern.compile('(?s)\"followups\"\\\\s*:\\\\s*\\\\[(.*?)\\\\]')\n    Matcher matcher = pattern.matcher(cleanedResponse)\n\n    if (matcher.find() && matcher.groupCount() >= 1) {\n        String content = matcher.group(1).trim()\n        if (!content.isEmpty()) {\n            return content.split(',').collect { it.replaceAll('[\"\\']', '').trim() }.findAll { it }\n        }\n    }\n    return []\n}",
				"compile_static":true,
				"captureStdOutput":false,
				"parameters":{
					"llmResponse":"{{ n_1XNM7.outputs.llmResponse }}",
					"enableFollowups":"{{ n_1XNM7.outputs.enableFollowups }}"
				}
			},
			"skip":false,
			"subTitle":"parse",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":454,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_tGkfr-1",
			"id":"n_ggUk3",
			"index":3,
			"inputs":{
				"result":{
					"toolsToExecute":{
						"items":{
							"name":"{{ n_1XNM7.outputs.toolsToExecute[0].name }}",
							"arguments":"{{ n_1XNM7.outputs.toolsToExecute[0].arguments }}",
							"toolId":"{{ n_1XNM7.outputs.toolsToExecute[0].toolId }}"
						},
						"ua:type":"mappedArray",
						"source":"{{ n_1XNM7.outputs.toolsToExecute }}"
					},
					"llmResponse":"{{ _u0Zp7.outputs.result.finalLlmResponse }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":1728,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":71
}