{
	"appsUsed":[
		"storage_by_unifyapps"
	],
	"createdTime":1755785409928,
	"deleted":false,
	"deploymentState":{
		"deployedAt":1761674848681,
		"deployedBy":0,
		"deployedDefinitionId":"69010660cb9893140dafae89",
		"status":"DEPLOYED",
		"version":38,
		"workflowVersion":80
	},
	"edges":[
		{
			"fromNodeId":"n_hU8mn",
			"priority":0,
			"skip":false,
			"toNodeId":"n_BmkQ2",
			"type":"next"
		},
		{
			"fromNodeId":"n_BmkQ2",
			"priority":0,
			"skip":false,
			"toNodeId":"n_PRQh9",
			"type":"next"
		},
		{
			"fromNodeId":"n_PRQh9",
			"priority":0,
			"skip":false,
			"toNodeId":"_B2aNk",
			"type":"next"
		},
		{
			"fromNodeId":"_B2aNk",
			"priority":0,
			"skip":false,
			"toNodeId":"n_S1g3j",
			"type":"next"
		},
		{
			"fromNodeId":"n_S1g3j",
			"priority":0,
			"skip":false,
			"toNodeId":"_jbkh8",
			"type":"next"
		},
		{
			"fromNodeId":"_jbkh8",
			"priority":0,
			"skip":false,
			"toNodeId":"n_P61es",
			"type":"next"
		},
		{
			"fromNodeId":"n_P61es",
			"priority":0,
			"skip":false,
			"toNodeId":"n_a4DGc",
			"type":"next"
		}
	],
	"grants":{
		"configs":[
			{
				"permissions":[
					"V"
				],
				"principalType":"GLOBAL"
			}
		]
	},
	"id":"689333076e02350bebe5368c",
	"lastModifiedBy":0,
	"lcName":"eval | live eval | aggregate metric store",
	"modifiedTime":1761722663207,
	"name":"Eval | Live Eval | Aggregate metric store",
	"nodes":[
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				}
			},
			"context":{
				"appName":"callables",
				"resourceVersion":447,
				"resourceName":"callables_from_automation"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_LZ97z-1",
			"id":"n_hU8mn",
			"index":1,
			"inputs":{
				"result":{
					"type":"object",
					"properties":{
						"metricScores":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"metricId":{
										"type":"string",
										"title":"metricId"
									},
									"status":{
										"type":"string",
										"title":"status"
									},
									"aggregateScore":{
										"type":"integer",
										"title":"aggregateScore"
									},
									"threshold":{
										"type":"string",
										"title":"threshold"
									}
								},
								"additionalProperties":false
							},
							"title":"Metric Scores"
						},
						"failedCount":{
							"type":"integer",
							"title":"Failed Count"
						},
						"passedCount":{
							"type":"integer",
							"title":"Passed Count"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"setup":{
					"type":"object",
					"properties":{
						"aiAgentId":{
							"type":"string",
							"title":"Ai Agent Id"
						}
					},
					"additionalProperties":false,
					"required":[]
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Trigger via automation",
			"trigger":{
				"type":"CALLABLE"
			},
			"type":"START"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":532,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_LZ97z-1",
			"id":"n_BmkQ2",
			"index":2,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"properties_experimentId",
							"filter":{
								"operator":"EQUAL",
								"value":"{{ n_hU8mn.outputs.aiAgentId }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"test_case_runs",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"page":{
					"paginateBy":"OFFSET",
					"limit":200000
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Test case run for LLM",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.input.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_LZ97z-1",
			"id":"n_PRQh9",
			"index":3,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"arrLLM":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Arr LLM"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"input":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Input"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def aggregateMetricScores(objects) {\n    // Map to store aggregated data for each metric ID\n    def metricAggregates = [:]\n    \n    // Process each object\n    objects.each { obj ->\n\n        if (obj?.properties?.type != 'LLM') return\n        // Get metricScores from properties\n        def metricScores = obj.properties?.metricScores\n        \n        if (metricScores) {\n            metricScores.each { metric ->\n                def metricId = metric.metricId\n                def score = metric.score\n                \n                // Only include if score is present (not null)\n                if (score != null) {\n                    if (!metricAggregates.containsKey(metricId)) {\n                        metricAggregates[metricId] = [\n                            metricId: metricId,\n                            totalScore: 0,\n                            count: 0\n                        ]\n                    }\n                    \n                    metricAggregates[metricId].totalScore += score\n                    metricAggregates[metricId].count += 1\n                }\n            }\n        }\n    }\n    \n    // Calculate average scores and create result array\n    def result = []\n    metricAggregates.each { metricId, data ->\n        result.add([\n            metricId: data.metricId,\n            aggregateScore: data.totalScore / data.count\n        ])\n    }\n    \n    return result\n}\n\ndef input = (binding.hasVariable('input') && input) ? input : []\nreturn ['arrLLM':aggregateMetricScores(input)]\n",
				"parameters":{
					"input":{
						"source":"{{ n_BmkQ2.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ n_BmkQ2.outputs.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"For LLM",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"additional":{
				"visibleOptionalFields":[
					"root.parameters.input.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_LZ97z-1",
			"id":"_B2aNk",
			"index":4,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"conArr":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Con Arr"
						}
					},
					"additionalProperties":false,
					"required":[
						"conArr"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"input":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Input"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def aggregateMetricScores(objects) {\n    // First, group by caseId and keep only the latest record for each case\n    def latestRecordsByCase = [:]\n    \n    objects.each { obj ->\n        if (obj?.properties?.type == 'LLM') return\n        \n        def caseId = obj.properties?.caseId\n        def modifiedTime = obj.modifiedTime\n        \n        if (caseId && modifiedTime) {\n            if (!latestRecordsByCase.containsKey(caseId) || \n                modifiedTime > latestRecordsByCase[caseId].modifiedTime) {\n                latestRecordsByCase[caseId] = obj\n            }\n        }\n    }\n    \n    // Map to store aggregated data for each metric ID\n    def metricAggregates = [:]\n    \n    // Process only the latest records for each case\n    latestRecordsByCase.values().each { obj ->\n        // Get metricScores from properties\n        def metricScores = obj.properties?.metricScores\n        \n        if (metricScores) {\n            metricScores.each { metric ->\n                def metricId = metric.metricId\n                def score = metric.score\n                \n                // Only include if score is present (not null)\n                if (score != null) {\n                    if (!metricAggregates.containsKey(metricId)) {\n                        metricAggregates[metricId] = [\n                            metricId: metricId,\n                            totalScore: 0,\n                            count: 0\n                        ]\n                    }\n                    \n                    metricAggregates[metricId].totalScore += score\n                    metricAggregates[metricId].count += 1\n                }\n            }\n        }\n    }\n    \n    // Calculate average scores and create result array\n    def result = []\n    metricAggregates.each { metricId, data ->\n        result.add([\n            metricId: data.metricId,\n            aggregateScore: data.totalScore / data.count\n        ])\n    }\n    \n    return result\n}\n\ndef input = (binding.hasVariable('input') && input) ? input : []\nreturn ['conArr':aggregateMetricScores(input)]\n",
				"parameters":{
					"input":{
						"ua:type":"mappedArray",
						"source":"{{ n_BmkQ2.outputs.objects }}"
					}
				}
			},
			"skip":false,
			"subTitle":"For converstaional",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_LZ97z-1",
			"id":"n_S1g3j",
			"index":5,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"ids":{
							"type":"array",
							"items":{
								"type":"string"
							},
							"title":"Ids"
						}
					},
					"additionalProperties":false,
					"required":[
						"ids"
					]
				},
				"input":{
					"type":"object",
					"properties":{
						"input":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Input"
						}
					},
					"additionalProperties":false,
					"required":[
						"input"
					]
				},
				"compile_static":false,
				"code":"def extractIds(objects) {\n    def result = [] as Set\n    \n    objects.each { obj ->\n        def metricScores = obj.properties?.metricScores\n        \n        if (metricScores) {\n            metricScores.each { metric ->\n                if (metric.score != null) {\n                    result.add(metric.metricId)\n                }\n            }\n        }\n    }\n    \n    return result as List\n}\n\ndef input = (binding.hasVariable('input') && input) ? input : []\nreturn ['ids':extractIds(input)]",
				"parameters":{
					"input":{
						"source":"{{ n_BmkQ2.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ n_BmkQ2.outputs.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Code by UnifyApps",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"storage_by_unifyapps",
				"resourceVersion":532,
				"resourceName":"storage_by_unifyapps_fetch_records",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_LZ97z-1",
			"id":"_jbkh8",
			"index":6,
			"inputs":{
				"triggerInputCondition":{
					"filters":[
						{
							"property":"id",
							"filter":{
								"operator":"IN",
								"value":"{{ n_S1g3j.outputs.result.ids }}"
							}
						}
					],
					"operator":"AND"
				},
				"object_type":"e_ai_evaluation_metric",
				"includeRoleMappings":false,
				"includeCurrentUserPermissions":false,
				"page":{
					"paginateBy":"OFFSET",
					"limit":200000
				},
				"numberOfRecordsToFetch":"MULTIPLE",
				"readThroughSessionVariables":false,
				"includeTotalCount":false
			},
			"skip":false,
			"subTitle":"Storage by UnifyApps",
			"title":"Fetch records",
			"type":"ACTION"
		},
		{
			"additional":{
				"xsdSchemaConfig":{
					"root":{}
				},
				"visibleOptionalFields":[
					"root.parameters.llmAggregateScores.items",
					"root.parameters.conversationAggregateScores.items",
					"root.parameters.metricConfigs.items"
				]
			},
			"context":{
				"appName":"code_by_unifyapps",
				"resourceVersion":451,
				"resourceName":"code_by_unifyapps_groovy",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_LZ97z-1",
			"id":"n_P61es",
			"index":7,
			"inputs":{
				"output":{
					"type":"object",
					"properties":{
						"metricScores":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{
									"metricId":{
										"type":"string",
										"title":"metricId"
									},
									"status":{
										"type":"string",
										"title":"status"
									},
									"aggregateScore":{
										"type":"integer",
										"title":"aggregateScore"
									},
									"threshold":{
										"type":"string",
										"title":"threshold"
									}
								},
								"additionalProperties":false
							},
							"title":"Metric Scores"
						},
						"failedCount":{
							"type":"integer",
							"title":"Failed Count"
						},
						"passedCount":{
							"type":"integer",
							"title":"Passed Count"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"input":{
					"type":"object",
					"properties":{
						"llmAggregateScores":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Llm Aggregate Scores"
						},
						"conversationAggregateScores":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Conversation Aggregate Scores"
						},
						"metricConfigs":{
							"type":"array",
							"items":{
								"type":"object",
								"properties":{},
								"additionalProperties":false
							},
							"title":"Metric Configs"
						}
					},
					"additionalProperties":false,
					"required":[]
				},
				"compile_static":false,
				"code":"def evaluateMetricStatus(aggregateScoresArray, metricConfigArray, counters) {\n    // Create a map for quick lookup of metric configs by id\n    def metricConfigMap = [:]\n    metricConfigArray.each { metric ->\n        metricConfigMap[metric.id] = metric\n    }\n    \n    def result = []\n    \n    aggregateScoresArray.each { scoreData ->\n        def metricId = scoreData.metricId\n        def aggregateScore = scoreData.aggregateScore\n        def metricConfig = metricConfigMap[metricId]\n        \n        if (metricConfig) {\n            def criteria = metricConfig.properties?.testCaseSuccessCriteria\n            def op = criteria?.op\n            def rawValue = criteria?.values ? criteria.values[0] : null\n\n            def thresholdValue\n            if (rawValue instanceof Boolean) {\n                thresholdValue = rawValue\n            } else if (rawValue instanceof Number) {\n                thresholdValue = rawValue\n            } else {\n                try {\n                    thresholdValue = Double.parseDouble(rawValue.toString())\n                } catch (Exception e) {\n                    thresholdValue = 0\n                }\n            }\n\n            // Determine status based on operation\n            def status = \"failed\"\n            def threshold = \"\"\n            \n            switch(op) {\n                case \"GTE\":\n                    status = (aggregateScore >= thresholdValue) ? \"pass\" : \"failed\"\n                    threshold = \">=${thresholdValue}\".toString()\n                    break\n                case \"LTE\":\n                    status = (aggregateScore <= thresholdValue) ? \"pass\" : \"failed\"\n                    threshold = \"<=${thresholdValue}\".toString()\n                    break\n                case \"EQUAL\":\n                    status = (aggregateScore == thresholdValue) ? \"pass\" : \"failed\"\n                    threshold = \"=${thresholdValue}\".toString()\n                    break\n                default:\n                    threshold = \"unknown\"\n            }\n            \n            // Increment counters\n            if (status == \"pass\") {\n                counters.passedCount++\n            } else {\n                counters.failedCount++\n            }\n            \n            result.add([\n                metricId      : metricId,\n                status        : status,\n                aggregateScore: aggregateScore,\n                threshold     : threshold\n            ])\n        }\n    }\n    \n    return result\n}\n\n// Function that merges results\ndef processMetricEvaluation(llmAggregateScores, conversationAggregateScores, metricConfigsInput, counters) {\n    def llmResults = evaluateMetricStatus(llmAggregateScores, metricConfigsInput, counters)\n    def conversationResults = evaluateMetricStatus(conversationAggregateScores, metricConfigsInput, counters)\n    \n    def mergedResults = []\n    mergedResults.addAll(llmResults)\n    mergedResults.addAll(conversationResults)\n    \n    return mergedResults\n}\n\n// Initialize counters\ndef counters = [passedCount: 0, failedCount: 0]\n\ndef llmAggregateInput = (binding.hasVariable('llmAggregateScores') && llmAggregateScores) ? llmAggregateScores : []\ndef conversationAggregateInput = (binding.hasVariable('conversationAggregateScores') && conversationAggregateScores) ? conversationAggregateScores : []\ndef configInput = (binding.hasVariable('metricConfigs') && metricConfigs) ? metricConfigs : []\n\ndef metricScores = processMetricEvaluation(llmAggregateInput, conversationAggregateInput, configInput, counters)\n\nreturn [\n    metricScores: metricScores,\n    passedCount : counters.passedCount,\n    failedCount : counters.failedCount\n]\n",
				"parameters":{
					"llmAggregateScores":{
						"source":"{{ n_PRQh9.outputs.result.arrLLM }}",
						"ua:type":"mappedArray",
						"items":"{{ n_PRQh9.outputs.result.arrLLM[0] }}"
					},
					"conversationAggregateScores":{
						"source":"{{ _B2aNk.outputs.result.conArr }}",
						"ua:type":"mappedArray",
						"items":"{{ _B2aNk.outputs.result.conArr[0] }}"
					},
					"metricConfigs":{
						"source":"{{ _jbkh8.outputs.objects }}",
						"ua:type":"mappedArray",
						"items":"{{ _jbkh8.outputs.objects[0] }}"
					}
				}
			},
			"skip":false,
			"subTitle":"Compute final answer",
			"title":"Execute Groovy code",
			"type":"ACTION"
		},
		{
			"context":{
				"appName":"callables",
				"resourceVersion":457,
				"resourceName":"callables_return_to_automation",
				"type":"APPLICATION"
			},
			"debug":false,
			"dirty":false,
			"fallbackMode":"STOP",
			"groupId":"_LZ97z-1",
			"id":"n_a4DGc",
			"index":8,
			"inputs":{
				"result":{
					"metricScores":{
						"source":"{{ n_P61es.outputs.result.metricScores }}",
						"ua:type":"mappedArray",
						"items":{
							"metricId":"{{ n_P61es.outputs.result.metricScores[0].metricId }}",
							"status":"{{ n_P61es.outputs.result.metricScores[0].status }}",
							"aggregateScore":"{{ n_P61es.outputs.result.metricScores[0].aggregateScore }}",
							"threshold":"{{ n_P61es.outputs.result.metricScores[0].threshold }}"
						}
					},
					"failedCount":"{{ n_P61es.outputs.result.failedCount }}",
					"passedCount":"{{ n_P61es.outputs.result.passedCount }}"
				}
			},
			"skip":false,
			"subTitle":"Callable",
			"title":"Respond to automation",
			"type":"STOP"
		}
	],
	"ownerUserId":45771,
	"schemaReferences":[
		
	],
	"settings":{
		"enableNodeLevelLogging":true,
		"enableRunLogging":true,
		"enableVariableLogging":true,
		"route":{
			"default":false,
			"tierName":"global"
		}
	},
	"standard":true,
	"tags":[
		
	],
	"version":82
}